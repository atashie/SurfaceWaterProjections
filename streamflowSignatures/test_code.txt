
while (run < (nrow(Alaskan_gages))) { 
  #while (run < 12) { #### fewer examples for testing
  run = run + 1
  this_row = run
  gage_data =  readNWISdv(siteNumber = Alaskan_gages$STAID[this_row],
                          parameterCd = "00060",
                          startDate = '1900-01-01', endDate = end_date)	# note that there is an error called if there are no data within the date range; so need to call all data, then subset the years we want
  gage_id = gage_data$site_no[1]
  if(nrow(gage_data > 1))	{
    if(last(gage_data$Date) > start_date){
      gage_data = subset(gage_data, Date > start_date)
      
      recess_char[run, "gage_id"] = gage_id
      recess_char[run,'lat_gage'] = AK_basinid$LAT_GAGE[which(AK_basinid$STAID == gage_id)]
      recess_char[run,'lon_gage'] = AK_basinid$LNG_GAGE[which(AK_basinid$STAID == gage_id)]
      recess_char[run,'lat_cent'] = Alaskan_cent$LAT_CENT[which(Alaskan_cent$STAID == gage_id)]
      recess_char[run,'lon_cent'] = Alaskan_cent$LONG_CENT[which(Alaskan_cent$STAID == gage_id)]
      
      # checking to see if there are a minimum data length
      if(last(gage_data$Date)-first(gage_data$Date) > (20*365.25))	{
        
        names(gage_data)[4] = "origQ"
        gage_data$origQ[-which(gage_data[,5] %in% c("A", "A e", "P", "P e"))] = NA	# removing flagged data
        
        streamy = gage_data[ , c("Date", "origQ")]
        
        ########################################################################
        # checking to see if streamflow is estimated for all months of year, and streamflow is greater than 0 more than 10% of the time
        if(length(unique(month(streamy$Date))) == 12 & length(which(streamy$origQ > 0)) > (nrow(streamy) / 10))	{
          
          
          
          
          # bringing in climate data
          
          # but first need to find the hydrobasins (and their centroids) that are upstream of the gage
          pt1 = st_point(c(recess_char[run,'lon_gage'],recess_char[run,'lat_gage']))	# gage location
          lon_lat = st_sfc(pt1, crs=4326)
          which_hydro_basin = st_intersects(lon_lat, basinAt_NorAm_polys)[[1]]		# row of intersecting hydrobasins database 
          these_hydro_basins = as.character(basinAt_NorAm_polys$HYBAS_ID[which_hydro_basin])	# name of intersecting hydrobasins database
          
          if(these_hydro_basins %in% names(gaged_upstreams))	{
            these_hydro_basins = gaged_upstreams[[which(names(gaged_upstreams) == basinAt_NorAm_strip[which_hydro_basin,"HYBAS_ID"])]]
          }	else	{
            HB_remaining = basinAt_NorAm_strip[-which(basinAt_NorAm_strip$HYBAS_ID == these_hydro_basins),]
            print(nrow(HB_remaining))
            
            while(any(these_hydro_basins %in% HB_remaining$NEXT_DOWN))	{
              for(trueys in which(these_hydro_basins %in% HB_remaining$NEXT_DOWN))	{
                new_HB_ID_rows = which(HB_remaining$NEXT_DOWN == these_hydro_basins[trueys])
                new_HB_ID = as.character(HB_remaining$HYBAS_ID[new_HB_ID_rows])
                these_hydro_basins = c(these_hydro_basins, new_HB_ID)
                print(these_hydro_basins)
                HB_remaining = HB_remaining[-new_HB_ID_rows,]
                print(nrow(HB_remaining))
              }
            }
            new_row = length(gaged_upstreams) + 1
            gaged_upstreams[[new_row]] = these_hydro_basins
            names(gaged_upstreams)[new_row] = these_hydro_basins[1]
            saveRDS(gaged_upstreams, file="J:\\Users\\arik\\Documents\\PhD Research\\D4\\HB_upstreams_n.RData")
          }
          
          
          
          # now actually bringing in the climate data
          tot_hydro_basins = length(these_hydro_basins)
          sample_number = 0
          for(num_hydro_basins in 1:tot_hydro_basins)	{
            
            which_hybas = which(basinAt_NorAm_centroid$HYBAS_ID == these_hydro_basins[num_hydro_basins])
            this_lonlat = st_coordinates(basinAt_NorAm_centroid[which_hybas,])
            deg_in_km = 1 / 110								# assuming 110 km / deg
            the_box = (sqrt(basinAt_NorAm_centroid$SUB_AREA[which_hybas]) * deg_in_km) / 2
            the_lats = seq(this_lonlat[1,2] - the_box, this_lonlat[1,2] + the_box, deg_in_km*2)	
            the_lons = seq(this_lonlat[1,1] - the_box, this_lonlat[1,1] + the_box, deg_in_km*2)
            
            for(this_lon in the_lons)	{
              for(this_lat in the_lats)	{
                tryCatch({
                  daymet_data_n = download_daymet(
                    lat = this_lat,
                    lon = this_lon,
                    #			start = year(gage_data$Date[1])+1,
                    #			end = year(last(gage_data$Date)),
                    start = 1980,
                    end = 2021,
                    internal = TRUE)
                  sample_number = sample_number+1
                  if(sample_number == 1)	{daymet_data = daymet_data_n} else {daymet_data$data[ ,3:9] = daymet_data$data[ ,3:9] + daymet_data_n$data[ ,3:9]}
                }, error = function(e) { })			
              }
            }
          }
          
          daymet_data$data[,3:9] = daymet_data$data[,3:9] / sample_number
          
          
          
          daymet_data$data$Date = as.Date(paste(daymet_data$data$year, daymet_data$data$yday, sep="-"),"%Y-%j")
          daymet_data$data$month = month(daymet_data$data$Date)
          daymet_data$data$snow_melt = 0
          daymet_data$data$snow_melt[-1] = -diff(daymet_data$data$swe..kg.m.2)
          daymet_data$data$snow_accum_days = 1
          daymet_data$data$snow_accum_days[which(daymet_data$data$snow_melt < 0)] = 0
          daymet_data$data$snow_melt[which(daymet_data$data$snow_melt < 0)] = 0
          daymet_data$data$rainfall = daymet_data$data$prcp..mm.day * daymet_data$data$snow_accum_days
          daymet_data$data$snowfall = daymet_data$data$prcp..mm.day * abs(daymet_data$data$snow_accum_days - 1)
          daymet_data$data$rain_n_melt = daymet_data$data$snow_melt + daymet_data$data$rainfall
          daymet_data$data$avgTemp = (daymet_data$data$tmax..deg.c. + daymet_data$data$tmin..deg.c.) / 2
          daymet_data$data$thaw_index = 0
          daymet_data$data$thaw_index[which(daymet_data$data$avgTemp > 0)] = daymet_data$data$avgTemp[which(daymet_data$data$avgTemp > 0)]
          daymet_data$data$PET = PET_fromTemp(daymet_data$data$yday, daymet_data$data$tmax..deg.c, daymet_data$data$tmin..deg.c,
                                              lat_radians =  min((this_lonlat[1,2]*pi/180), 1.1))	# seems to throw errors in very high latitudes
          
          
          # converting to mm/day
          sqkm = AK_basinid$DRAIN_SQKM[which(AK_basinid$STAID == gage_id)] 
          conversion = 60*60*24 / (sqkm * 3280.84 * 3280.84 * 3280.84) * 1000000
          streamy$Q = as.numeric(streamy$origQ) * conversion
          
          streamy$year = year(streamy$Date)
          streamy$month = month(streamy$Date)
          all_the_years = sort(unique(streamy$year))
          # dropping the first, final, and missing years
          max_years_to_use = all_the_years[-c(1,length(all_the_years))]	
          years_to_use = NULL
          for(pippy in max_years_to_use)	{
            test_year = subset(streamy, year == pippy)
            nona_rows = which(!is.na(test_year$Q))
            if(length(nona_rows) > 250) {
              nonzero_rows = which(test_year$Q > .0001)
              if(length(nonzero_rows > 30))		years_to_use = c(years_to_use, pippy)
            }
          }
          if(length(years_to_use) > 10)	{
            
            yrs_to_plot = years_to_use[1:3]
            
            # temporary dataframes for holding data to be tested
            flowvols_byYear = data.frame(cbind(years_to_use, NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))
            colnames(flowvols_byYear) = c('year', 'Qann', 'Qwin', 'Qspr', 'Qsum', 'Qfal', 'Q5', 'Q10', 'Q20','Q30','Q40', 'Q50','Q60', 'Q70', 'Q80','Q90', 'Q95')
            julday_max = data.frame(cbind(years_to_use), NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA)
            colnames(julday_max) = c('year', 'allQ_day', 'D5_day', 'D10_day', 'D20_day', 'D30_day', 'D40_day', 'D50_day', 'D60_day', 'D70_day', 'D80_day', 'D90_day', 'D95_day')
            Q_tBefore_byYear = as.data.frame(matrix(ncol=length(years_to_use), nrow=366))
            colnames(Q_tBefore_byYear) = years_to_use
            Q_tAfter_byYear = as.data.frame(matrix(ncol=length(years_to_use), nrow=366))
            colnames(Q_tAfter_byYear) = years_to_use
            Q_tBefore_ratio_byYear = as.data.frame(matrix(ncol=length(years_to_use), nrow=366))
            colnames(Q_tBefore_ratio_byYear) = years_to_use
            FDC_byYear = data.frame(cbind(years_to_use, NA,NA,NA))
            colnames(FDC_byYear) = c('year', 'slp_all', 'slp_90th', 'slp_mid')
            flashiness_byYear = data.frame(cbind(years_to_use, NA))
            colnames(flashiness_byYear) = c('year', 'RB_index')
            # DFI
            DFIs = data.frame(cbind(rep(years_to_use, each=4), rep(1:4, length(years_to_use)),NA,NA,NA,NA))	#creating a table for holding DFIs by year, later to be used for calculating slopes of these relationships
            colnames(DFIs) = c('year','seasons', 'overland', 'qflow', 'dflow', 'bflow')
            DFI_byYear = data.frame(cbind(years_to_use, NA,NA,NA,NA))
            colnames(DFI_byYear) = c('year', 'overland', 'qflow', 'dflow', 'bflow')
            DFI_volumeByYear = data.frame(cbind(years_to_use, NA,NA,NA,NA))
            colnames(DFI_volumeByYear) = c('year', 'overland', 'qflow', 'dflow', 'bflow')
            DFI_varianceByYear = data.frame(cbind(years_to_use, NA,NA,NA,NA))
            colnames(DFI_varianceByYear) = c('year', 'overland', 'qflow', 'dflow', 'bflow')
            DFI_DDays = data.frame(cbind(years_to_use, NA,NA,NA, NA,NA,NA, NA,NA,NA, NA,NA,NA))
            colnames(DFI_DDays) = c('year', 'oday_25', 'oday_50', 'oday_75', 'qday_25', 'qday_50', 'qday_75', 'dday_25', 'dday_50', 'dday_75','bday_25', 'bday_50', 'bday_75')
            # WMO				by World Meteorological Organisation WMO using baseflow() in lfstat
            WMO = data.frame(cbind(rep(years_to_use, each=4), rep(1:4, length(years_to_use)),NA,NA))	#creating a table for holding DFIs by year, later to be used for calculating slopes of these relationships
            colnames(WMO) = c('year', 'seasons', 'qflow', 'bflow')
            WMO_byYear = data.frame(cbind(years_to_use, NA,NA))
            colnames(WMO_byYear) = c('year', 'qflow', 'bflow')
            WMO_volumeByYear = data.frame(cbind(years_to_use, NA,NA))
            colnames(WMO_volumeByYear) = c('year', 'qflow', 'bflow')
            WMO_varianceByYear = data.frame(cbind(years_to_use, NA,NA))
            colnames(WMO_varianceByYear) = c('year', 'qflow', 'bflow')
            WMO_DDays = data.frame(cbind(years_to_use, NA,NA,NA, NA,NA,NA))
            colnames(WMO_DDays) = c('year', 'qday_25', 'qday_50', 'qday_75', 'bday_25', 'bday_50', 'bday_75')
            # NM90			Nathan and McMahon 1990 using BaseflowSeparation() in EcoHydRology
            NM90 = data.frame(cbind(rep(years_to_use, each=4), rep(1:4, length(years_to_use)),NA,NA))	#creating a table for holding DFIs by year, later to be used for calculating slopes of these relationships
            colnames(NM90) = c('year', 'seasons', 'qflow', 'bflow')
            NM90_byYear = data.frame(cbind(years_to_use, NA,NA))
            colnames(NM90_byYear) = c('year', 'qflow', 'bflow')
            NM90_volumeByYear = data.frame(cbind(years_to_use, NA,NA))
            colnames(NM90_volumeByYear) = c('year', 'qflow', 'bflow')
            NM90_varianceByYear = data.frame(cbind(years_to_use, NA,NA))
            colnames(NM90_varianceByYear) = c('year', 'qflow', 'bflow')
            NM90_DDays = data.frame(cbind(years_to_use, NA,NA,NA, NA,NA,NA))
            colnames(NM90_DDays) = c('year', 'qday_25', 'qday_50', 'qday_75', 'bday_25', 'bday_50', 'bday_75')
            # NM90			Ladson et al. 2013 via Lynne and Hollick 1979 using baseflows() in hydrostats
            LH13 = data.frame(cbind(rep(years_to_use, each=4), rep(1:4, length(years_to_use)),NA,NA))	#creating a table for holding DFIs by year, later to be used for calculating slopes of these relationships
            colnames(LH13) = c('year', 'seasons', 'qflow', 'bflow')
            LH13_byYear = data.frame(cbind(years_to_use, NA,NA))
            colnames(LH13_byYear) = c('year', 'qflow', 'bflow')
            LH13_volumeByYear = data.frame(cbind(years_to_use, NA,NA))
            colnames(LH13_volumeByYear) = c('year', 'qflow', 'bflow')
            LH13_varianceByYear = data.frame(cbind(years_to_use, NA,NA))
            colnames(LH13_varianceByYear) = c('year', 'qflow', 'bflow')
            LH13_DDays = data.frame(cbind(years_to_use, NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA, NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))
            colnames(LH13_DDays) = c('year', 'qday_5', 'qday_10', 'qday_20', 'qday_30', 'qday_40', 'qday_50', 'qday_60', 'qday_70', 'qday_80', 'qday_90', 'qday_95',
                                     'bday_5', 'bday_10', 'bday_20', 'bday_30', 'bday_40', 'bday_50', 'bday_60', 'bday_70', 'bday_80', 'bday_90', 'bday_95')
            # E05				Eckhardt 2005 using bf_oneparam
            E05 = data.frame(cbind(rep(years_to_use, each=4), rep(1:4, length(years_to_use)),NA,NA))	#creating a table for holding DFIs by year, later to be used for calculating slopes of these relationships
            colnames(E05) = c('year', 'seasons', 'qflow', 'bflow')
            E05_byYear = data.frame(cbind(years_to_use, NA,NA))
            colnames(E05_byYear) = c('year', 'qflow', 'bflow')
            E05_volumeByYear = data.frame(cbind(years_to_use, NA,NA))
            colnames(E05_volumeByYear) = c('year', 'qflow', 'bflow')
            E05_varianceByYear = data.frame(cbind(years_to_use, NA,NA))
            colnames(E05_varianceByYear) = c('year', 'qflow', 'bflow')
            E05_varianceByYear = data.frame(cbind(years_to_use, NA,NA))
            colnames(E05_varianceByYear) = c('year', 'qflow', 'bflow')
            E05_DDays = data.frame(cbind(years_to_use, NA,NA,NA, NA,NA,NA))
            colnames(E05_DDays) = c('year', 'qday_25', 'qday_50', 'qday_75', 'bday_25', 'bday_50', 'bday_75')
            # E12				Eckhardt 2012 using bf_eckhardt
            E12 = data.frame(cbind(rep(years_to_use, each=4), rep(1:4, length(years_to_use)),NA,NA))	#creating a table for holding DFIs by year, later to be used for calculating slopes of these relationships
            colnames(E12) = c('year', 'seasons', 'qflow', 'bflow')
            E12_byYear = data.frame(cbind(years_to_use, NA,NA))
            colnames(E12_byYear) = c('year', 'qflow', 'bflow')
            E12_volumeByYear = data.frame(cbind(years_to_use, NA,NA))
            colnames(E12_volumeByYear) = c('year', 'qflow', 'bflow')
            E12_varianceByYear = data.frame(cbind(years_to_use, NA,NA))
            colnames(E12_varianceByYear) = c('year', 'qflow', 'bflow')
            E12_DDays = data.frame(cbind(years_to_use, NA,NA,NA, NA,NA,NA))
            colnames(E12_DDays) = c('year', 'qday_25', 'qday_50', 'qday_75', 'bday_25', 'bday_50', 'bday_75')
            # B93				Eckhardt 2005 using bf_boughton
            B93 = data.frame(cbind(rep(years_to_use, each=4), rep(1:4, length(years_to_use)),NA,NA))	#creating a table for holding DFIs by year, later to be used for calculating slopes of these relationships
            colnames(B93) = c('year', 'seasons', 'qflow', 'bflow')
            B93_byYear = data.frame(cbind(years_to_use, NA,NA))
            colnames(B93_byYear) = c('year', 'qflow', 'bflow')
            B93_volumeByYear = data.frame(cbind(years_to_use, NA,NA))
            colnames(B93_volumeByYear) = c('year', 'qflow', 'bflow')
            B93_varianceByYear = data.frame(cbind(years_to_use, NA,NA))
            colnames(B93_varianceByYear) = c('year', 'qflow', 'bflow')
            B93_DDays = data.frame(cbind(years_to_use, NA,NA,NA, NA,NA,NA))
            colnames(B93_DDays) = c('year', 'qday_25', 'qday_50', 'qday_75', 'bday_25', 'bday_50', 'bday_75')
            # Daymet Climate Data
            RnMlt_byYear = data.frame(cbind(years_to_use, NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))
            colnames(RnMlt_byYear) = c('year','annum', 'Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
            RnMltfracs_byYear = as.data.frame(matrix(ncol=length(years_to_use), nrow=366))
            colnames(RnMltfracs_byYear) = years_to_use
            RnMltfracs_byYear_shft = as.data.frame(matrix(ncol=length(years_to_use), nrow=366))
            colnames(RnMltfracs_byYear_shft) = years_to_use
            RnMltfracs_byYear_l = as.data.frame(matrix(ncol=length(years_to_use), nrow=366))
            colnames(RnMltfracs_byYear_l) = years_to_use
            julrnmlt_max = data.frame(cbind(years_to_use), NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA)
            colnames(julrnmlt_max) = c('year', 'allQ_rnmlt', 'D5_day', 'D10_day', 'D20_day', 'D30_day', 'D40_day', 'D50_day', 'D60_day', 'D70_day', 'D80_day', 'D90_day', 'D95_day')
            julprcp_max = data.frame(cbind(years_to_use), NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA)
            colnames(julprcp_max) = c('year', 'allQ_rnmlt', 'D5_day', 'D10_day', 'D20_day', 'D30_day', 'D40_day', 'D50_day', 'D60_day', 'D70_day', 'D80_day', 'D90_day', 'D95_day')
            minT_byYear = data.frame(cbind(years_to_use, NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))
            colnames(minT_byYear) = c('year','annum', 'Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
            maxT_byYear = data.frame(cbind(years_to_use, NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))
            colnames(maxT_byYear) = c('year','annum', 'Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
            thaw_byYear = data.frame(cbind(years_to_use, NA,NA,NA,NA,NA))
            colnames(thaw_byYear) = c('year','annum','winter','spring','summer','fall')
            SWE_byYear = data.frame(cbind(years_to_use, NA,NA,NA,NA))
            colnames(SWE_byYear) = c('year', 'maxSWE','avgSWE','SWE_Dmax','SWE_D0')
            precip_byYear = data.frame(cbind(years_to_use, NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))
            colnames(precip_byYear) = c('year','annum','Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
            rainVsnow_byYear = data.frame(cbind(years_to_use, NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))
            colnames(rainVsnow_byYear) = c('year','ratio','rain','snow')
            Budyko_byYear = data.frame(cbind(years_to_use, NA,NA,NA,NA))
            colnames(Budyko_byYear) = c("year", "PminQoverP","ariInd","EaOverP_pred","pred_error")
            
            # 
            
            recess_char[run, "DFI_start_year"] = first(years_to_use)
            recess_char[run, "DFI_end_year"] = last(years_to_use)
            
            # alternative dataframes for baseflow separation methods that don't handle NAs
            streamy_smush = subset(streamy, !is.na(Q))	# subset of streamy data w/o na data paramaterizing the bf filters
            streamy_interp = streamy	;	streamy_interp$Q[nrow(streamy_interp)] = 0	; streamy_interp$Q = na.approx(streamy_interp$Q)	#interpolating NAs
            
            ############################################
            ############ DFI 	
            # first, calculate the characteristic delay curves
            tot_streamy = sum(streamy$Q, na.rm=TRUE)
            the_ns = 1:59	# for testing delays of 1-yy days
            CDC = cbind(the_ns, NA)
            for(n in the_ns)	{
              BFIn = sum(baseflow(streamy$Q, block.len = n), na.rm=TRUE)
              CDC[n,2] = BFIn / tot_streamy
            }
            
            all_ns = c(0,the_ns)
            #cdc_smooth = smooth(CDC[,2])
            #cdc_smooth = smooth.spline(CDC)
            cdc_smooth = c(1,runmed(CDC[,2], k=3))
            out.lm = (lm(cdc_smooth ~ all_ns))
            break_points = segmented(out.lm, seg.Z =~all_ns, psi=c(3,5))
            quick_break = ifelse(is.null(break_points$psi), 3, round(break_points$psi[1,2]))
            delay_break = ifelse(is.null(break_points$psi), 21, round(break_points$psi[2,2]))
            
            par(mfrow=c(4,4), mai = c(0.3, 0.3, 0.1, 0.1))
            #plot(all_ns, cdc_smooth)
            #lines(all_ns, break_points$fitted.values)
            
            # setting block length based on CDCs (as recommended) or keeping consistent (due to trends) and borrowed from averages described in section 4.2 
            streamy$quick_flow = baseflow(streamy$Q, block.len=max(quick_break,1))
            #	streamy$quick_flow = baseflow(streamy$Q, block.len=3)
            streamy$delayed_flow = baseflow(streamy$Q, block.len=max(delay_break,5))
            #	streamy$delayed_flow = baseflow(streamy$Q, block.len=21)
            streamy$base_flow = baseflow(streamy$Q, block.len=60)
            
            
            rows_to_plot = which(streamy$year %in% yrs_to_plot)
            #plot(streamy$Date[rows_to_plot], streamy$Q[rows_to_plot], type='l')
            #	lines(streamy$Date[rows_to_plot], streamy$quick_flow[rows_to_plot], col='red2')
            #	lines(streamy$Date[rows_to_plot], streamy$delayed_flow[rows_to_plot], col='orange4')
            #	lines(streamy$Date[rows_to_plot], streamy$base_flow[rows_to_plot], col='blue3')
            
            
            ############################################
            ############ WMO 	
            streamy$WMO_baseflow = baseflow(streamy$Q, tp.factor = 0.9, block.len = 5)		# from tallaksen and Van Lanen 2004; using generic tp.factor is 0.9 and block.len is 5
            streamy$WMO_quickflow = streamy$Q - streamy$WMO_baseflow
            #plot(streamy$Date[rows_to_plot],streamy$Q[rows_to_plot], type='l')
            #lines(streamy$Date[rows_to_plot],streamy$WMO_baseflow[rows_to_plot], col='blue')
            
            
            ############################################
            ############ NM90 	
            NM90_bf = BaseflowSeparation(streamy_interp$Q, filter_parameter = 0.925, passes = 3)	# from nathan and McMahon 1990; recommended filter parameter is 0.925 but within range of 0.9-0.95
            names(NM90_bf) = c("NM90_baseflow", "NM90_quickflow")
            streamy$NM90_baseflow = NM90_bf$NM90_baseflow
            streamy$NM90_quickflow = NM90_bf$NM90_quickflow
            #plot(streamy$Date[rows_to_plot],streamy$Q[rows_to_plot], type='l')
            #lines(streamy$Date[rows_to_plot],streamy$NM90_baseflow[rows_to_plot], col='blue')
            
            
            ############################################
            ############ LH13 	
            streamy$LH13_baseflow = baseflows(streamy[,c("Date","Q")], a = 0.975, n.reflected = 30, ts = "daily")$bf		# from Ladson et al 2013; using generic values from function
            streamy$LH13_quickflow = streamy$Q - streamy$LH13_baseflow
            #plot(streamy$Date[rows_to_plot],streamy$Q[rows_to_plot], type='l')
            #lines(streamy$Date[rows_to_plot],streamy$LH13_baseflow[rows_to_plot], col='blue')
            
            
            ############################################
            ############ E05 	
            streamy$E05_baseflow = bf_oneparam(streamy_interp$Q, k = .9) # Eckhardt 2005 1 parameter recursive digital filter using bf_oneparam() in FlowScreen; k= .9 is generic value for filter
            streamy$E05_quickflow = streamy$Q - streamy$E05_baseflow
            #plot(streamy$Date[rows_to_plot],streamy$Q[rows_to_plot], type='l')
            #lines(streamy$Date[rows_to_plot],streamy$E05_baseflow[rows_to_plot], col='blue')
            
            
            ############################################
            ############ E12 	
            streamy$E12_baseflow = bf_eckhardt(streamy_interp$Q, a=0.970, BFI=0.67) # Eckhardt 2012 2 parameter recursive digital filter using bf_oneparam() in FlowScreen
            # note values of a and BFImax for perennial watersheds (n=60) are 0.970 +- 0.001 and 0.67 +- 0.01, from the 2012 paper
            streamy$E12_quickflow = streamy$Q - streamy$E12_baseflow
            #plot(streamy$Date[rows_to_plot],streamy$Q[rows_to_plot], type='l')
            #lines(streamy$Date[rows_to_plot],streamy$E12_baseflow[rows_to_plot], col='blue')
            
            
            ############################################
            ############ B93 	
            streamy$B93_baseflow = bf_boughton(streamy_interp$Q, k=0.9, C=0.1) # Boughton 1993 2 parameter in FlowScreen; k = 0.9 and C = 0.1 are generic values from example
            streamy$B93_quickflow = streamy$Q - streamy$B93_baseflow
            #plot(streamy$Date[rows_to_plot],streamy$Q[rows_to_plot], type='l')
            #lines(streamy$Date[rows_to_plot],streamy$B93_baseflow[rows_to_plot], col='blue')
            
            
            ############################################
            ############ identifying the optimal time lag for predicting Q from ppt data 	
            
            # first filling in the gap dates in daymet, since in leap years they include Feb 29th, but then delete Dec 31st... like wtf kind of decision was that...
            data_ts = data.frame(streamy$Date)	; names(data_ts) = "Date"
            daymet_data_infld = left_join(data_ts, daymet_data$data)
            daymet_data_infld$rain_n_melt[which(is.na(daymet_data_infld$rain_n_melt))] = 0
            daymet_data_infld$prcp[which(is.na(daymet_data_infld$prcp))] = 0
            
            
            # identifying the optimal correlation lag btw rain+melt and Q
            cv_rnmlt = ccf(x = daymet_data_infld$rain_n_melt, y = streamy_interp$Q, lag.max = 200, type = c("correlation"),plot = TRUE)
            cor_rnmlt = cv_rnmlt$acf[,,1]
            lag_rnmlt = cv_rnmlt$lag[,,1]
            corlag_df_rnmlt_tot = data.frame(cor_rnmlt,lag_rnmlt)
            corlag_max_rnmlt_tot = corlag_df_rnmlt_tot[which.max(corlag_df_rnmlt_tot$cor_rnmlt[1:201]),]$lag_rnmlt
            cv_ppt = ccf(x = daymet_data_infld$prcp, y = streamy_interp$Q, lag.max = 200, type = c("correlation"),plot = TRUE)
            cor_ppt = cv_ppt$acf[,,1]
            lag_ppt = cv_ppt$lag[,,1]
            corlag_df_ppt_tot = data.frame(cor_ppt,lag_ppt)
            corlag_max_ppt_tot = corlag_df_ppt_tot[which.max(corlag_df_ppt_tot$cor_ppt[1:201]),]$lag_ppt
            
            
            
            seasons_since_NAs = 0	# NAs interfere with each BFI/DFI estimator, so we are only including each DFI component if it has proceeded without NAs for sufficient months to exeed the expected recession period
            for(the_year in years_to_use)	{
              DFI_byYear_row = which(DFI_byYear$year == the_year) #we'll do max baseflow separation and timing in the same subloop
              #			streamy_thisyear = subset(streamy, year == the_year)
              # changing DFI_byYear_row and streamy_thisyear to the water year oct-sept
              last_year_months = which(streamy$year == the_year-1 & streamy$month %in% 10:12) 
              this_year_months = which(streamy$year == the_year & streamy$month %in% 1:9)
              streamy_thisyear = streamy[c(last_year_months, this_year_months),]
              streamy_year_tot = sum(streamy_thisyear$Q, na.rm=TRUE)	#summing streamflow for each year
              streamy_interp_thisyear = streamy_interp[c(last_year_months, this_year_months),]
              
              # for identifying years with basically 0 streamflow, therefore impossible to perform analysis
              if(length(which(streamy_thisyear$Q > 0)) > 14)	{
                
                #			daymet_thisyear = subset(daymet_data_infld, year == the_year)
                # changing DFI_byYear_row and streamy_thisyear to the water year oct-sept
                last_year_months = which(daymet_data_infld$year == the_year-1 & daymet_data_infld$month %in% 10:12) 
                this_year_months = which(daymet_data_infld$year == the_year & daymet_data_infld$month %in% 1:9)
                daymet_thisyear = daymet_data_infld[c(last_year_months, this_year_months),]
                
                # identifying the optimal correlation lag btw rain+melt and Q
                cv_rnmlt = ccf(x = daymet_thisyear$rain_n_melt, y = streamy_interp_thisyear$Q, lag.max = 200, type = c("correlation"),plot = FALSE)
                cor_rnmlt = cv_rnmlt$acf[,,1]
                lag_rnmlt = cv_rnmlt$lag[,,1]
                corlag_df_rnmlt = data.frame(cor_rnmlt,lag_rnmlt)
                corlag_max_rnmlt = corlag_df_rnmlt[which.max(corlag_df_rnmlt$cor_rnmlt[1:201]),]$lag_rnmlt
                cv_ppt = ccf(x = daymet_thisyear$prcp, y = streamy_interp_thisyear$Q, lag.max = 200, type = c("correlation"),plot = FALSE)
                cor_ppt = cv_ppt$acf[,,1]
                lag_ppt = cv_ppt$lag[,,1]
                corlag_df_ppt = data.frame(cor_ppt,lag_ppt)
                corlag_max_ppt = corlag_df_ppt[which.max(corlag_df_ppt$cor_ppt[1:201]),]$lag_ppt
                
                # changing DFI_byYear_row and streamy_thisyear to the water year oct-sept, but now also including a time lag
                last_year_months_lagTot = which(daymet_data_infld$year == the_year-1 & daymet_data_infld$month %in% 10:12) + corlag_max_rnmlt_tot
                this_year_months_lagTot = which(daymet_data_infld$year == the_year & daymet_data_infld$month %in% 1:9) + corlag_max_rnmlt_tot
                lag_days_all = c(last_year_months_lagTot, this_year_months_lagTot)
                lag_days_only_pos = lag_days_all[lag_days_all > 0]
                daymet_thisyear_lagTot = daymet_data_infld[lag_days_only_pos,]
                
                
                # flow duration curves
                sorted_Qs = rev(sort(streamy_thisyear$Q))
                allL = length(sorted_Qs)
                FDC_byYear[DFI_byYear_row, 'slp_all'] = summary(lm(log10(sorted_Qs+.0001) ~ c((1:allL) / allL)))$coef[2]
                
                shortened_Qs = sorted_Qs[ceiling(allL*.1):floor(allL*0.9)]
                shortL = length(shortened_Qs)
                FDC_byYear[DFI_byYear_row, 'slp_90th'] = summary(lm(log10(shortened_Qs+.0001) ~ c((1:shortL) / allL)))$coef[2]
                
                midsection_Qs = sorted_Qs[ceiling(allL*.1):floor(allL*0.5)]
                midsL = length(midsection_Qs)
                FDC_byYear[DFI_byYear_row, 'slp_mid'] = summary(lm(log10(midsection_Qs+.0001) ~ c((1:midsL) / allL)))$coef[2]
                
                
                # flashiness indices (just one for now)
                flashiness_byYear[DFI_byYear_row, 'RB_index'] = sum(abs(diff(streamy_thisyear$Q)), na.rm=TRUE) / streamy_year_tot
                
                # Budyko values 
                ppty_year_tot = sum(daymet_thisyear$prcp)
                Budyko_byYear[DFI_byYear_row, 'PminQoverP'] = max((ppty_year_tot - streamy_year_tot) / ppty_year_tot, 0)	# bc the climate data isn't perfect, some years have more ppt than Q which must be corrected for budyko
                Budyko_byYear[DFI_byYear_row, 'ariInd'] = ppty_year_tot / (sum(daymet_thisyear$PET)*1000)
                Budyko_byYear[DFI_byYear_row, 'EaOverP_pred'] = sqrt(Budyko_byYear[DFI_byYear_row, 'ariInd'] * tanh(1/Budyko_byYear[DFI_byYear_row, 'ariInd']) * (1 - exp(-Budyko_byYear[DFI_byYear_row, 'ariInd'])))
                Budyko_byYear[DFI_byYear_row, 'pred_error'] = Budyko_byYear[DFI_byYear_row, 'PminQoverP'] - Budyko_byYear[DFI_byYear_row, 'EaOverP_pred'] 
                predicted_Ea = Budyko_byYear[DFI_byYear_row, 'EaOverP_pred'] * ppty_year_tot
                Budyko_byYear[DFI_byYear_row, 'num_days_waterStress'] = length(which(
                  (predicted_Ea / 365) < (daymet_thisyear$PET*1000)))
                Budyko_byYear[DFI_byYear_row, 'num_days_waterStress2x'] = length(which(
                  (2 * predicted_Ea / 365) < (daymet_thisyear$PET*1000)))
                Budyko_byYear[DFI_byYear_row, 'num_days_waterStress10x'] = length(which(
                  (10 * predicted_Ea / 365) < (daymet_thisyear$PET*1000)))
                
                
                # quantiles
                streamy_year_tot = sum(streamy_thisyear$Q, na.rm=TRUE)	#summing streamflow for each year
                
                fv_byYear_row = which(flowvols_byYear$year == the_year)	
                flowvols_byYear[fv_byYear_row, 'Qann'] = streamy_year_tot
                flowvols_byYear[fv_byYear_row, 'Q5'] = quantile(streamy_thisyear$Q, 0.05, na.rm=TRUE)
                flowvols_byYear[fv_byYear_row, 'Q10'] = quantile(streamy_thisyear$Q, 0.1, na.rm=TRUE)
                flowvols_byYear[fv_byYear_row, 'Q20'] = quantile(streamy_thisyear$Q, 0.2, na.rm=TRUE)
                flowvols_byYear[fv_byYear_row, 'Q30'] = quantile(streamy_thisyear$Q, 0.3, na.rm=TRUE)
                flowvols_byYear[fv_byYear_row, 'Q40'] = quantile(streamy_thisyear$Q, 0.4, na.rm=TRUE)
                flowvols_byYear[fv_byYear_row, 'Q50'] = quantile(streamy_thisyear$Q, 0.5, na.rm=TRUE)
                flowvols_byYear[fv_byYear_row, 'Q60'] = quantile(streamy_thisyear$Q, 0.6, na.rm=TRUE)
                flowvols_byYear[fv_byYear_row, 'Q70'] = quantile(streamy_thisyear$Q, 0.7, na.rm=TRUE)
                flowvols_byYear[fv_byYear_row, 'Q80'] = quantile(streamy_thisyear$Q, 0.8, na.rm=TRUE)
                flowvols_byYear[fv_byYear_row, 'Q90'] = quantile(streamy_thisyear$Q, 0.9, na.rm=TRUE)
                flowvols_byYear[fv_byYear_row, 'Q95'] = quantile(streamy_thisyear$Q, 0.95, na.rm=TRUE)
                
                
                # for D50, need to calculate cumsum, but NAs get in the way
                streamy_thisyear$Q_narm = 0								
                streamy_thisyear$Q_narm[which(!is.na(streamy_thisyear$Q))] = streamy_thisyear$Q[which(!is.na(streamy_thisyear$Q))]
                streamy_thisyear$cumsumQ = cumsum(streamy_thisyear$Q_narm)
                streamy_year_5 = streamy_year_tot * .05
                streamy_year_10 = streamy_year_tot * .1
                streamy_year_20 = streamy_year_tot * .2
                streamy_year_30 = streamy_year_tot * .3
                streamy_year_40 = streamy_year_tot * .4
                streamy_year_50 = streamy_year_tot * .5
                streamy_year_60 = streamy_year_tot * .6
                streamy_year_70 = streamy_year_tot * .7
                streamy_year_80 = streamy_year_tot * .8
                streamy_year_90 = streamy_year_tot * .9
                streamy_year_95 = streamy_year_tot * .95
                julday_max[DFI_byYear_row, 'D5_day'] = which(streamy_thisyear$cumsumQ > streamy_year_5)[1]
                julday_max[DFI_byYear_row, 'D10_day'] = which(streamy_thisyear$cumsumQ > streamy_year_10)[1]
                julday_max[DFI_byYear_row, 'D20_day'] = which(streamy_thisyear$cumsumQ > streamy_year_20)[1]
                julday_max[DFI_byYear_row, 'D30_day'] = which(streamy_thisyear$cumsumQ > streamy_year_30)[1]
                julday_max[DFI_byYear_row, 'D40_day'] = which(streamy_thisyear$cumsumQ > streamy_year_40)[1]
                julday_max[DFI_byYear_row, 'D50_day'] = which(streamy_thisyear$cumsumQ > streamy_year_50)[1]
                julday_max[DFI_byYear_row, 'D60_day'] = which(streamy_thisyear$cumsumQ > streamy_year_60)[1]
                julday_max[DFI_byYear_row, 'D70_day'] = which(streamy_thisyear$cumsumQ > streamy_year_70)[1]
                julday_max[DFI_byYear_row, 'D80_day'] = which(streamy_thisyear$cumsumQ > streamy_year_80)[1]
                julday_max[DFI_byYear_row, 'D90_day'] = which(streamy_thisyear$cumsumQ > streamy_year_90)[1]
                julday_max[DFI_byYear_row, 'D95_day'] = which(streamy_thisyear$cumsumQ > streamy_year_95)[1]
                
                
                # for D50 for RnMlt, need to calculate cumsum, but NAs get in the way
                rnmlt_year_tot = sum(daymet_thisyear$rain_n_melt, na.rm=TRUE)
                rnmlt_year_tot_l = sum(daymet_thisyear_lagTot$rain_n_melt, na.rm=TRUE)
                prcp_year_tot_l = sum(daymet_thisyear_lagTot$prcp, na.rm=TRUE)
                rain_year_tot = sum(daymet_thisyear$rainfall, na.rm=TRUE)
                snow_year_tot = sum(daymet_thisyear$snowfall, na.rm=TRUE)
                
                
                daymet_thisyear$rnmlt_narm = 0								
                daymet_thisyear$rnmlt_narm[which(!is.na(daymet_thisyear$rnmlt_narm))] = daymet_thisyear$rain_n_melt[which(!is.na(daymet_thisyear$rain_n_melt))]
                daymet_thisyear$cumsum_rnmlt = cumsum(daymet_thisyear$rnmlt_narm)
                rnmlt_year_5 = rnmlt_year_tot * .05
                rnmlt_year_10 = rnmlt_year_tot * .1
                rnmlt_year_20 = rnmlt_year_tot * .2
                rnmlt_year_30 = rnmlt_year_tot * .3
                rnmlt_year_40 = rnmlt_year_tot * .4
                rnmlt_year_50 = rnmlt_year_tot * .5
                rnmlt_year_60 = rnmlt_year_tot * .6
                rnmlt_year_70 = rnmlt_year_tot * .7
                rnmlt_year_80 = rnmlt_year_tot * .8
                rnmlt_year_90 = rnmlt_year_tot * .9
                rnmlt_year_95 = rnmlt_year_tot * .95
                julrnmlt_max[DFI_byYear_row, 'D5_day'] = which(daymet_thisyear$cumsum_rnmlt > rnmlt_year_5)[1]
                julrnmlt_max[DFI_byYear_row, 'D10_day'] = which(daymet_thisyear$cumsum_rnmlt > rnmlt_year_10)[1]
                julrnmlt_max[DFI_byYear_row, 'D20_day'] = which(daymet_thisyear$cumsum_rnmlt > rnmlt_year_20)[1]
                julrnmlt_max[DFI_byYear_row, 'D30_day'] = which(daymet_thisyear$cumsum_rnmlt > rnmlt_year_30)[1]
                julrnmlt_max[DFI_byYear_row, 'D40_day'] = which(daymet_thisyear$cumsum_rnmlt > rnmlt_year_40)[1]
                julrnmlt_max[DFI_byYear_row, 'D50_day'] = which(daymet_thisyear$cumsum_rnmlt > rnmlt_year_50)[1]
                julrnmlt_max[DFI_byYear_row, 'D60_day'] = which(daymet_thisyear$cumsum_rnmlt > rnmlt_year_60)[1]
                julrnmlt_max[DFI_byYear_row, 'D70_day'] = which(daymet_thisyear$cumsum_rnmlt > rnmlt_year_70)[1]
                julrnmlt_max[DFI_byYear_row, 'D80_day'] = which(daymet_thisyear$cumsum_rnmlt > rnmlt_year_80)[1]
                julrnmlt_max[DFI_byYear_row, 'D90_day'] = which(daymet_thisyear$cumsum_rnmlt > rnmlt_year_90)[1]
                julrnmlt_max[DFI_byYear_row, 'D95_day'] = which(daymet_thisyear$cumsum_rnmlt > rnmlt_year_95)[1]
                
                
                # for D50 for precip, need to calculate cumsum, but NAs get in the way
                prcp_year_tot = sum(daymet_thisyear$prcp, na.rm=TRUE)
                
                daymet_thisyear$precip_narm = 0								
                daymet_thisyear$precip_narm[which(!is.na(daymet_thisyear$precip_narm))] = daymet_thisyear$prcp[which(!is.na(daymet_thisyear$prcp))]
                daymet_thisyear$cumsum_prcp = cumsum(daymet_thisyear$precip_narm)
                prcp_year_5 = prcp_year_tot * .05
                prcp_year_10 = prcp_year_tot * .1
                prcp_year_20 = prcp_year_tot * .2
                prcp_year_30 = prcp_year_tot * .3
                prcp_year_40 = prcp_year_tot * .4
                prcp_year_50 = prcp_year_tot * .5
                prcp_year_60 = prcp_year_tot * .6
                prcp_year_70 = prcp_year_tot * .7
                prcp_year_80 = prcp_year_tot * .8
                prcp_year_90 = prcp_year_tot * .9
                prcp_year_95 = prcp_year_tot * .95
                julprcp_max[DFI_byYear_row, 'D5_day'] = which(daymet_thisyear$cumsum_prcp > prcp_year_5)[1]
                julprcp_max[DFI_byYear_row, 'D10_day'] = which(daymet_thisyear$cumsum_prcp > prcp_year_10)[1]
                julprcp_max[DFI_byYear_row, 'D20_day'] = which(daymet_thisyear$cumsum_prcp > prcp_year_20)[1]
                julprcp_max[DFI_byYear_row, 'D30_day'] = which(daymet_thisyear$cumsum_prcp > prcp_year_30)[1]
                julprcp_max[DFI_byYear_row, 'D40_day'] = which(daymet_thisyear$cumsum_prcp > prcp_year_40)[1]
                julprcp_max[DFI_byYear_row, 'D50_day'] = which(daymet_thisyear$cumsum_prcp > prcp_year_50)[1]
                julprcp_max[DFI_byYear_row, 'D60_day'] = which(daymet_thisyear$cumsum_prcp > prcp_year_60)[1]
                julprcp_max[DFI_byYear_row, 'D70_day'] = which(daymet_thisyear$cumsum_prcp > prcp_year_70)[1]
                julprcp_max[DFI_byYear_row, 'D80_day'] = which(daymet_thisyear$cumsum_prcp > prcp_year_80)[1]
                julprcp_max[DFI_byYear_row, 'D90_day'] = which(daymet_thisyear$cumsum_prcp > prcp_year_90)[1]
                julprcp_max[DFI_byYear_row, 'D95_day'] = which(daymet_thisyear$cumsum_prcp > prcp_year_95)[1]
                
                
                
                # same but including a time lag
                rnmlt_year_tot_lagTot = sum(daymet_thisyear_lagTot$rain_n_melt, na.rm=TRUE)
                daymet_thisyear_lagTot$rnmlt_narm = 0								
                daymet_thisyear_lagTot$rnmlt_narm[which(!is.na(daymet_thisyear_lagTot$rnmlt_narm))] = daymet_thisyear_lagTot$rain_n_melt[which(!is.na(daymet_thisyear_lagTot$rain_n_melt))]
                daymet_thisyear_lagTot$cumsum_rnmlt = cumsum(daymet_thisyear_lagTot$rnmlt_narm)
                rnmlt_year_50_l = rnmlt_year_tot_lagTot * .5
                julrnmlt_max[DFI_byYear_row, 'D50_day_l'] = which(daymet_thisyear_lagTot$cumsum_rnmlt > rnmlt_year_50_l)[1]
                
                
                
                
                # annualized climate data
                SWE_max = max(daymet_thisyear$swe..kg.m.2., na.rm=TRUE)
                SWE_mean = mean(daymet_thisyear$swe..kg.m.2, na.rm=TRUE)
                SWE_Dmax = which.max(daymet_thisyear$swe..kg.m.2.[1:200])
                SWE_D0 = ifelse(any(daymet_thisyear$swe..kg.m.2.[-c(1:107)] == 0),
                                107 + (which(daymet_thisyear$swe..kg.m.2.[-c(1:107)] == 0)[1]),
                                365)
                
                
                #	RnMlt without (and with) a time lag
                daymet_rows = nrow(daymet_thisyear)
                RnMltfracs_byYear[1:daymet_rows, paste(the_year)] = cumsum(daymet_thisyear$rain_n_melt) / rnmlt_year_tot
                est_lag = 18	# est time lag as derived from Alaskan data
                rnmlt_year_tot_shft = sum(daymet_thisyear$rain_n_melt[est_lag:daymet_rows])
                RnMltfracs_byYear_shft[(est_lag+1):daymet_rows, paste(the_year)] = cumsum(daymet_thisyear$rain_n_melt[1:(daymet_rows-est_lag)]) / rnmlt_year_tot_shft
                daymet_rows_l = nrow(daymet_thisyear_lagTot)
                RnMltfracs_byYear_l[1:daymet_rows_l, paste(the_year)] = cumsum(daymet_thisyear_lagTot$rain_n_melt) / rnmlt_year_tot_l
                #same but for calculating Q_tBefore and Q_tBefore_ratio
                cumsum_streamy_thisyear = cumsum(streamy_thisyear$Q_narm)
                streamy_rows = nrow(streamy_thisyear)
                Q_tBefore_byYear[1:streamy_rows, paste(the_year)] = cumsum_streamy_thisyear
                Q_tAfter_byYear[1:streamy_rows, paste(the_year)] = streamy_year_tot - cumsum_streamy_thisyear
                Q_tBefore_ratio_byYear[1:streamy_rows, paste(the_year)] = cumsum_streamy_thisyear / streamy_year_tot
                
                #	changes in cumulative rain and snowmelt by avg date of D##
                RnMlt_byYear[DFI_byYear_row, 'annum'] = rnmlt_year_tot
                RnMlt_byYear[DFI_byYear_row, 'annum_lag'] = rnmlt_year_tot_l
                RnMlt_byYear[DFI_byYear_row, 'opt_lag'] = corlag_max_rnmlt
                RnMlt_byYear[DFI_byYear_row, 'Jan'] = sum(daymet_thisyear$rain_n_melt[which(daymet_thisyear$month == 1)], na.rm=TRUE)
                RnMlt_byYear[DFI_byYear_row, 'Feb'] = sum(daymet_thisyear$rain_n_melt[which(daymet_thisyear$month == 2)], na.rm=TRUE)
                RnMlt_byYear[DFI_byYear_row, 'Mar'] = sum(daymet_thisyear$rain_n_melt[which(daymet_thisyear$month == 3)], na.rm=TRUE)
                RnMlt_byYear[DFI_byYear_row, 'Apr'] = sum(daymet_thisyear$rain_n_melt[which(daymet_thisyear$month == 4)], na.rm=TRUE)
                RnMlt_byYear[DFI_byYear_row, 'May'] = sum(daymet_thisyear$rain_n_melt[which(daymet_thisyear$month == 5)], na.rm=TRUE)
                RnMlt_byYear[DFI_byYear_row, 'Jun'] = sum(daymet_thisyear$rain_n_melt[which(daymet_thisyear$month == 6)], na.rm=TRUE)
                RnMlt_byYear[DFI_byYear_row, 'Jul'] = sum(daymet_thisyear$rain_n_melt[which(daymet_thisyear$month == 7)], na.rm=TRUE)
                RnMlt_byYear[DFI_byYear_row, 'Aug'] = sum(daymet_thisyear$rain_n_melt[which(daymet_thisyear$month == 8)], na.rm=TRUE)
                RnMlt_byYear[DFI_byYear_row, 'Sep'] = sum(daymet_thisyear$rain_n_melt[which(daymet_thisyear$month == 9)], na.rm=TRUE)
                RnMlt_byYear[DFI_byYear_row, 'Oct'] = sum(daymet_thisyear$rain_n_melt[which(daymet_thisyear$month == 10)], na.rm=TRUE)
                RnMlt_byYear[DFI_byYear_row, 'Nov'] = sum(daymet_thisyear$rain_n_melt[which(daymet_thisyear$month == 11)], na.rm=TRUE)
                RnMlt_byYear[DFI_byYear_row, 'Dec'] = sum(daymet_thisyear$rain_n_melt[which(daymet_thisyear$month == 12)], na.rm=TRUE)
                
                minT_byYear[DFI_byYear_row, 'annum'] = mean(daymet_thisyear$tmin..deg.c., na.rm=TRUE)
                minT_byYear[DFI_byYear_row, 'Jan'] = mean(daymet_thisyear$tmin..deg.c.[which(daymet_thisyear$month == 1)], na.rm=TRUE)
                minT_byYear[DFI_byYear_row, 'Feb'] = mean(daymet_thisyear$tmin..deg.c.[which(daymet_thisyear$month == 2)], na.rm=TRUE)
                minT_byYear[DFI_byYear_row, 'Mar'] = mean(daymet_thisyear$tmin..deg.c.[which(daymet_thisyear$month == 3)], na.rm=TRUE)
                minT_byYear[DFI_byYear_row, 'Apr'] = mean(daymet_thisyear$tmin..deg.c.[which(daymet_thisyear$month == 4)], na.rm=TRUE)
                minT_byYear[DFI_byYear_row, 'May'] = mean(daymet_thisyear$tmin..deg.c.[which(daymet_thisyear$month == 5)], na.rm=TRUE)
                minT_byYear[DFI_byYear_row, 'Jun'] = mean(daymet_thisyear$tmin..deg.c.[which(daymet_thisyear$month == 6)], na.rm=TRUE)
                minT_byYear[DFI_byYear_row, 'Jul'] = mean(daymet_thisyear$tmin..deg.c.[which(daymet_thisyear$month == 7)], na.rm=TRUE)
                minT_byYear[DFI_byYear_row, 'Aug'] = mean(daymet_thisyear$tmin..deg.c.[which(daymet_thisyear$month == 8)], na.rm=TRUE)
                minT_byYear[DFI_byYear_row, 'Sep'] = mean(daymet_thisyear$tmin..deg.c.[which(daymet_thisyear$month == 9)], na.rm=TRUE)
                minT_byYear[DFI_byYear_row, 'Oct'] = mean(daymet_thisyear$tmin..deg.c.[which(daymet_thisyear$month == 10)], na.rm=TRUE)
                minT_byYear[DFI_byYear_row, 'Nov'] = mean(daymet_thisyear$tmin..deg.c.[which(daymet_thisyear$month == 11)], na.rm=TRUE)
                minT_byYear[DFI_byYear_row, 'Dec'] = mean(daymet_thisyear$tmin..deg.c.[which(daymet_thisyear$month == 12)], na.rm=TRUE)
                
                maxT_byYear[DFI_byYear_row, 'annum'] = mean(daymet_thisyear$tmax..deg.c., na.rm=TRUE)
                maxT_byYear[DFI_byYear_row, 'Jan'] = mean(daymet_thisyear$tmax..deg.c.[which(daymet_thisyear$month == 1)], na.rm=TRUE)
                maxT_byYear[DFI_byYear_row, 'Feb'] = mean(daymet_thisyear$tmax..deg.c.[which(daymet_thisyear$month == 2)], na.rm=TRUE)
                maxT_byYear[DFI_byYear_row, 'Mar'] = mean(daymet_thisyear$tmax..deg.c.[which(daymet_thisyear$month == 3)], na.rm=TRUE)
                maxT_byYear[DFI_byYear_row, 'Apr'] = mean(daymet_thisyear$tmax..deg.c.[which(daymet_thisyear$month == 4)], na.rm=TRUE)
                maxT_byYear[DFI_byYear_row, 'May'] = mean(daymet_thisyear$tmax..deg.c.[which(daymet_thisyear$month == 5)], na.rm=TRUE)
                maxT_byYear[DFI_byYear_row, 'Jun'] = mean(daymet_thisyear$tmax..deg.c.[which(daymet_thisyear$month == 6)], na.rm=TRUE)
                maxT_byYear[DFI_byYear_row, 'Jul'] = mean(daymet_thisyear$tmax..deg.c.[which(daymet_thisyear$month == 7)], na.rm=TRUE)
                maxT_byYear[DFI_byYear_row, 'Aug'] = mean(daymet_thisyear$tmax..deg.c.[which(daymet_thisyear$month == 8)], na.rm=TRUE)
                maxT_byYear[DFI_byYear_row, 'Sep'] = mean(daymet_thisyear$tmax..deg.c.[which(daymet_thisyear$month == 9)], na.rm=TRUE)
                maxT_byYear[DFI_byYear_row, 'Oct'] = mean(daymet_thisyear$tmax..deg.c.[which(daymet_thisyear$month == 10)], na.rm=TRUE)
                maxT_byYear[DFI_byYear_row, 'Nov'] = mean(daymet_thisyear$tmax..deg.c.[which(daymet_thisyear$month == 11)], na.rm=TRUE)
                maxT_byYear[DFI_byYear_row, 'Dec'] = mean(daymet_thisyear$tmax..deg.c.[which(daymet_thisyear$month == 12)], na.rm=TRUE)
                
                thaw_byYear[DFI_byYear_row, 'annum'] = mean(daymet_thisyear$thaw_index, na.rm=TRUE)
                thaw_byYear[DFI_byYear_row, 'winter'] = mean(daymet_thisyear$thaw_index[which(daymet_thisyear$month %in% c(12,1,2))], na.rm=TRUE)
                thaw_byYear[DFI_byYear_row, 'spring'] = mean(daymet_thisyear$thaw_index[which(daymet_thisyear$month %in% c(3,4,5))], na.rm=TRUE)
                thaw_byYear[DFI_byYear_row, 'summer'] = mean(daymet_thisyear$thaw_index[which(daymet_thisyear$month %in% c(6,7,8))], na.rm=TRUE)
                thaw_byYear[DFI_byYear_row, 'fall'] = mean(daymet_thisyear$thaw_index[which(daymet_thisyear$month %in% c(9,10,11))], na.rm=TRUE)
                
                precip_byYear[DFI_byYear_row, 'annum'] = sum(daymet_thisyear$prcp..mm.day, na.rm=TRUE)
                precip_byYear[DFI_byYear_row, 'annum_lag'] = prcp_year_tot_l
                precip_byYear[DFI_byYear_row, 'opt_lag'] = corlag_max_ppt
                precip_byYear[DFI_byYear_row, 'Jan'] = sum(daymet_thisyear$prcp..mm.day[which(daymet_thisyear$month == 1)], na.rm=TRUE)
                precip_byYear[DFI_byYear_row, 'Feb'] = sum(daymet_thisyear$prcp..mm.day[which(daymet_thisyear$month == 2)], na.rm=TRUE)
                precip_byYear[DFI_byYear_row, 'Mar'] = sum(daymet_thisyear$prcp..mm.day[which(daymet_thisyear$month == 3)], na.rm=TRUE)
                precip_byYear[DFI_byYear_row, 'Apr'] = sum(daymet_thisyear$prcp..mm.day[which(daymet_thisyear$month == 4)], na.rm=TRUE)
                precip_byYear[DFI_byYear_row, 'May'] = sum(daymet_thisyear$prcp..mm.day[which(daymet_thisyear$month == 5)], na.rm=TRUE)
                precip_byYear[DFI_byYear_row, 'Jun'] = sum(daymet_thisyear$prcp..mm.day[which(daymet_thisyear$month == 6)], na.rm=TRUE)
                precip_byYear[DFI_byYear_row, 'Jul'] = sum(daymet_thisyear$prcp..mm.day[which(daymet_thisyear$month == 7)], na.rm=TRUE)
                precip_byYear[DFI_byYear_row, 'Aug'] = sum(daymet_thisyear$prcp..mm.day[which(daymet_thisyear$month == 8)], na.rm=TRUE)
                precip_byYear[DFI_byYear_row, 'Sep'] = sum(daymet_thisyear$prcp..mm.day[which(daymet_thisyear$month == 9)], na.rm=TRUE)
                precip_byYear[DFI_byYear_row, 'Oct'] = sum(daymet_thisyear$prcp..mm.day[which(daymet_thisyear$month == 10)], na.rm=TRUE)
                precip_byYear[DFI_byYear_row, 'Nov'] = sum(daymet_thisyear$prcp..mm.day[which(daymet_thisyear$month == 11)], na.rm=TRUE)
                precip_byYear[DFI_byYear_row, 'Dec'] = sum(daymet_thisyear$prcp..mm.day[which(daymet_thisyear$month == 12)], na.rm=TRUE)
                
                rainVsnow_byYear[DFI_byYear_row, 'ratio'] = rain_year_tot /	snow_year_tot 
                rainVsnow_byYear[DFI_byYear_row, 'rain'] = rain_year_tot
                rainVsnow_byYear[DFI_byYear_row, 'snow'] = snow_year_tot
                
                SWE_byYear[DFI_byYear_row, 'maxSWE'] = SWE_max
                SWE_byYear[DFI_byYear_row, 'avgSWE'] = SWE_mean
                SWE_byYear[DFI_byYear_row, 'SWE_Dmax'] = SWE_Dmax
                SWE_byYear[DFI_byYear_row, 'SWE_D0'] = SWE_D0
                
                
                # for identifying day of maximum by year and annual flows
                if(length(which(is.na(streamy_thisyear$Q))) < 90 )	{
                  if(length(which(streamy_thisyear$Q > 0)) > 15)	{
                    
                    
                    # start with DFIs
                    streamy_y_baseflow = sum(streamy_thisyear$base_flow, na.rm=TRUE)
                    streamy_y_delayed = sum(streamy_thisyear$delayed_flow, na.rm=TRUE) -
                      streamy_y_baseflow
                    streamy_y_quickflow = sum(streamy_thisyear$quick_flow, na.rm=TRUE) -
                      sum(streamy_thisyear$delayed_flow, na.rm=TRUE)
                    streamy_y_overland = streamy_year_tot - 
                      sum(streamy_thisyear$quick_flow, na.rm=TRUE)
                    
                    DFI_byYear[DFI_byYear_row, 'overland'] =	streamy_y_overland / streamy_year_tot
                    DFI_byYear[DFI_byYear_row, 'qflow'] =		streamy_y_quickflow / streamy_year_tot
                    DFI_byYear[DFI_byYear_row, 'dflow'] =		streamy_y_delayed / streamy_year_tot
                    DFI_byYear[DFI_byYear_row, 'bflow'] =		streamy_y_baseflow / streamy_year_tot
                    
                    DFI_volumeByYear[DFI_byYear_row, 'overland'] =	streamy_y_overland 
                    DFI_volumeByYear[DFI_byYear_row, 'qflow'] =		streamy_y_quickflow 
                    DFI_volumeByYear[DFI_byYear_row, 'dflow'] =		streamy_y_delayed
                    DFI_volumeByYear[DFI_byYear_row, 'bflow'] =		streamy_y_baseflow 
                    
                    DFI_varianceByYear[DFI_byYear_row, 'overland'] =	var(streamy_thisyear$Q - streamy_thisyear$quick_flow)
                    DFI_varianceByYear[DFI_byYear_row, 'qflow'] =		var(streamy_thisyear$quick_flow - streamy_thisyear$delayed_flow)
                    DFI_varianceByYear[DFI_byYear_row, 'dflow'] =		var(streamy_thisyear$delayed_flow - streamy_thisyear$base_flow)
                    DFI_varianceByYear[DFI_byYear_row, 'bflow'] =		var(streamy_thisyear$base_flow) 
                    
                    streamy_thisyear$bf_narm = 0								
                    streamy_thisyear$bf_narm[which(!is.na(streamy_thisyear$base_flow))] = streamy_thisyear$base_flow[which(!is.na(streamy_thisyear$base_flow))]
                    streamy_thisyear$cumsumQ_bf = cumsum(streamy_thisyear$bf_narm)
                    streamy_year_half_bf = streamy_y_baseflow / 2
                    streamy_year_quarter_bf = streamy_y_baseflow / 4
                    streamy_year_3quarter_bf = streamy_y_baseflow / (4/3)
                    DFI_DDays[DFI_byYear_row, 'bday_50'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_half_bf)[1]
                    DFI_DDays[DFI_byYear_row, 'bday_25'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_quarter_bf)[1]
                    DFI_DDays[DFI_byYear_row, 'bday_75'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_3quarter_bf)[1]
                    
                    streamy_thisyear$df_narm = 0								
                    streamy_thisyear$df_narm[which(!is.na(streamy_thisyear$delayed_flow))] = streamy_thisyear$delayed_flow[which(!is.na(streamy_thisyear$delayed_flow))]
                    streamy_thisyear$cumsumQ_df = cumsum(streamy_thisyear$df_narm)
                    streamy_year_half_df = streamy_y_delayed / 2
                    streamy_year_quarter_df = streamy_y_delayed / 4
                    streamy_year_3quarter_df = streamy_y_delayed / (4/3)
                    DFI_DDays[DFI_byYear_row, 'dday_50'] = which(streamy_thisyear$cumsumQ_df > streamy_year_half_df)[1]
                    DFI_DDays[DFI_byYear_row, 'dday_25'] = which(streamy_thisyear$cumsumQ_df > streamy_year_quarter_df)[1]
                    DFI_DDays[DFI_byYear_row, 'dday_75'] = which(streamy_thisyear$cumsumQ_df > streamy_year_3quarter_df)[1]
                    
                    streamy_thisyear$qf_narm = 0								
                    streamy_thisyear$qf_narm[which(!is.na(streamy_thisyear$quick_flow))] = streamy_thisyear$quick_flow[which(!is.na(streamy_thisyear$quick_flow))]
                    streamy_thisyear$cumsumQ_qf = cumsum(streamy_thisyear$qf_narm)
                    streamy_year_half_qf = streamy_y_quickflow / 2
                    streamy_year_quarter_qf = streamy_y_quickflow / 4
                    streamy_year_3quarter_qf = streamy_y_quickflow / (4/3)
                    DFI_DDays[DFI_byYear_row, 'qday_50'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_half_qf)[1]
                    DFI_DDays[DFI_byYear_row, 'qday_25'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_quarter_qf)[1]
                    DFI_DDays[DFI_byYear_row, 'qday_75'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_3quarter_qf)[1]
                    
                    streamy_thisyear$of_narm = 0								
                    streamy_thisyear$of_narm[which(!is.na(streamy_thisyear$overland_flow))] = streamy_thisyear$overland_flow[which(!is.na(streamy_thisyear$overland_flow))]
                    streamy_thisyear$cumsumQ_of = cumsum(streamy_thisyear$of_narm)
                    streamy_year_half_of = streamy_y_overland / 2
                    streamy_year_quarter_of = streamy_y_overland / 4
                    streamy_year_3quarter_of = streamy_y_overland / (4/3)
                    DFI_DDays[DFI_byYear_row, 'oday_50'] = which(streamy_thisyear$cumsumQ_of > streamy_year_half_of)[1]
                    DFI_DDays[DFI_byYear_row, 'oday_25'] = which(streamy_thisyear$cumsumQ_of > streamy_year_quarter_of)[1]
                    DFI_DDays[DFI_byYear_row, 'oday_75'] = which(streamy_thisyear$cumsumQ_of > streamy_year_3quarter_of)[1]
                    
                    
                    # same thing but with WMO
                    streamy_y_baseflow_WMO = sum(streamy_thisyear$WMO_baseflow, na.rm=TRUE)
                    streamy_y_quickflow_WMO = streamy_year_tot - streamy_y_baseflow_WMO
                    
                    WMO_byYear[DFI_byYear_row, 'qflow'] =		streamy_y_quickflow_WMO / streamy_year_tot
                    WMO_byYear[DFI_byYear_row, 'bflow'] =		streamy_y_baseflow_WMO / streamy_year_tot
                    
                    WMO_volumeByYear[DFI_byYear_row, 'qflow'] =		streamy_y_quickflow_WMO 
                    WMO_volumeByYear[DFI_byYear_row, 'bflow'] =		streamy_y_baseflow_WMO 
                    
                    WMO_varianceByYear[DFI_byYear_row, 'qflow'] =		var(streamy_thisyear$Q - streamy_thisyear$WMO_baseflow)
                    WMO_varianceByYear[DFI_byYear_row, 'bflow'] =		var(streamy_thisyear$WMO_baseflow) 
                    
                    streamy_thisyear$bf_narm = 0								
                    streamy_thisyear$bf_narm[which(!is.na(streamy_thisyear$WMO_baseflow))] = streamy_thisyear$WMO_baseflow[which(!is.na(streamy_thisyear$WMO_baseflow))]
                    streamy_thisyear$cumsumQ_bf = cumsum(streamy_thisyear$bf_narm)
                    streamy_year_bf_5 = streamy_y_baseflow_WMO * .05
                    streamy_year_bf_10 = streamy_y_baseflow_WMO * .1
                    streamy_year_bf_20 = streamy_y_baseflow_WMO * .2
                    streamy_year_bf_30 = streamy_y_baseflow_WMO * .3
                    streamy_year_bf_40 = streamy_y_baseflow_WMO * .4
                    streamy_year_bf_50 = streamy_y_baseflow_WMO * .5
                    streamy_year_bf_60 = streamy_y_baseflow_WMO * .6
                    streamy_year_bf_70 = streamy_y_baseflow_WMO * .7
                    streamy_year_bf_80 = streamy_y_baseflow_WMO * .8
                    streamy_year_bf_90 = streamy_y_baseflow_WMO * .9
                    streamy_year_bf_95 = streamy_y_baseflow_WMO * .95
                    WMO_DDays[DFI_byYear_row, 'bday_5'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_5)[1]
                    WMO_DDays[DFI_byYear_row, 'bday_10'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_10)[1]
                    WMO_DDays[DFI_byYear_row, 'bday_20'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_20)[1]
                    WMO_DDays[DFI_byYear_row, 'bday_30'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_30)[1]
                    WMO_DDays[DFI_byYear_row, 'bday_40'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_40)[1]
                    WMO_DDays[DFI_byYear_row, 'bday_50'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_50)[1]
                    WMO_DDays[DFI_byYear_row, 'bday_60'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_60)[1]
                    WMO_DDays[DFI_byYear_row, 'bday_70'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_70)[1]
                    WMO_DDays[DFI_byYear_row, 'bday_80'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_80)[1]
                    WMO_DDays[DFI_byYear_row, 'bday_90'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_90)[1]
                    WMO_DDays[DFI_byYear_row, 'bday_95'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_95)[1]
                    
                    streamy_thisyear$qf_narm = 0								
                    streamy_thisyear$qf_narm[which(!is.na(streamy_thisyear$WMO_quickflow))] = streamy_thisyear$WMO_quickflow[which(!is.na(streamy_thisyear$WMO_quickflow))]
                    streamy_thisyear$cumsumQ_qf = cumsum(streamy_thisyear$qf_narm)
                    streamy_year_qf_5 = streamy_y_quickflow_WMO * .05
                    streamy_year_qf_10 = streamy_y_quickflow_WMO * .1
                    streamy_year_qf_20 = streamy_y_quickflow_WMO * .2
                    streamy_year_qf_30 = streamy_y_quickflow_WMO * .3
                    streamy_year_qf_40 = streamy_y_quickflow_WMO * .4
                    streamy_year_qf_50 = streamy_y_quickflow_WMO * .5
                    streamy_year_qf_60 = streamy_y_quickflow_WMO * .6
                    streamy_year_qf_70 = streamy_y_quickflow_WMO * .7
                    streamy_year_qf_80 = streamy_y_quickflow_WMO * .8
                    streamy_year_qf_90 = streamy_y_quickflow_WMO * .9
                    streamy_year_qf_95 = streamy_y_quickflow_WMO * .95
                    WMO_DDays[DFI_byYear_row, 'qday_5'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_5)[1]
                    WMO_DDays[DFI_byYear_row, 'qday_10'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_10)[1]
                    WMO_DDays[DFI_byYear_row, 'qday_20'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_20)[1]
                    WMO_DDays[DFI_byYear_row, 'qday_30'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_30)[1]
                    WMO_DDays[DFI_byYear_row, 'qday_40'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_40)[1]
                    WMO_DDays[DFI_byYear_row, 'qday_50'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_50)[1]
                    WMO_DDays[DFI_byYear_row, 'qday_60'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_60)[1]
                    WMO_DDays[DFI_byYear_row, 'qday_70'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_70)[1]
                    WMO_DDays[DFI_byYear_row, 'qday_80'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_80)[1]
                    WMO_DDays[DFI_byYear_row, 'qday_90'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_90)[1]
                    WMO_DDays[DFI_byYear_row, 'qday_95'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_95)[1]
                    
                    
                    # same thing but with NM90		
                    streamy_y_baseflow_NM90 = sum(streamy_thisyear$NM90_baseflow, na.rm=TRUE)
                    streamy_y_quickflow_NM90 = streamy_year_tot - streamy_y_baseflow_NM90
                    
                    NM90_byYear[DFI_byYear_row, 'qflow'] =		streamy_y_quickflow_NM90 / streamy_year_tot
                    NM90_byYear[DFI_byYear_row, 'bflow'] =		streamy_y_baseflow_NM90 / streamy_year_tot
                    
                    NM90_volumeByYear[DFI_byYear_row, 'qflow'] =		streamy_y_quickflow_NM90 
                    NM90_volumeByYear[DFI_byYear_row, 'bflow'] =		streamy_y_baseflow_NM90 
                    
                    NM90_varianceByYear[DFI_byYear_row, 'qflow'] =		var(streamy_thisyear$Q - streamy_thisyear$NM90_baseflow)
                    NM90_varianceByYear[DFI_byYear_row, 'bflow'] =		var(streamy_thisyear$NM90_baseflow) 
                    
                    streamy_thisyear$bf_narm = 0								
                    streamy_thisyear$bf_narm[which(!is.na(streamy_thisyear$NM90_baseflow))] = streamy_thisyear$NM90_baseflow[which(!is.na(streamy_thisyear$NM90_baseflow))]
                    streamy_thisyear$cumsumQ_bf = cumsum(streamy_thisyear$bf_narm)
                    streamy_year_half_bf = streamy_y_baseflow_NM90 / 2
                    streamy_year_quarter_bf = streamy_y_baseflow_NM90 / 4
                    streamy_year_3quarter_bf = streamy_y_baseflow_NM90 / (4/3)
                    NM90_DDays[DFI_byYear_row, 'bday_50'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_half_bf)[1]
                    NM90_DDays[DFI_byYear_row, 'bday_25'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_quarter_bf)[1]
                    NM90_DDays[DFI_byYear_row, 'bday_75'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_3quarter_bf)[1]
                    
                    streamy_thisyear$qf_narm = 0								
                    streamy_thisyear$qf_narm[which(!is.na(streamy_thisyear$NM90_quickflow))] = streamy_thisyear$NM90_quickflow[which(!is.na(streamy_thisyear$NM90_quickflow))]
                    streamy_thisyear$cumsumQ_qf = cumsum(streamy_thisyear$qf_narm)
                    streamy_year_half_qf = streamy_y_quickflow_NM90 / 2
                    streamy_year_quarter_qf = streamy_y_quickflow_NM90 / 4
                    streamy_year_3quarter_qf = streamy_y_quickflow_NM90 / (4/3)
                    NM90_DDays[DFI_byYear_row, 'qday_50'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_half_qf)[1]
                    NM90_DDays[DFI_byYear_row, 'qday_25'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_quarter_qf)[1]
                    NM90_DDays[DFI_byYear_row, 'qday_75'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_3quarter_qf)[1]
                    
                    
                    # same thing but with LH13		
                    streamy_y_baseflow_LH13 = sum(streamy_thisyear$LH13_baseflow, na.rm=TRUE)
                    streamy_y_quickflow_LH13 = streamy_year_tot - streamy_y_baseflow_LH13
                    
                    LH13_byYear[DFI_byYear_row, 'qflow'] =		streamy_y_quickflow_LH13 / streamy_year_tot
                    LH13_byYear[DFI_byYear_row, 'bflow'] =		streamy_y_baseflow_LH13 / streamy_year_tot
                    
                    LH13_volumeByYear[DFI_byYear_row, 'qflow'] =		streamy_y_quickflow_LH13 
                    LH13_volumeByYear[DFI_byYear_row, 'bflow'] =		streamy_y_baseflow_LH13 
                    
                    LH13_varianceByYear[DFI_byYear_row, 'qflow'] =		var(streamy_thisyear$Q - streamy_thisyear$LH13_baseflow)
                    LH13_varianceByYear[DFI_byYear_row, 'bflow'] =		var(streamy_thisyear$LH13_baseflow) 
                    
                    streamy_thisyear$bf_narm = 0								
                    streamy_thisyear$bf_narm[which(!is.na(streamy_thisyear$LH13_baseflow))] = streamy_thisyear$LH13_baseflow[which(!is.na(streamy_thisyear$LH13_baseflow))]
                    streamy_thisyear$cumsumQ_bf = cumsum(streamy_thisyear$bf_narm)
                    streamy_year_bf_5 = streamy_y_baseflow_LH13 * .05
                    streamy_year_bf_10 = streamy_y_baseflow_LH13 * .1
                    streamy_year_bf_20 = streamy_y_baseflow_LH13 * .2
                    streamy_year_bf_30 = streamy_y_baseflow_LH13 * .3
                    streamy_year_bf_40 = streamy_y_baseflow_LH13 * .4
                    streamy_year_bf_50 = streamy_y_baseflow_LH13 * .5
                    streamy_year_bf_60 = streamy_y_baseflow_LH13 * .6
                    streamy_year_bf_70 = streamy_y_baseflow_LH13 * .7
                    streamy_year_bf_80 = streamy_y_baseflow_LH13 * .8
                    streamy_year_bf_90 = streamy_y_baseflow_LH13 * .9
                    streamy_year_bf_95 = streamy_y_baseflow_LH13 * .95
                    LH13_DDays[DFI_byYear_row, 'bday_5'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_5)[1]
                    LH13_DDays[DFI_byYear_row, 'bday_10'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_10)[1]
                    LH13_DDays[DFI_byYear_row, 'bday_20'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_20)[1]
                    LH13_DDays[DFI_byYear_row, 'bday_30'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_30)[1]
                    LH13_DDays[DFI_byYear_row, 'bday_40'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_40)[1]
                    LH13_DDays[DFI_byYear_row, 'bday_50'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_50)[1]
                    LH13_DDays[DFI_byYear_row, 'bday_60'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_60)[1]
                    LH13_DDays[DFI_byYear_row, 'bday_70'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_70)[1]
                    LH13_DDays[DFI_byYear_row, 'bday_80'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_80)[1]
                    LH13_DDays[DFI_byYear_row, 'bday_90'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_90)[1]
                    LH13_DDays[DFI_byYear_row, 'bday_95'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_bf_95)[1]
                    
                    streamy_thisyear$qf_narm = 0								
                    streamy_thisyear$qf_narm[which(!is.na(streamy_thisyear$LH13_quickflow))] = streamy_thisyear$LH13_quickflow[which(!is.na(streamy_thisyear$LH13_quickflow))]
                    streamy_thisyear$cumsumQ_qf = cumsum(streamy_thisyear$qf_narm)
                    streamy_year_qf_5 = streamy_y_quickflow_LH13 * .05
                    streamy_year_qf_10 = streamy_y_quickflow_LH13 * .1
                    streamy_year_qf_20 = streamy_y_quickflow_LH13 * .2
                    streamy_year_qf_30 = streamy_y_quickflow_LH13 * .3
                    streamy_year_qf_40 = streamy_y_quickflow_LH13 * .4
                    streamy_year_qf_50 = streamy_y_quickflow_LH13 * .5
                    streamy_year_qf_60 = streamy_y_quickflow_LH13 * .6
                    streamy_year_qf_70 = streamy_y_quickflow_LH13 * .7
                    streamy_year_qf_80 = streamy_y_quickflow_LH13 * .8
                    streamy_year_qf_90 = streamy_y_quickflow_LH13 * .9
                    streamy_year_qf_95 = streamy_y_quickflow_LH13 * .95
                    LH13_DDays[DFI_byYear_row, 'qday_5'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_5)[1]
                    LH13_DDays[DFI_byYear_row, 'qday_10'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_10)[1]
                    LH13_DDays[DFI_byYear_row, 'qday_20'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_20)[1]
                    LH13_DDays[DFI_byYear_row, 'qday_30'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_30)[1]
                    LH13_DDays[DFI_byYear_row, 'qday_40'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_40)[1]
                    LH13_DDays[DFI_byYear_row, 'qday_50'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_50)[1]
                    LH13_DDays[DFI_byYear_row, 'qday_60'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_60)[1]
                    LH13_DDays[DFI_byYear_row, 'qday_70'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_70)[1]
                    LH13_DDays[DFI_byYear_row, 'qday_80'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_80)[1]
                    LH13_DDays[DFI_byYear_row, 'qday_90'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_90)[1]
                    LH13_DDays[DFI_byYear_row, 'qday_95'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_qf_95)[1]
                    
                    
                    # same thing but with E05		
                    streamy_y_baseflow_E05 = sum(streamy_thisyear$E05_baseflow, na.rm=TRUE)
                    streamy_y_quickflow_E05 = streamy_year_tot - streamy_y_baseflow_E05
                    
                    E05_byYear[DFI_byYear_row, 'qflow'] =		streamy_y_quickflow_E05 / streamy_year_tot
                    E05_byYear[DFI_byYear_row, 'bflow'] =		streamy_y_baseflow_E05 / streamy_year_tot
                    
                    E05_volumeByYear[DFI_byYear_row, 'qflow'] =		streamy_y_quickflow_E05 
                    E05_volumeByYear[DFI_byYear_row, 'bflow'] =		streamy_y_baseflow_E05 
                    
                    E05_varianceByYear[DFI_byYear_row, 'qflow'] =		var(streamy_thisyear$Q - streamy_thisyear$E05_baseflow)
                    E05_varianceByYear[DFI_byYear_row, 'bflow'] =		var(streamy_thisyear$E05_baseflow) 
                    
                    streamy_thisyear$bf_narm = 0								
                    streamy_thisyear$bf_narm[which(!is.na(streamy_thisyear$E05_baseflow))] = streamy_thisyear$E05_baseflow[which(!is.na(streamy_thisyear$E05_baseflow))]
                    streamy_thisyear$cumsumQ_bf = cumsum(streamy_thisyear$bf_narm)
                    streamy_year_half_bf = streamy_y_baseflow_E05 / 2
                    streamy_year_quarter_bf = streamy_y_baseflow_E05 / 4
                    streamy_year_3quarter_bf = streamy_y_baseflow_E05 / (4/3)
                    E05_DDays[DFI_byYear_row, 'bday_50'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_half_bf)[1]
                    E05_DDays[DFI_byYear_row, 'bday_25'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_quarter_bf)[1]
                    E05_DDays[DFI_byYear_row, 'bday_75'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_3quarter_bf)[1]
                    
                    streamy_thisyear$qf_narm = 0								
                    streamy_thisyear$qf_narm[which(!is.na(streamy_thisyear$E05_quickflow))] = streamy_thisyear$E05_quickflow[which(!is.na(streamy_thisyear$E05_quickflow))]
                    streamy_thisyear$cumsumQ_qf = cumsum(streamy_thisyear$qf_narm)
                    streamy_year_half_qf = streamy_y_quickflow_E05 / 2
                    streamy_year_quarter_qf = streamy_y_quickflow_E05 / 4
                    streamy_year_3quarter_qf = streamy_y_quickflow_E05 / (4/3)
                    E05_DDays[DFI_byYear_row, 'qday_50'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_half_qf)[1]
                    E05_DDays[DFI_byYear_row, 'qday_25'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_quarter_qf)[1]
                    E05_DDays[DFI_byYear_row, 'qday_75'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_3quarter_qf)[1]
                    
                    
                    # same thing but with E12		
                    streamy_y_baseflow_E12 = sum(streamy_thisyear$E12_baseflow, na.rm=TRUE)
                    streamy_y_quickflow_E12 = streamy_year_tot - streamy_y_baseflow_E12
                    
                    E12_byYear[DFI_byYear_row, 'qflow'] =		streamy_y_quickflow_E12 / streamy_year_tot
                    E12_byYear[DFI_byYear_row, 'bflow'] =		streamy_y_baseflow_E12 / streamy_year_tot
                    
                    E12_volumeByYear[DFI_byYear_row, 'qflow'] =		streamy_y_quickflow_E12 
                    E12_volumeByYear[DFI_byYear_row, 'bflow'] =		streamy_y_baseflow_E12 
                    
                    E12_varianceByYear[DFI_byYear_row, 'qflow'] =		var(streamy_thisyear$Q - streamy_thisyear$E12_baseflow)
                    E12_varianceByYear[DFI_byYear_row, 'bflow'] =		var(streamy_thisyear$E12_baseflow) 
                    
                    streamy_thisyear$bf_narm = 0								
                    streamy_thisyear$bf_narm[which(!is.na(streamy_thisyear$E12_baseflow))] = streamy_thisyear$E12_baseflow[which(!is.na(streamy_thisyear$E12_baseflow))]
                    streamy_thisyear$cumsumQ_bf = cumsum(streamy_thisyear$bf_narm)
                    streamy_year_half_bf = streamy_y_baseflow_E12 / 2
                    streamy_year_quarter_bf = streamy_y_baseflow_E12 / 4
                    streamy_year_3quarter_bf = streamy_y_baseflow_E12 / (4/3)
                    E12_DDays[DFI_byYear_row, 'bday_50'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_half_bf)[1]
                    E12_DDays[DFI_byYear_row, 'bday_25'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_quarter_bf)[1]
                    E12_DDays[DFI_byYear_row, 'bday_75'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_3quarter_bf)[1]
                    
                    streamy_thisyear$qf_narm = 0								
                    streamy_thisyear$qf_narm[which(!is.na(streamy_thisyear$E12_quickflow))] = streamy_thisyear$E12_quickflow[which(!is.na(streamy_thisyear$E12_quickflow))]
                    streamy_thisyear$cumsumQ_qf = cumsum(streamy_thisyear$qf_narm)
                    streamy_year_half_qf = streamy_y_quickflow_E12 / 2
                    streamy_year_quarter_qf = streamy_y_quickflow_E12 / 4
                    streamy_year_3quarter_qf = streamy_y_quickflow_E12 / (4/3)
                    E12_DDays[DFI_byYear_row, 'qday_50'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_half_qf)[1]
                    E12_DDays[DFI_byYear_row, 'qday_25'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_quarter_qf)[1]
                    E12_DDays[DFI_byYear_row, 'qday_75'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_3quarter_qf)[1]
                    
                    # same thing but with B93		
                    streamy_y_baseflow_B93 = sum(streamy_thisyear$B93_baseflow, na.rm=TRUE)
                    streamy_y_quickflow_B93 = streamy_year_tot - streamy_y_baseflow_B93
                    
                    B93_byYear[DFI_byYear_row, 'qflow'] =		streamy_y_quickflow_B93 / streamy_year_tot
                    B93_byYear[DFI_byYear_row, 'bflow'] =		streamy_y_baseflow_B93 / streamy_year_tot
                    
                    B93_volumeByYear[DFI_byYear_row, 'qflow'] =		streamy_y_quickflow_B93 
                    B93_volumeByYear[DFI_byYear_row, 'bflow'] =		streamy_y_baseflow_B93 
                    
                    B93_varianceByYear[DFI_byYear_row, 'qflow'] =		var(streamy_thisyear$Q - streamy_thisyear$B93_baseflow)
                    B93_varianceByYear[DFI_byYear_row, 'bflow'] =		var(streamy_thisyear$B93_baseflow) 
                    
                    streamy_thisyear$bf_narm = 0								
                    streamy_thisyear$bf_narm[which(!is.na(streamy_thisyear$B93_baseflow))] = streamy_thisyear$B93_baseflow[which(!is.na(streamy_thisyear$B93_baseflow))]
                    streamy_thisyear$cumsumQ_bf = cumsum(streamy_thisyear$bf_narm)
                    streamy_year_half_bf = streamy_y_baseflow_B93 / 2
                    streamy_year_quarter_bf = streamy_y_baseflow_B93 / 4
                    streamy_year_3quarter_bf = streamy_y_baseflow_B93 / (4/3)
                    B93_DDays[DFI_byYear_row, 'bday_50'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_half_bf)[1]
                    B93_DDays[DFI_byYear_row, 'bday_25'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_quarter_bf)[1]
                    B93_DDays[DFI_byYear_row, 'bday_75'] = which(streamy_thisyear$cumsumQ_bf > streamy_year_3quarter_bf)[1]
                    
                    streamy_thisyear$qf_narm = 0								
                    streamy_thisyear$qf_narm[which(!is.na(streamy_thisyear$B93_quickflow))] = streamy_thisyear$B93_quickflow[which(!is.na(streamy_thisyear$B93_quickflow))]
                    streamy_thisyear$cumsumQ_qf = cumsum(streamy_thisyear$qf_narm)
                    streamy_year_half_qf = streamy_y_quickflow_B93 / 2
                    streamy_year_quarter_qf = streamy_y_quickflow_B93 / 4
                    streamy_year_3quarter_qf = streamy_y_quickflow_B93 / (4/3)
                    B93_DDays[DFI_byYear_row, 'qday_50'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_half_qf)[1]
                    B93_DDays[DFI_byYear_row, 'qday_25'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_quarter_qf)[1]
                    B93_DDays[DFI_byYear_row, 'qday_75'] = which(streamy_thisyear$cumsumQ_qf > streamy_year_3quarter_qf)[1]
                    
                    
                    
                    
                    
                    # analysis by seasons
                    seasons = list()
                    seasons[[1]] = c(12,1,2)	# winter
                    seasons[[2]] = c(3,4,5)		# spring
                    seasons[[3]] = c(6,7,8)		# summer	
                    seasons[[4]] = c(9,10,11)	# fall
                    for(the_seasons in 1:4)	{
                      the_months = seasons[[the_seasons]]
                      streamy_sub = subset(streamy_thisyear, month %in% the_months)
                      
                      if(the_seasons == 1) {flowvols_byYear[fv_byYear_row, 'Qwin'] = sum(streamy_sub$Q, na.rm=TRUE)}
                      if(the_seasons == 2) {flowvols_byYear[fv_byYear_row, 'Qspr'] = sum(streamy_sub$Q, na.rm=TRUE)}
                      if(the_seasons == 3) {flowvols_byYear[fv_byYear_row, 'Qsum'] = sum(streamy_sub$Q, na.rm=TRUE)}
                      if(the_seasons == 4) {flowvols_byYear[fv_byYear_row, 'Qfal'] = sum(streamy_sub$Q, na.rm=TRUE)}
                      
                      seasons_since_NAs = seasons_since_NAs	+ 1
                      if(any(is.na(streamy_sub$Q))) {if(length(which(is.na(streamy_sub$Q))) > 21){	# testing to see if a 'significant' number of nas (e.g., 21) exist per seasons
                        seasons_since_NAs = 0	}}		# resetting the seasons since NAs counter
                      
                      if(any(!is.na(streamy_sub$Q)))	{
                        this_row = which(DFIs[,'year'] == the_year)[the_seasons]
                        
                        # for DFIs
                        this_yearmonth_bf = sum(streamy_sub$base_flow, na.rm=TRUE)
                        this_yearmonth_df = sum(streamy_sub$delayed_flow, na.rm=TRUE) - sum(streamy_sub$base_flow, na.rm=TRUE)
                        this_yearmonth_qf = sum(streamy_sub$quick_flow, na.rm=TRUE) - sum(streamy_sub$delayed_flow, na.rm=TRUE)
                        this_yearmonth_of = sum(streamy_sub$Q) - sum(streamy_sub$quick_flow, na.rm=TRUE) 
                        # same thing but with WMO
                        this_yearmonth_bf_WMO = sum(streamy_sub$WMO_baseflow, na.rm=TRUE)
                        this_yearmonth_qf_WMO = sum(streamy_sub$WMO_quickflow, na.rm=TRUE)
                        # same thing but with NM90
                        this_yearmonth_bf_NM90 = sum(streamy_sub$NM90_baseflow, na.rm=TRUE)
                        this_yearmonth_qf_NM90 = sum(streamy_sub$NM90_quickflow, na.rm=TRUE)
                        # same thing but with LH13
                        this_yearmonth_bf_LH13 = sum(streamy_sub$LH13_baseflow, na.rm=TRUE)
                        this_yearmonth_qf_LH13 = sum(streamy_sub$LH13_quickflow, na.rm=TRUE)
                        # same thing but with E05
                        this_yearmonth_bf_E05 = sum(streamy_sub$E05_baseflow, na.rm=TRUE)
                        this_yearmonth_qf_E05 = sum(streamy_sub$E05_quickflow, na.rm=TRUE)
                        # same thing but with E12
                        this_yearmonth_bf_E12 = sum(streamy_sub$E12_baseflow, na.rm=TRUE)
                        this_yearmonth_qf_E12 = sum(streamy_sub$E12_quickflow, na.rm=TRUE)
                        # same thing but with B93
                        this_yearmonth_bf_B93 = sum(streamy_sub$B93_baseflow, na.rm=TRUE)
                        this_yearmonth_qf_B93 = sum(streamy_sub$B93_quickflow, na.rm=TRUE)
                        
                        if(streamy_year_tot > 0){
                          if(seasons_since_NAs > 1)	{
                            # with DFIs
                            DFIs[this_row, 'overland'] = (this_yearmonth_of) / streamy_year_tot
                            DFIs[this_row, 'qflow'] = (this_yearmonth_qf)/ streamy_year_tot
                            DFIs[this_row, 'dflow'] = (this_yearmonth_df) / streamy_year_tot
                            DFIs[this_row, 'bflow'] = (this_yearmonth_bf) / streamy_year_tot
                            # same thing but with WMO
                            WMO[this_row, 'qflow'] = (this_yearmonth_qf_WMO) / streamy_year_tot
                            WMO[this_row, 'bflow'] = (this_yearmonth_bf_WMO) / streamy_year_tot
                            # same thing but with NM90
                            NM90[this_row, 'qflow'] = (this_yearmonth_qf_NM90) / streamy_year_tot
                            NM90[this_row, 'bflow'] = (this_yearmonth_bf_NM90) / streamy_year_tot
                            # same thing but with LH13
                            LH13[this_row, 'qflow'] = (this_yearmonth_qf_LH13) / streamy_year_tot
                            LH13[this_row, 'bflow'] = (this_yearmonth_bf_LH13) / streamy_year_tot
                            # same thing but with E05
                            E05[this_row, 'qflow'] = (this_yearmonth_qf_E05) / streamy_year_tot
                            E05[this_row, 'bflow'] = (this_yearmonth_bf_E05) / streamy_year_tot
                            # same thing but with E12
                            E12[this_row, 'qflow'] = (this_yearmonth_qf_E12) / streamy_year_tot
                            E12[this_row, 'bflow'] = (this_yearmonth_bf_E12) / streamy_year_tot
                            # same thing but with B93
                            B93[this_row, 'qflow'] = (this_yearmonth_qf_B93) / streamy_year_tot
                            B93[this_row, 'bflow'] = (this_yearmonth_bf_B93) / streamy_year_tot
                          } 	# end of if(seasons_since_NAs > 1)	{
                        } 		# end of if(streamy_year_tot > 0){
                      } 			# end of if(any(!is.na(streamy_sub$Q)))	{
                    } 				# end of for(the_seasons in 1:4)	{
                  }				# end of if(length(which(is.na(streamy_thisyear$Q))) < 90 )	{
                }				# end of if(length(which(streamy_thisyear$Q > 0)) > 30)	{
              }				# end of if(streamy_year_tot > 0)	{
            }				# end of for(the_year in years_to_use)	{
            
            
            
            
            
            
            ######################################################
            # saving our data
            # starting with flow volumes
            Qann_mod = zyp.sen(Qann ~ year, subset(flowvols_byYear, !is.na(flowvols_byYear$Qann)))
            Qwin_mod = zyp.sen(Qwin ~ year, subset(flowvols_byYear, !is.na(flowvols_byYear$Qwin)))
            Qspr_mod = zyp.sen(Qspr ~ year, subset(flowvols_byYear, !is.na(flowvols_byYear$Qspr)))
            Qsum_mod = zyp.sen(Qsum ~ year, subset(flowvols_byYear, !is.na(flowvols_byYear$Qsum)))
            Qfal_mod = zyp.sen(Qfal ~ year, subset(flowvols_byYear, !is.na(flowvols_byYear$Qfal)))
            Q5_mod = zyp.sen(Q5 ~ year, subset(flowvols_byYear, !is.na(flowvols_byYear$Q5)))
            Q10_mod = zyp.sen(Q10 ~ year, subset(flowvols_byYear, !is.na(flowvols_byYear$Q10)))
            Q20_mod = zyp.sen(Q20 ~ year, subset(flowvols_byYear, !is.na(flowvols_byYear$Q20)))
            Q50_mod = zyp.sen(Q50 ~ year, subset(flowvols_byYear, !is.na(flowvols_byYear$Q50)))
            Q70_mod = zyp.sen(Q70 ~ year, subset(flowvols_byYear, !is.na(flowvols_byYear$Q70)))
            Q90_mod = zyp.sen(Q90 ~ year, subset(flowvols_byYear, !is.na(flowvols_byYear$Q90)))
            Q95_mod = zyp.sen(Q95 ~ year, subset(flowvols_byYear, !is.na(flowvols_byYear$Q95)))
            
            Qann_spearmans = cor.test(flowvols_byYear$year, flowvols_byYear$Qann, method='spearman')
            Qwin_spearmans = cor.test(flowvols_byYear$year, flowvols_byYear$Qwin, method='spearman')
            Qspr_spearmans = cor.test(flowvols_byYear$year, flowvols_byYear$Qspr, method='spearman')
            Qsum_spearmans = cor.test(flowvols_byYear$year, flowvols_byYear$Qsum, method='spearman')
            Qfal_spearmans = cor.test(flowvols_byYear$year, flowvols_byYear$Qfal, method='spearman')
            Q5_spearmans = cor.test(flowvols_byYear$year, flowvols_byYear$Q5, method='spearman')
            Q10_spearmans = cor.test(flowvols_byYear$year, flowvols_byYear$Q10, method='spearman')
            Q20_spearmans = cor.test(flowvols_byYear$year, flowvols_byYear$Q20, method='spearman')
            Q50_spearmans = cor.test(flowvols_byYear$year, flowvols_byYear$Q50, method='spearman')
            Q70_spearmans = cor.test(flowvols_byYear$year, flowvols_byYear$Q70, method='spearman')
            Q90_spearmans = cor.test(flowvols_byYear$year, flowvols_byYear$Q90, method='spearman')
            Q95_spearmans = cor.test(flowvols_byYear$year, flowvols_byYear$Q95, method='spearman')
            
            recess_char[run,'Qann_slp'] = Qann_mod$coef[2] 
            recess_char[run,'Qann_rho'] = Qann_spearmans$estimate
            recess_char[run,'Qann_pval'] = Qann_spearmans$p.value 
            recess_char[run,'Qwin_slp'] = Qwin_mod$coef[2] 
            recess_char[run,'Qwin_rho'] = Qwin_spearmans$estimate
            recess_char[run,'Qwin_pval'] = Qwin_spearmans$p.value 
            recess_char[run,'Qspr_slp'] = Qspr_mod$coef[2] 
            recess_char[run,'Qspr_rho'] = Qspr_spearmans$estimate 
            recess_char[run,'Qspr_pval'] = Qspr_spearmans$p.value
            recess_char[run,'Qsum_slp'] = Qsum_mod$coef[2] 
            recess_char[run,'Qsum_rho'] = Qsum_spearmans$estimate 
            recess_char[run,'Qsum_pval'] = Qsum_spearmans$p.value
            recess_char[run,'Qfal_slp'] = Qfal_mod$coef[2] 
            recess_char[run,'Qfal_rho'] = Qfal_spearmans$estimate 
            recess_char[run,'Qfal_pval'] = Qfal_spearmans$p.value
            recess_char[run,'Q5_slp'] = Q5_mod$coef[2] 
            recess_char[run,'Q5_rho'] = Q5_spearmans$estimate 
            recess_char[run,'Q5_pval'] = Q5_spearmans$p.value
            recess_char[run,'Q10_slp'] = Q10_mod$coef[2] 
            recess_char[run,'Q10_rho'] = Q10_spearmans$estimate 
            recess_char[run,'Q10_pval'] = Q10_spearmans$p.value
            recess_char[run,'Q20_slp'] = Q20_mod$coef[2] 
            recess_char[run,'Q20_rho'] = Q20_spearmans$estimate 
            recess_char[run,'Q20_pval'] = Q20_spearmans$p.value
            recess_char[run,'Q50_slp'] = Q50_mod$coef[2] 
            recess_char[run,'Q50_rho'] = Q50_spearmans$estimate 
            recess_char[run,'Q50_pval'] = Q50_spearmans$p.value
            recess_char[run,'Q70_slp'] = Q70_mod$coef[2] 
            recess_char[run,'Q70_rho'] = Q70_spearmans$estimate 
            recess_char[run,'Q70_pval'] = Q70_spearmans$p.value
            recess_char[run,'Q90_slp'] = Q90_mod$coef[2] 
            recess_char[run,'Q90_rho'] = Q90_spearmans$estimate 
            recess_char[run,'Q90_pval'] = Q90_spearmans$p.value
            recess_char[run,'Q95_slp'] = Q95_mod$coef[2] 
            recess_char[run,'Q95_rho'] = Q95_spearmans$estimate 
            recess_char[run,'Q95_pval'] = Q95_spearmans$p.value
            
            
            
            ##############################
            # analysis of changes in FDCs
            
            recess_char[run,'FDCall_slp'] = zyp.sen(slp_all ~ year, subset(FDC_byYear, !is.na(FDC_byYear$slp_all)))$coef[2]
            recess_char[run,'FDC90_slp'] =  zyp.sen(slp_90th ~ year, subset(FDC_byYear, !is.na(FDC_byYear$slp_90th)))$coef[2]
            recess_char[run,'FDCmid_slp'] = zyp.sen(slp_mid ~ year, subset(FDC_byYear, !is.na(FDC_byYear$slp_mid)))$coef[2]
            
            
            FDC_all_cor = cor.test(FDC_byYear$year, FDC_byYear$slp_all, method='spearman')
            recess_char[run,'FDCall_rho'] = FDC_all_cor$estimate
            recess_char[run,'FDCall_pval'] = FDC_all_cor$p.value
            FDC_90th_cor = cor.test(FDC_byYear$year, FDC_byYear$slp_90th, method='spearman')
            recess_char[run,'FDC90th_rho'] = FDC_90th_cor$estimate
            recess_char[run,'FDC90th_pval'] = FDC_90th_cor$p.value
            FDC_mid_cor = cor.test(FDC_byYear$year, FDC_byYear$slp_mid, method='spearman')
            recess_char[run,'FDCmid_rho'] = FDC_mid_cor$estimate
            recess_char[run,'FDCmid_pval'] = FDC_mid_cor$p.value
            
            
            
            ########################
            # analysis of changes in flashiness
            recess_char[run,'flashinessRB_slp'] = zyp.sen(RB_index ~ year, subset(flashiness_byYear, !is.na(flashiness_byYear$RB_index)))$coef[2]
            
            flashiness_RB_cor = cor.test(flashiness_byYear$year, flashiness_byYear$RB_index, method='spearman')
            recess_char[run,'flashinessRB_rho'] = flashiness_RB_cor$estimate
            recess_char[run,'flashinessRB_pval'] = flashiness_RB_cor$p.value
            
            
            
            # analysis of changes in Budyko values
            recess_char[run, 'Bdy_Ea_min_over_Ps_slp'] = zyp.sen(PminQoverP ~ year, subset(Budyko_byYear, !is.na(Budyko_byYear$PminQoverP)))$coef[2]
            recess_char[run, 'Bdy_ariInd_slp'] = zyp.sen(ariInd ~ year, subset(Budyko_byYear, !is.na(Budyko_byYear$ariInd)))$coef[2]
            recess_char[run, 'Bdy_EaOverP_pred_slp'] = zyp.sen(EaOverP_pred ~ year, subset(Budyko_byYear, !is.na(Budyko_byYear$EaOverP_pred)))$coef[2]
            recess_char[run, 'Bdy_pred_error_slp'] = zyp.sen(pred_error ~ year, subset(Budyko_byYear, !is.na(Budyko_byYear$pred_error)))$coef[2]
            recess_char[run, 'Bdy_days_water_stress_slp'] = zyp.sen(num_days_waterStress ~ year, subset(Budyko_byYear, !is.na(Budyko_byYear$num_days_waterStress)))$coef[2]
            recess_char[run, 'Bdy_days_water_stress2x_slp'] = zyp.sen(num_days_waterStress2x ~ year, subset(Budyko_byYear, !is.na(Budyko_byYear$num_days_waterStress2x)))$coef[2]
            recess_char[run, 'Bdy_days_water_stress10x_slp'] = zyp.sen(num_days_waterStress10x ~ year, subset(Budyko_byYear, !is.na(Budyko_byYear$num_days_waterStress10x)))$coef[2]
            
            
            bdy_PminQoverP_cor = cor.test(Budyko_byYear$year, Budyko_byYear$PminQoverP, method='spearman')
            recess_char[run,'Bdy_Ea_min_over_Ps_rho'] = bdy_PminQoverP_cor$estimate
            recess_char[run,'Bdy_Ea_min_over_Ps_pval'] = bdy_PminQoverP_cor$p.value
            bdy_ariInd_cor = cor.test(Budyko_byYear$year, Budyko_byYear$ariInd, method='spearman')
            recess_char[run,'Bdy_ariInd_rho'] = bdy_ariInd_cor$estimate
            recess_char[run,'Bdy_ariInd_pval'] = bdy_ariInd_cor$p.value
            bdy_EaOverP_pred_cor = cor.test(Budyko_byYear$year, Budyko_byYear$EaOverP_pred, method='spearman')
            recess_char[run,'Bdy_EaOverP_pred_rho'] = bdy_EaOverP_pred_cor$estimate
            recess_char[run,'Bdy_EaOverP_pred_Ps_pval'] = bdy_EaOverP_pred_cor$p.value
            bdy_pred_error_cor = cor.test(Budyko_byYear$year, Budyko_byYear$pred_error, method='spearman')
            recess_char[run,'Bdy_pred_error_rho'] = bdy_pred_error_cor$estimate
            recess_char[run,'Bdy_pred_error_pval'] = bdy_pred_error_cor$p.value
            bdy_days_water_stress_cor = cor.test(Budyko_byYear$year, Budyko_byYear$num_days_waterStress, method='spearman')
            recess_char[run,'Bdy_days_water_stress_rho'] = bdy_days_water_stress_cor$estimate
            recess_char[run,'Bdy_days_water_stress_pval'] = bdy_days_water_stress_cor$p.value
            bdy_days_water_stress2x_cor = cor.test(Budyko_byYear$year, Budyko_byYear$num_days_waterStress2x, method='spearman')
            recess_char[run,'Bdy_days_water_stress2x_rho'] = bdy_days_water_stress2x_cor$estimate
            recess_char[run,'Bdy_days_water_stress2x_pval'] = bdy_days_water_stress2x_cor$p.value
            bdy_days_water_stress10x_cor = cor.test(Budyko_byYear$year, Budyko_byYear$num_days_waterStress10x, method='spearman')
            recess_char[run,'Bdy_days_water_stress10x_rho'] = bdy_days_water_stress10x_cor$estimate
            recess_char[run,'Bdy_days_water_stress10x_pval'] = bdy_days_water_stress10x_cor$p.value
            
            
            
            # avg date of D## for Q
            recess_char[run, 'D5_med_date'] = median(julday_max$D5_day, na.rm=TRUE)
            recess_char[run, 'D10_med_date'] = median(julday_max$D10_day, na.rm=TRUE)
            recess_char[run, 'D20_med_date'] = median(julday_max$D20_day, na.rm=TRUE)
            recess_char[run, 'D30_med_date'] = median(julday_max$D30_day, na.rm=TRUE)
            recess_char[run, 'D40_med_date'] = median(julday_max$D40_day, na.rm=TRUE)
            recess_char[run, 'D50_med_date'] = median(julday_max$D50_day, na.rm=TRUE)
            recess_char[run, 'D60_med_date'] = median(julday_max$D60_day, na.rm=TRUE)
            recess_char[run, 'D70_med_date'] = median(julday_max$D70_day, na.rm=TRUE)
            recess_char[run, 'D80_med_date'] = median(julday_max$D80_day, na.rm=TRUE)
            recess_char[run, 'D90_med_date'] = median(julday_max$D90_day, na.rm=TRUE)
            recess_char[run, 'D95_med_date'] = median(julday_max$D95_day, na.rm=TRUE)
            
            # avg date of rain+snowmelt D##julprcp_max
            recess_char[run, 'D5_med_date_rnmlt'] = median(julrnmlt_max$D5_day, na.rm=TRUE)
            recess_char[run, 'D10_med_date_rnmlt'] = median(julrnmlt_max$D10_day, na.rm=TRUE)
            recess_char[run, 'D20_med_date_rnmlt'] = median(julrnmlt_max$D20_day, na.rm=TRUE)
            recess_char[run, 'D30_med_date_rnmlt'] = median(julrnmlt_max$D30_day, na.rm=TRUE)
            recess_char[run, 'D40_med_date_rnmlt'] = median(julrnmlt_max$D40_day, na.rm=TRUE)
            recess_char[run, 'D50_med_date_rnmlt'] = median(julrnmlt_max$D50_day, na.rm=TRUE)
            recess_char[run, 'D60_med_date_rnmlt'] = median(julrnmlt_max$D60_day, na.rm=TRUE)
            recess_char[run, 'D70_med_date_rnmlt'] = median(julrnmlt_max$D70_day, na.rm=TRUE)
            recess_char[run, 'D80_med_date_rnmlt'] = median(julrnmlt_max$D80_day, na.rm=TRUE)
            recess_char[run, 'D90_med_date_rnmlt'] = median(julrnmlt_max$D90_day, na.rm=TRUE)
            recess_char[run, 'D95_med_date_rnmlt'] = median(julrnmlt_max$D95_day, na.rm=TRUE)
            
            # avg date of precipitation D##
            recess_char[run, 'D5_med_date_prcp'] = median(julprcp_max$D5_day, na.rm=TRUE)
            recess_char[run, 'D10_med_date_prcp'] = median(julprcp_max$D10_day, na.rm=TRUE)
            recess_char[run, 'D20_med_date_prcp'] = median(julprcp_max$D20_day, na.rm=TRUE)
            recess_char[run, 'D30_med_date_prcp'] = median(julprcp_max$D30_day, na.rm=TRUE)
            recess_char[run, 'D40_med_date_prcp'] = median(julprcp_max$D40_day, na.rm=TRUE)
            recess_char[run, 'D50_med_date_prcp'] = median(julprcp_max$D50_day, na.rm=TRUE)
            recess_char[run, 'D60_med_date_prcp'] = median(julprcp_max$D60_day, na.rm=TRUE)
            recess_char[run, 'D70_med_date_prcp'] = median(julprcp_max$D70_day, na.rm=TRUE)
            recess_char[run, 'D80_med_date_prcp'] = median(julprcp_max$D80_day, na.rm=TRUE)
            recess_char[run, 'D90_med_date_prcp'] = median(julprcp_max$D90_day, na.rm=TRUE)
            recess_char[run, 'D95_med_date_prcp'] = median(julprcp_max$D95_day, na.rm=TRUE)
            
            
            # same but with Q_tBefore
            nona_years = which(!is.na(Q_tBefore_byYear[recess_char[run, 'D95_med_date'], ]))
            na_years = which(is.na(Q_tBefore_byYear[recess_char[run, 'D95_med_date'], ]))
            these_years = years_to_use[nona_years]
            Q5_tBefore = as.numeric(Q_tBefore_byYear[recess_char[run, 'D5_med_date'], nona_years])
            Q10_tBefore = as.numeric(Q_tBefore_byYear[recess_char[run, 'D10_med_date'], nona_years])
            Q20_tBefore = as.numeric(Q_tBefore_byYear[recess_char[run, 'D20_med_date'], nona_years])
            Q30_tBefore = as.numeric(Q_tBefore_byYear[recess_char[run, 'D30_med_date'], nona_years])
            Q40_tBefore = as.numeric(Q_tBefore_byYear[recess_char[run, 'D40_med_date'], nona_years])
            Q50_tBefore = as.numeric(Q_tBefore_byYear[recess_char[run, 'D50_med_date'], nona_years])
            Q60_tBefore = as.numeric(Q_tBefore_byYear[recess_char[run, 'D60_med_date'], nona_years])
            Q70_tBefore = as.numeric(Q_tBefore_byYear[recess_char[run, 'D70_med_date'], nona_years])
            Q80_tBefore = as.numeric(Q_tBefore_byYear[recess_char[run, 'D80_med_date'], nona_years])
            Q90_tBefore = as.numeric(Q_tBefore_byYear[recess_char[run, 'D90_med_date'], nona_years])
            Q95_tBefore = as.numeric(Q_tBefore_byYear[recess_char[run, 'D95_med_date'], nona_years])
            
            Q5_tBefore_mod = zyp.sen(Q5_tBefore ~ these_years)
            Q10_tBefore_mod = zyp.sen(Q10_tBefore ~ these_years)
            Q20_tBefore_mod = zyp.sen(Q20_tBefore ~ these_years)
            Q30_tBefore_mod = zyp.sen(Q30_tBefore ~ these_years)
            Q40_tBefore_mod = zyp.sen(Q40_tBefore ~ these_years)
            Q50_tBefore_mod = zyp.sen(Q50_tBefore ~ these_years)
            Q60_tBefore_mod = zyp.sen(Q60_tBefore ~ these_years)
            Q70_tBefore_mod = zyp.sen(Q70_tBefore ~ these_years)
            Q80_tBefore_mod = zyp.sen(Q80_tBefore ~ these_years)
            Q90_tBefore_mod = zyp.sen(Q90_tBefore ~ these_years)
            Q95_tBefore_mod = zyp.sen(Q95_tBefore ~ these_years)
            
            Q5_tBefore_spearmans = cor.test(these_years, Q5_tBefore, method='spearman')
            Q10_tBefore_spearmans = cor.test(these_years, Q10_tBefore, method='spearman')
            Q20_tBefore_spearmans = cor.test(these_years, Q20_tBefore, method='spearman')
            Q30_tBefore_spearmans = cor.test(these_years, Q30_tBefore, method='spearman')
            Q40_tBefore_spearmans = cor.test(these_years, Q40_tBefore, method='spearman')
            Q50_tBefore_spearmans = cor.test(these_years, Q50_tBefore, method='spearman')
            Q60_tBefore_spearmans = cor.test(these_years, Q60_tBefore, method='spearman')
            Q70_tBefore_spearmans = cor.test(these_years, Q70_tBefore, method='spearman')
            Q80_tBefore_spearmans = cor.test(these_years, Q80_tBefore, method='spearman')
            Q90_tBefore_spearmans = cor.test(these_years, Q90_tBefore, method='spearman')
            Q95_tBefore_spearmans = cor.test(these_years, Q95_tBefore, method='spearman')
            
            recess_char[run,'Q5_tBefore_slp'] = Q5_tBefore_mod$coef[2] 
            recess_char[run,'Q5_tBefore_rho'] = Q5_tBefore_spearmans$estimate
            recess_char[run,'Q5_tBefore_pval'] = Q5_tBefore_spearmans$p.value 
            recess_char[run,'Q10_tBefore_slp'] = Q10_tBefore_mod$coef[2] 
            recess_char[run,'Q10_tBefore_rho'] = Q10_tBefore_spearmans$estimate
            recess_char[run,'Q10_tBefore_pval'] = Q10_tBefore_spearmans$p.value 
            recess_char[run,'Q20_tBefore_slp'] = Q20_tBefore_mod$coef[2] 
            recess_char[run,'Q20_tBefore_rho'] = Q20_tBefore_spearmans$estimate
            recess_char[run,'Q20_tBefore_pval'] = Q20_tBefore_spearmans$p.value 
            recess_char[run,'Q30_tBefore_slp'] = Q30_tBefore_mod$coef[2] 
            recess_char[run,'Q30_tBefore_rho'] = Q30_tBefore_spearmans$estimate
            recess_char[run,'Q30_tBefore_pval'] = Q30_tBefore_spearmans$p.value 
            recess_char[run,'Q40_tBefore_slp'] = Q40_tBefore_mod$coef[2] 
            recess_char[run,'Q40_tBefore_rho'] = Q40_tBefore_spearmans$estimate
            recess_char[run,'Q40_tBefore_pval'] = Q40_tBefore_spearmans$p.value 
            recess_char[run,'Q50_tBefore_slp'] = Q50_tBefore_mod$coef[2] 
            recess_char[run,'Q50_tBefore_rho'] = Q50_tBefore_spearmans$estimate
            recess_char[run,'Q50_tBefore_pval'] = Q50_tBefore_spearmans$p.value 
            recess_char[run,'Q60_tBefore_slp'] = Q60_tBefore_mod$coef[2] 
            recess_char[run,'Q60_tBefore_rho'] = Q60_tBefore_spearmans$estimate
            recess_char[run,'Q60_tBefore_pval'] = Q60_tBefore_spearmans$p.value 
            recess_char[run,'Q70_tBefore_slp'] = Q70_tBefore_mod$coef[2] 
            recess_char[run,'Q70_tBefore_rho'] = Q70_tBefore_spearmans$estimate
            recess_char[run,'Q70_tBefore_pval'] = Q70_tBefore_spearmans$p.value 
            recess_char[run,'Q80_tBefore_slp'] = Q80_tBefore_mod$coef[2] 
            recess_char[run,'Q80_tBefore_rho'] = Q80_tBefore_spearmans$estimate
            recess_char[run,'Q80_tBefore_pval'] = Q80_tBefore_spearmans$p.value 
            recess_char[run,'Q90_tBefore_slp'] = Q90_tBefore_mod$coef[2] 
            recess_char[run,'Q90_tBefore_rho'] = Q90_tBefore_spearmans$estimate
            recess_char[run,'Q90_tBefore_pval'] = Q90_tBefore_spearmans$p.value 
            recess_char[run,'Q95_tBefore_slp'] = Q95_tBefore_mod$coef[2] 
            recess_char[run,'Q95_tBefore_rho'] = Q95_tBefore_spearmans$estimate
            recess_char[run,'Q95_tBefore_pval'] = Q95_tBefore_spearmans$p.value 
            
            
            
            
            # same but with Q_tAfter
            Q5_tAfter = as.numeric(Q_tAfter_byYear[recess_char[run, 'D5_med_date'], nona_years])
            Q10_tAfter = as.numeric(Q_tAfter_byYear[recess_char[run, 'D10_med_date'], nona_years])
            Q20_tAfter = as.numeric(Q_tAfter_byYear[recess_char[run, 'D20_med_date'], nona_years])
            Q30_tAfter = as.numeric(Q_tAfter_byYear[recess_char[run, 'D30_med_date'], nona_years])
            Q40_tAfter = as.numeric(Q_tAfter_byYear[recess_char[run, 'D40_med_date'], nona_years])
            Q50_tAfter = as.numeric(Q_tAfter_byYear[recess_char[run, 'D50_med_date'], nona_years])
            Q60_tAfter = as.numeric(Q_tAfter_byYear[recess_char[run, 'D60_med_date'], nona_years])
            Q70_tAfter = as.numeric(Q_tAfter_byYear[recess_char[run, 'D70_med_date'], nona_years])
            Q80_tAfter = as.numeric(Q_tAfter_byYear[recess_char[run, 'D80_med_date'], nona_years])
            Q90_tAfter = as.numeric(Q_tAfter_byYear[recess_char[run, 'D90_med_date'], nona_years])
            Q95_tAfter = as.numeric(Q_tAfter_byYear[recess_char[run, 'D95_med_date'], nona_years])
            
            Q5_tAfter_mod = zyp.sen(Q5_tAfter ~ these_years)
            Q10_tAfter_mod = zyp.sen(Q10_tAfter ~ these_years)
            Q20_tAfter_mod = zyp.sen(Q20_tAfter ~ these_years)
            Q30_tAfter_mod = zyp.sen(Q30_tAfter ~ these_years)
            Q40_tAfter_mod = zyp.sen(Q40_tAfter ~ these_years)
            Q50_tAfter_mod = zyp.sen(Q50_tAfter ~ these_years)
            Q60_tAfter_mod = zyp.sen(Q60_tAfter ~ these_years)
            Q70_tAfter_mod = zyp.sen(Q70_tAfter ~ these_years)
            Q80_tAfter_mod = zyp.sen(Q80_tAfter ~ these_years)
            Q90_tAfter_mod = zyp.sen(Q90_tAfter ~ these_years)
            Q95_tAfter_mod = zyp.sen(Q95_tAfter ~ these_years)
            
            Q5_tAfter_spearmans = cor.test(these_years, Q5_tAfter, method='spearman')
            Q10_tAfter_spearmans = cor.test(these_years, Q10_tAfter, method='spearman')
            Q20_tAfter_spearmans = cor.test(these_years, Q20_tAfter, method='spearman')
            Q30_tAfter_spearmans = cor.test(these_years, Q30_tAfter, method='spearman')
            Q40_tAfter_spearmans = cor.test(these_years, Q40_tAfter, method='spearman')
            Q50_tAfter_spearmans = cor.test(these_years, Q50_tAfter, method='spearman')
            Q60_tAfter_spearmans = cor.test(these_years, Q60_tAfter, method='spearman')
            Q70_tAfter_spearmans = cor.test(these_years, Q70_tAfter, method='spearman')
            Q80_tAfter_spearmans = cor.test(these_years, Q80_tAfter, method='spearman')
            Q90_tAfter_spearmans = cor.test(these_years, Q90_tAfter, method='spearman')
            Q95_tAfter_spearmans = cor.test(these_years, Q95_tAfter, method='spearman')
            
            recess_char[run,'Q5_tAfter_slp'] = Q5_tAfter_mod$coef[2] 
            recess_char[run,'Q5_tAfter_rho'] = Q5_tAfter_spearmans$estimate
            recess_char[run,'Q5_tAfter_pval'] = Q5_tAfter_spearmans$p.value 
            recess_char[run,'Q10_tAfter_slp'] = Q10_tAfter_mod$coef[2] 
            recess_char[run,'Q10_tAfter_rho'] = Q10_tAfter_spearmans$estimate
            recess_char[run,'Q10_tAfter_pval'] = Q10_tAfter_spearmans$p.value 
            recess_char[run,'Q20_tAfter_slp'] = Q20_tAfter_mod$coef[2] 
            recess_char[run,'Q20_tAfter_rho'] = Q20_tAfter_spearmans$estimate
            recess_char[run,'Q20_tAfter_pval'] = Q20_tAfter_spearmans$p.value 
            recess_char[run,'Q30_tAfter_slp'] = Q30_tAfter_mod$coef[2] 
            recess_char[run,'Q30_tAfter_rho'] = Q30_tAfter_spearmans$estimate
            recess_char[run,'Q30_tAfter_pval'] = Q30_tAfter_spearmans$p.value 
            recess_char[run,'Q40_tAfter_slp'] = Q40_tAfter_mod$coef[2] 
            recess_char[run,'Q40_tAfter_rho'] = Q40_tAfter_spearmans$estimate
            recess_char[run,'Q40_tAfter_pval'] = Q40_tAfter_spearmans$p.value 
            recess_char[run,'Q50_tAfter_slp'] = Q50_tAfter_mod$coef[2] 
            recess_char[run,'Q50_tAfter_rho'] = Q50_tAfter_spearmans$estimate
            recess_char[run,'Q50_tAfter_pval'] = Q50_tAfter_spearmans$p.value 
            recess_char[run,'Q60_tAfter_slp'] = Q60_tAfter_mod$coef[2] 
            recess_char[run,'Q60_tAfter_rho'] = Q60_tAfter_spearmans$estimate
            recess_char[run,'Q60_tAfter_pval'] = Q60_tAfter_spearmans$p.value 
            recess_char[run,'Q70_tAfter_slp'] = Q70_tAfter_mod$coef[2] 
            recess_char[run,'Q70_tAfter_rho'] = Q70_tAfter_spearmans$estimate
            recess_char[run,'Q70_tAfter_pval'] = Q70_tAfter_spearmans$p.value 
            recess_char[run,'Q80_tAfter_slp'] = Q80_tAfter_mod$coef[2] 
            recess_char[run,'Q80_tAfter_rho'] = Q80_tAfter_spearmans$estimate
            recess_char[run,'Q80_tAfter_pval'] = Q80_tAfter_spearmans$p.value 
            recess_char[run,'Q90_tAfter_slp'] = Q90_tAfter_mod$coef[2] 
            recess_char[run,'Q90_tAfter_rho'] = Q90_tAfter_spearmans$estimate
            recess_char[run,'Q90_tAfter_pval'] = Q90_tAfter_spearmans$p.value 
            recess_char[run,'Q95_tAfter_slp'] = Q95_tAfter_mod$coef[2] 
            recess_char[run,'Q95_tAfter_rho'] = Q95_tAfter_spearmans$estimate
            recess_char[run,'Q95_tAfter_pval'] = Q95_tAfter_spearmans$p.value 
            
            
            # same but with Q_tBefore_ratio
            nona_years = which(!is.na(Q_tBefore_ratio_byYear[recess_char[run, 'D95_med_date'], ]))
            na_years = which(is.na(Q_tBefore_ratio_byYear[recess_char[run, 'D95_med_date'], ]))
            these_years = years_to_use[nona_years]
            Q5_tBefore = as.numeric(Q_tBefore_ratio_byYear[recess_char[run, 'D5_med_date'], nona_years])
            Q10_tBefore = as.numeric(Q_tBefore_ratio_byYear[recess_char[run, 'D10_med_date'], nona_years])
            Q20_tBefore = as.numeric(Q_tBefore_ratio_byYear[recess_char[run, 'D20_med_date'], nona_years])
            Q30_tBefore = as.numeric(Q_tBefore_ratio_byYear[recess_char[run, 'D30_med_date'], nona_years])
            Q40_tBefore = as.numeric(Q_tBefore_ratio_byYear[recess_char[run, 'D40_med_date'], nona_years])
            Q50_tBefore = as.numeric(Q_tBefore_ratio_byYear[recess_char[run, 'D50_med_date'], nona_years])
            Q60_tBefore = as.numeric(Q_tBefore_ratio_byYear[recess_char[run, 'D60_med_date'], nona_years])
            Q70_tBefore = as.numeric(Q_tBefore_ratio_byYear[recess_char[run, 'D70_med_date'], nona_years])
            Q80_tBefore = as.numeric(Q_tBefore_ratio_byYear[recess_char[run, 'D80_med_date'], nona_years])
            Q90_tBefore = as.numeric(Q_tBefore_ratio_byYear[recess_char[run, 'D90_med_date'], nona_years])
            Q95_tBefore = as.numeric(Q_tBefore_ratio_byYear[recess_char[run, 'D95_med_date'], nona_years])
            
            Q5_tBefore_ratio_mod = zyp.sen(Q5_tBefore ~ these_years)
            Q10_tBefore_ratio_mod = zyp.sen(Q10_tBefore ~ these_years)
            Q20_tBefore_ratio_mod = zyp.sen(Q20_tBefore ~ these_years)
            Q30_tBefore_ratio_mod = zyp.sen(Q30_tBefore ~ these_years)
            Q40_tBefore_ratio_mod = zyp.sen(Q40_tBefore ~ these_years)
            Q50_tBefore_ratio_mod = zyp.sen(Q50_tBefore ~ these_years)
            Q60_tBefore_ratio_mod = zyp.sen(Q60_tBefore ~ these_years)
            Q70_tBefore_ratio_mod = zyp.sen(Q70_tBefore ~ these_years)
            Q80_tBefore_ratio_mod = zyp.sen(Q80_tBefore ~ these_years)
            Q90_tBefore_ratio_mod = zyp.sen(Q90_tBefore ~ these_years)
            Q95_tBefore_ratio_mod = zyp.sen(Q95_tBefore ~ these_years)
            
            Q5_tBefore_ratio_spearmans = cor.test(these_years, Q5_tBefore, method='spearman')
            Q10_tBefore_ratio_spearmans = cor.test(these_years, Q10_tBefore, method='spearman')
            Q20_tBefore_ratio_spearmans = cor.test(these_years, Q20_tBefore, method='spearman')
            Q30_tBefore_ratio_spearmans = cor.test(these_years, Q30_tBefore, method='spearman')
            Q40_tBefore_ratio_spearmans = cor.test(these_years, Q40_tBefore, method='spearman')
            Q50_tBefore_ratio_spearmans = cor.test(these_years, Q50_tBefore, method='spearman')
            Q60_tBefore_ratio_spearmans = cor.test(these_years, Q60_tBefore, method='spearman')
            Q70_tBefore_ratio_spearmans = cor.test(these_years, Q70_tBefore, method='spearman')
            Q80_tBefore_ratio_spearmans = cor.test(these_years, Q80_tBefore, method='spearman')
            Q90_tBefore_ratio_spearmans = cor.test(these_years, Q90_tBefore, method='spearman')
            Q95_tBefore_ratio_spearmans = cor.test(these_years, Q95_tBefore, method='spearman')
            
            recess_char[run,'Q5_tBefore_ratio_slp'] = Q5_tBefore_ratio_mod$coef[2] 
            recess_char[run,'Q5_tBefore_ratio_rho'] = Q5_tBefore_ratio_spearmans$estimate
            recess_char[run,'Q5_tBefore_ratio_pval'] = Q5_tBefore_ratio_spearmans$p.value 
            recess_char[run,'Q10_tBefore_ratio_slp'] = Q10_tBefore_ratio_mod$coef[2] 
            recess_char[run,'Q10_tBefore_ratio_rho'] = Q10_tBefore_ratio_spearmans$estimate
            recess_char[run,'Q10_tBefore_ratio_pval'] = Q10_tBefore_ratio_spearmans$p.value 
            recess_char[run,'Q20_tBefore_ratio_slp'] = Q20_tBefore_ratio_mod$coef[2] 
            recess_char[run,'Q20_tBefore_ratio_rho'] = Q20_tBefore_ratio_spearmans$estimate
            recess_char[run,'Q20_tBefore_ratio_pval'] = Q20_tBefore_ratio_spearmans$p.value 
            recess_char[run,'Q30_tBefore_ratio_slp'] = Q30_tBefore_ratio_mod$coef[2] 
            recess_char[run,'Q30_tBefore_ratio_rho'] = Q30_tBefore_ratio_spearmans$estimate
            recess_char[run,'Q30_tBefore_ratio_pval'] = Q30_tBefore_ratio_spearmans$p.value 
            recess_char[run,'Q40_tBefore_ratio_slp'] = Q40_tBefore_ratio_mod$coef[2] 
            recess_char[run,'Q40_tBefore_ratio_rho'] = Q40_tBefore_ratio_spearmans$estimate
            recess_char[run,'Q40_tBefore_ratio_pval'] = Q40_tBefore_ratio_spearmans$p.value 
            recess_char[run,'Q50_tBefore_ratio_slp'] = Q50_tBefore_ratio_mod$coef[2] 
            recess_char[run,'Q50_tBefore_ratio_rho'] = Q50_tBefore_ratio_spearmans$estimate
            recess_char[run,'Q50_tBefore_ratio_pval'] = Q50_tBefore_ratio_spearmans$p.value 
            recess_char[run,'Q60_tBefore_ratio_slp'] = Q60_tBefore_ratio_mod$coef[2] 
            recess_char[run,'Q60_tBefore_ratio_rho'] = Q60_tBefore_ratio_spearmans$estimate
            recess_char[run,'Q60_tBefore_ratio_pval'] = Q60_tBefore_ratio_spearmans$p.value 
            recess_char[run,'Q70_tBefore_ratio_slp'] = Q70_tBefore_ratio_mod$coef[2] 
            recess_char[run,'Q70_tBefore_ratio_rho'] = Q70_tBefore_ratio_spearmans$estimate
            recess_char[run,'Q70_tBefore_ratio_pval'] = Q70_tBefore_ratio_spearmans$p.value 
            recess_char[run,'Q80_tBefore_ratio_slp'] = Q80_tBefore_ratio_mod$coef[2] 
            recess_char[run,'Q80_tBefore_ratio_rho'] = Q80_tBefore_ratio_spearmans$estimate
            recess_char[run,'Q80_tBefore_ratio_pval'] = Q80_tBefore_ratio_spearmans$p.value 
            recess_char[run,'Q90_tBefore_ratio_slp'] = Q90_tBefore_ratio_mod$coef[2] 
            recess_char[run,'Q90_tBefore_ratio_rho'] = Q90_tBefore_ratio_spearmans$estimate
            recess_char[run,'Q90_tBefore_ratio_pval'] = Q90_tBefore_ratio_spearmans$p.value 
            recess_char[run,'Q95_tBefore_ratio_slp'] = Q95_tBefore_ratio_mod$coef[2] 
            recess_char[run,'Q95_tBefore_ratio_rho'] = Q95_tBefore_ratio_spearmans$estimate
            recess_char[run,'Q95_tBefore_ratio_pval'] = Q95_tBefore_ratio_spearmans$p.value 
            
            
            # same but with D##s
            D5_day_mod = zyp.sen(D5_day ~ year, subset(julday_max, !is.na(julday_max$D5_day)))
            D10_day_mod = zyp.sen(D10_day ~ year, subset(julday_max, !is.na(julday_max$D10_day)))
            D20_day_mod = zyp.sen(D20_day ~ year, subset(julday_max, !is.na(julday_max$D20_day)))
            D30_day_mod = zyp.sen(D30_day ~ year, subset(julday_max, !is.na(julday_max$D30_day)))
            D40_day_mod = zyp.sen(D40_day ~ year, subset(julday_max, !is.na(julday_max$D40_day)))
            D50_day_mod = zyp.sen(D50_day ~ year, subset(julday_max, !is.na(julday_max$D50_day)))
            D60_day_mod = zyp.sen(D60_day ~ year, subset(julday_max, !is.na(julday_max$D60_day)))
            D70_day_mod = zyp.sen(D70_day ~ year, subset(julday_max, !is.na(julday_max$D70_day)))
            D80_day_mod = zyp.sen(D80_day ~ year, subset(julday_max, !is.na(julday_max$D80_day)))
            D90_day_mod = zyp.sen(D90_day ~ year, subset(julday_max, !is.na(julday_max$D90_day)))
            D95_day_mod = zyp.sen(D95_day ~ year, subset(julday_max, !is.na(julday_max$D95_day)))
            
            D5_day_spearmans = cor.test(julday_max$year, julday_max$D5_day, method='spearman')
            D10_day_spearmans = cor.test(julday_max$year, julday_max$D10_day, method='spearman')
            D20_day_spearmans = cor.test(julday_max$year, julday_max$D20_day, method='spearman')
            D30_day_spearmans = cor.test(julday_max$year, julday_max$D30_day, method='spearman')
            D40_day_spearmans = cor.test(julday_max$year, julday_max$D40_day, method='spearman')
            D50_day_spearmans = cor.test(julday_max$year, julday_max$D50_day, method='spearman')
            D60_day_spearmans = cor.test(julday_max$year, julday_max$D60_day, method='spearman')
            D70_day_spearmans = cor.test(julday_max$year, julday_max$D70_day, method='spearman')
            D80_day_spearmans = cor.test(julday_max$year, julday_max$D80_day, method='spearman')
            D90_day_spearmans = cor.test(julday_max$year, julday_max$D90_day, method='spearman')
            D95_day_spearmans = cor.test(julday_max$year, julday_max$D95_day, method='spearman')
            
            recess_char[run,'D5_day_slp'] = D5_day_mod$coef[2] 
            recess_char[run,'D5_day_rho'] = D5_day_spearmans$estimate
            recess_char[run,'D5_day_pval'] = D5_day_spearmans$p.value 
            recess_char[run,'D10_day_slp'] = D10_day_mod$coef[2] 
            recess_char[run,'D10_day_rho'] = D10_day_spearmans$estimate
            recess_char[run,'D10_day_pval'] = D10_day_spearmans$p.value 
            recess_char[run,'D20_day_slp'] = D20_day_mod$coef[2] 
            recess_char[run,'D20_day_rho'] = D20_day_spearmans$estimate
            recess_char[run,'D20_day_pval'] = D20_day_spearmans$p.value 
            recess_char[run,'D30_day_slp'] = D30_day_mod$coef[2] 
            recess_char[run,'D30_day_rho'] = D30_day_spearmans$estimate
            recess_char[run,'D30_day_pval'] = D30_day_spearmans$p.value 
            recess_char[run,'D40_day_slp'] = D40_day_mod$coef[2] 
            recess_char[run,'D40_day_rho'] = D40_day_spearmans$estimate
            recess_char[run,'D40_day_pval'] = D40_day_spearmans$p.value 
            recess_char[run,'D50_day_slp'] = D50_day_mod$coef[2] 
            recess_char[run,'D50_day_rho'] = D50_day_spearmans$estimate
            recess_char[run,'D50_day_pval'] = D50_day_spearmans$p.value 
            recess_char[run,'D60_day_slp'] = D60_day_mod$coef[2] 
            recess_char[run,'D60_day_rho'] = D60_day_spearmans$estimate
            recess_char[run,'D60_day_pval'] = D60_day_spearmans$p.value 
            recess_char[run,'D70_day_slp'] = D70_day_mod$coef[2] 
            recess_char[run,'D70_day_rho'] = D70_day_spearmans$estimate
            recess_char[run,'D70_day_pval'] = D70_day_spearmans$p.value 
            recess_char[run,'D80_day_slp'] = D80_day_mod$coef[2] 
            recess_char[run,'D80_day_rho'] = D80_day_spearmans$estimate
            recess_char[run,'D80_day_pval'] = D80_day_spearmans$p.value 
            recess_char[run,'D90_day_slp'] = D90_day_mod$coef[2] 
            recess_char[run,'D90_day_rho'] = D90_day_spearmans$estimate
            recess_char[run,'D90_day_pval'] = D90_day_spearmans$p.value 
            recess_char[run,'D95_day_slp'] = D95_day_mod$coef[2] 
            recess_char[run,'D95_day_rho'] = D95_day_spearmans$estimate
            recess_char[run,'D95_day_pval'] = D95_day_spearmans$p.value 
            
            # same but with 9yr smoothing
            smth_yrs = julday_max$year[5:(nrow(julday_max)-4)]
            D50_smth_med = NULL
            for(smth_rws in (9:nrow(julday_max)))	{
              D50_smth_med = c(D50_smth_med, median(julday_max$D50_day[(smth_rws-8):smth_rws], na.rm=TRUE))
            }
            nona_smooths = which(!is.na(D50_smth_med))
            
            recess_char[run,'D50_day_smth_slp'] = zyp.sen(D50_smth_med ~ smth_yrs)$coef[2] 
            
            D50_day_smth_spearmans = cor.test(smth_yrs, D50_smth_med, method='spearman')
            recess_char[run,'D50_day_smth_rho'] = D50_day_smth_spearmans$estimate
            recess_char[run,'D50_day_smth_pval'] = D50_day_smth_spearmans$p.value 
            
            
            
            
            # same but with D##s for RnMlt
            D5_day_mod = zyp.sen(D5_day ~ year, subset(julrnmlt_max, !is.na(julrnmlt_max$D5_day)))
            D10_day_mod = zyp.sen(D10_day ~ year, subset(julrnmlt_max, !is.na(julrnmlt_max$D10_day)))
            D20_day_mod = zyp.sen(D20_day ~ year, subset(julrnmlt_max, !is.na(julrnmlt_max$D20_day)))
            D30_day_mod = zyp.sen(D30_day ~ year, subset(julrnmlt_max, !is.na(julrnmlt_max$D30_day)))
            D40_day_mod = zyp.sen(D40_day ~ year, subset(julrnmlt_max, !is.na(julrnmlt_max$D40_day)))
            D50_day_mod = zyp.sen(D50_day ~ year, subset(julrnmlt_max, !is.na(julrnmlt_max$D50_day)))
            D60_day_mod = zyp.sen(D60_day ~ year, subset(julrnmlt_max, !is.na(julrnmlt_max$D60_day)))
            D70_day_mod = zyp.sen(D70_day ~ year, subset(julrnmlt_max, !is.na(julrnmlt_max$D70_day)))
            D80_day_mod = zyp.sen(D80_day ~ year, subset(julrnmlt_max, !is.na(julrnmlt_max$D80_day)))
            D90_day_mod = zyp.sen(D90_day ~ year, subset(julrnmlt_max, !is.na(julrnmlt_max$D90_day)))
            D95_day_mod = zyp.sen(D95_day ~ year, subset(julrnmlt_max, !is.na(julrnmlt_max$D95_day)))
            
            D5_day_spearmans = cor.test(julrnmlt_max$year, julrnmlt_max$D5_day, method='spearman')
            D10_day_spearmans = cor.test(julrnmlt_max$year, julrnmlt_max$D10_day, method='spearman')
            D20_day_spearmans = cor.test(julrnmlt_max$year, julrnmlt_max$D20_day, method='spearman')
            D30_day_spearmans = cor.test(julrnmlt_max$year, julrnmlt_max$D30_day, method='spearman')
            D40_day_spearmans = cor.test(julrnmlt_max$year, julrnmlt_max$D40_day, method='spearman')
            D50_day_spearmans = cor.test(julrnmlt_max$year, julrnmlt_max$D50_day, method='spearman')
            D60_day_spearmans = cor.test(julrnmlt_max$year, julrnmlt_max$D60_day, method='spearman')
            D70_day_spearmans = cor.test(julrnmlt_max$year, julrnmlt_max$D70_day, method='spearman')
            D80_day_spearmans = cor.test(julrnmlt_max$year, julrnmlt_max$D80_day, method='spearman')
            D90_day_spearmans = cor.test(julrnmlt_max$year, julrnmlt_max$D90_day, method='spearman')
            D95_day_spearmans = cor.test(julrnmlt_max$year, julrnmlt_max$D95_day, method='spearman')
            
            recess_char[run,'D5_rnmlt_slp'] = D5_day_mod$coef[2] 
            recess_char[run,'D5_rnmlt_rho'] = D5_day_spearmans$estimate
            recess_char[run,'D5_rnmlt_pval'] = D5_day_spearmans$p.value 
            recess_char[run,'D10_rnmlt_slp'] = D10_day_mod$coef[2] 
            recess_char[run,'D10_rnmlt_rho'] = D10_day_spearmans$estimate
            recess_char[run,'D10_rnmlt_pval'] = D10_day_spearmans$p.value 
            recess_char[run,'D20_rnmlt_slp'] = D20_day_mod$coef[2] 
            recess_char[run,'D20_rnmlt_rho'] = D20_day_spearmans$estimate
            recess_char[run,'D20_rnmlt_pval'] = D20_day_spearmans$p.value 
            recess_char[run,'D30_rnmlt_slp'] = D30_day_mod$coef[2] 
            recess_char[run,'D30_rnmlt_rho'] = D30_day_spearmans$estimate
            recess_char[run,'D30_rnmlt_pval'] = D30_day_spearmans$p.value 
            recess_char[run,'D40_rnmlt_slp'] = D40_day_mod$coef[2] 
            recess_char[run,'D40_rnmlt_rho'] = D40_day_spearmans$estimate
            recess_char[run,'D40_rnmlt_pval'] = D40_day_spearmans$p.value 
            recess_char[run,'D50_rnmlt_slp'] = D50_day_mod$coef[2] 
            recess_char[run,'D50_rnmlt_rho'] = D50_day_spearmans$estimate
            recess_char[run,'D50_rnmlt_pval'] = D50_day_spearmans$p.value 
            recess_char[run,'D60_rnmlt_slp'] = D60_day_mod$coef[2] 
            recess_char[run,'D60_rnmlt_rho'] = D60_day_spearmans$estimate
            recess_char[run,'D60_rnmlt_pval'] = D60_day_spearmans$p.value 
            recess_char[run,'D70_rnmlt_slp'] = D70_day_mod$coef[2] 
            recess_char[run,'D70_rnmlt_rho'] = D70_day_spearmans$estimate
            recess_char[run,'D70_rnmlt_pval'] = D70_day_spearmans$p.value 
            recess_char[run,'D80_rnmlt_slp'] = D80_day_mod$coef[2] 
            recess_char[run,'D80_rnmlt_rho'] = D80_day_spearmans$estimate
            recess_char[run,'D80_rnmlt_pval'] = D80_day_spearmans$p.value 
            recess_char[run,'D90_rnmlt_slp'] = D90_day_mod$coef[2] 
            recess_char[run,'D90_rnmlt_rho'] = D90_day_spearmans$estimate
            recess_char[run,'D90_rnmlt_pval'] = D90_day_spearmans$p.value 
            recess_char[run,'D95_rnmlt_slp'] = D95_day_mod$coef[2] 
            recess_char[run,'D95_rnmlt_rho'] = D95_day_spearmans$estimate
            recess_char[run,'D95_rnmlt_pval'] = D95_day_spearmans$p.value 
            
            
            
            # same but with D##s for RnMlt given a time lag
            D50_day_mod_l = zyp.sen(D50_day_l ~ year, subset(julrnmlt_max, !is.na(julrnmlt_max$D50_day_l)))
            
            julrnmlt_max[DFI_byYear_row, 'D50_day_l'] = which(daymet_thisyear_lagTot$cumsum_rnmlt > rnmlt_year_50_l)[1]
            
            D50_day_spearmans_l = cor.test(julrnmlt_max$year, julrnmlt_max$D50_day_l, method='spearman')
            
            recess_char[run,'D50_rnmlt_lag_slp'] = D50_day_mod_l$coef[2] 
            recess_char[run,'D50_rnmlt_lag_rho'] = D50_day_spearmans_l$estimate
            recess_char[run,'D50_rnmlt_lag_pval'] = D50_day_spearmans_l$p.value 
            
            
            
            # avg date of D##
            recess_char[run, 'D5_med_date'] = median(julday_max$D5_day, na.rm=TRUE)
            recess_char[run, 'D10_med_date'] = median(julday_max$D10_day, na.rm=TRUE)
            recess_char[run, 'D20_med_date'] = median(julday_max$D20_day, na.rm=TRUE)
            recess_char[run, 'D30_med_date'] = median(julday_max$D30_day, na.rm=TRUE)
            recess_char[run, 'D40_med_date'] = median(julday_max$D40_day, na.rm=TRUE)
            recess_char[run, 'D50_med_date'] = median(julday_max$D50_day, na.rm=TRUE)
            recess_char[run, 'D60_med_date'] = median(julday_max$D60_day, na.rm=TRUE)
            recess_char[run, 'D70_med_date'] = median(julday_max$D70_day, na.rm=TRUE)
            recess_char[run, 'D80_med_date'] = median(julday_max$D80_day, na.rm=TRUE)
            recess_char[run, 'D90_med_date'] = median(julday_max$D90_day, na.rm=TRUE)
            recess_char[run, 'D95_med_date'] = median(julday_max$D95_day, na.rm=TRUE)
            
            
            
            # changes in cumulative rain and snowmelt by avg date of D##
            nona_years = which(!is.na(RnMltfracs_byYear[recess_char[run, 'D95_med_date'], ]))
            na_years = which(is.na(RnMltfracs_byYear[recess_char[run, 'D95_med_date'], ]))
            these_years = years_to_use[nona_years]
            D5_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D5_med_date'], nona_years])
            D10_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D10_med_date'], nona_years])
            D20_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D20_med_date'], nona_years])
            D30_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D30_med_date'], nona_years])
            D40_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D40_med_date'], nona_years])
            D50_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D50_med_date'], nona_years])
            D60_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D60_med_date'], nona_years])
            D70_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D70_med_date'], nona_years])
            D80_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D80_med_date'], nona_years])
            D90_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D90_med_date'], nona_years])
            D95_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D95_med_date'], nona_years])
            
            RnMlt_by_D5_spearmans = cor.test(these_years, D5_rnmlt_days, method='spearman')
            RnMlt_by_D10_spearmans = cor.test(these_years, D10_rnmlt_days, method='spearman')
            RnMlt_by_D20_spearmans = cor.test(these_years, D20_rnmlt_days, method='spearman')
            RnMlt_by_D30_spearmans = cor.test(these_years, D30_rnmlt_days, method='spearman')
            RnMlt_by_D40_spearmans = cor.test(these_years, D40_rnmlt_days, method='spearman')
            RnMlt_by_D50_spearmans = cor.test(these_years, D50_rnmlt_days, method='spearman')
            RnMlt_by_D60_spearmans = cor.test(these_years, D60_rnmlt_days, method='spearman')
            RnMlt_by_D70_spearmans = cor.test(these_years, D70_rnmlt_days, method='spearman')
            RnMlt_by_D80_spearmans = cor.test(these_years, D80_rnmlt_days, method='spearman')
            RnMlt_by_D90_spearmans = cor.test(these_years, D90_rnmlt_days, method='spearman')
            RnMlt_by_D95_spearmans = cor.test(these_years, D95_rnmlt_days, method='spearman')
            
            recess_char[run,'RnMlt_by_D5_slp'] = zyp.sen(D5_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_by_D5_rho'] = RnMlt_by_D5_spearmans$estimate 
            recess_char[run,'RnMlt_by_D5_pval'] = RnMlt_by_D5_spearmans$p.value 
            recess_char[run,'RnMlt_by_D10_slp'] = zyp.sen(D10_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_by_D10_rho'] = RnMlt_by_D10_spearmans$estimate 
            recess_char[run,'RnMlt_by_D10_pval'] = RnMlt_by_D10_spearmans$p.value 
            recess_char[run,'RnMlt_by_D20_slp'] = zyp.sen(D20_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_by_D20_rho'] = RnMlt_by_D20_spearmans$estimate 
            recess_char[run,'RnMlt_by_D20_pval'] = RnMlt_by_D20_spearmans$p.value 
            recess_char[run,'RnMlt_by_D30_slp'] = zyp.sen(D30_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_by_D30_rho'] = RnMlt_by_D30_spearmans$estimate 
            recess_char[run,'RnMlt_by_D30_pval'] = RnMlt_by_D30_spearmans$p.value 
            recess_char[run,'RnMlt_by_D40_slp'] = zyp.sen(D40_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_by_D40_rho'] = RnMlt_by_D40_spearmans$estimate 
            recess_char[run,'RnMlt_by_D40_pval'] = RnMlt_by_D40_spearmans$p.value 
            recess_char[run,'RnMlt_by_D50_slp'] = zyp.sen(D50_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_by_D50_rho'] = RnMlt_by_D50_spearmans$estimate 
            recess_char[run,'RnMlt_by_D50_pval'] = RnMlt_by_D50_spearmans$p.value 
            recess_char[run,'RnMlt_by_D60_slp'] = zyp.sen(D60_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_by_D60_rho'] = RnMlt_by_D60_spearmans$estimate 
            recess_char[run,'RnMlt_by_D60_pval'] = RnMlt_by_D60_spearmans$p.value 
            recess_char[run,'RnMlt_by_D70_slp'] = zyp.sen(D70_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_by_D70_rho'] = RnMlt_by_D70_spearmans$estimate 
            recess_char[run,'RnMlt_by_D70_pval'] = RnMlt_by_D70_spearmans$p.value 
            recess_char[run,'RnMlt_by_D80_slp'] = zyp.sen(D80_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_by_D80_rho'] = RnMlt_by_D80_spearmans$estimate 
            recess_char[run,'RnMlt_by_D80_pval'] = RnMlt_by_D80_spearmans$p.value 
            recess_char[run,'RnMlt_by_D90_slp'] = zyp.sen(D90_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_by_D90_rho'] = RnMlt_by_D90_spearmans$estimate 
            recess_char[run,'RnMlt_by_D90_pval'] = RnMlt_by_D90_spearmans$p.value 
            recess_char[run,'RnMlt_by_D95_slp'] = zyp.sen(D95_rnmlt_days ~ these_years)$coef[2]
            recess_char[run,'RnMlt_by_D95_rho'] = RnMlt_by_D95_spearmans$estimate 
            recess_char[run,'RnMlt_by_D95_pval'] = RnMlt_by_D95_spearmans$p.value 
            
            
            # same but with the time lagged rnmlt
            nona_years = which(!is.na(RnMltfracs_byYear_l[recess_char[run, 'D50_med_date'], ]))
            na_years = which(is.na(RnMltfracs_byYear_l[recess_char[run, 'D50_med_date'], ]))
            these_years = years_to_use[nona_years]
            D50_rnmlt_days_l = as.numeric(RnMltfracs_byYear_l[recess_char[run, 'D50_med_date'], nona_years])
            
            RnMlt_by_D50_spearmans_l = cor.test(these_years, D50_rnmlt_days_l, method='spearman')
            
            recess_char[run,'RnMlt_by_D50_lag_slp'] = zyp.sen(D50_rnmlt_days_l ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_by_D50_lag_rho'] = RnMlt_by_D50_spearmans_l$estimate 
            recess_char[run,'RnMlt_by_D50_lag_pval'] = RnMlt_by_D50_spearmans_l$p.value 
            
            
            # same but for days after
            D5_rnmlt_days_a = 1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D5_med_date'], nona_years])
            D10_rnmlt_days_a = 1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D10_med_date'], nona_years])
            D20_rnmlt_days_a = 1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D20_med_date'], nona_years])
            D30_rnmlt_days_a = 1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D30_med_date'], nona_years])
            D40_rnmlt_days_a = 1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D40_med_date'], nona_years])
            D50_rnmlt_days_a = 1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D50_med_date'], nona_years])
            D60_rnmlt_days_a = 1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D60_med_date'], nona_years])
            D70_rnmlt_days_a = 1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D70_med_date'], nona_years])
            D80_rnmlt_days_a = 1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D80_med_date'], nona_years])
            D90_rnmlt_days_a = 1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D90_med_date'], nona_years])
            D95_rnmlt_days_a = 1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D95_med_date'], nona_years])
            
            RnMlt_after_D5_spearmans_a = cor.test(these_years, D5_rnmlt_days_a, method='spearman')
            RnMlt_after_D10_spearmans_a = cor.test(these_years, D10_rnmlt_days_a, method='spearman')
            RnMlt_after_D20_spearmans_a = cor.test(these_years, D20_rnmlt_days_a, method='spearman')
            RnMlt_after_D30_spearmans_a = cor.test(these_years, D30_rnmlt_days_a, method='spearman')
            RnMlt_after_D40_spearmans_a = cor.test(these_years, D40_rnmlt_days_a, method='spearman')
            RnMlt_after_D50_spearmans_a = cor.test(these_years, D50_rnmlt_days_a, method='spearman')
            RnMlt_after_D60_spearmans_a = cor.test(these_years, D60_rnmlt_days_a, method='spearman')
            RnMlt_after_D70_spearmans_a = cor.test(these_years, D70_rnmlt_days_a, method='spearman')
            RnMlt_after_D80_spearmans_a = cor.test(these_years, D80_rnmlt_days_a, method='spearman')
            RnMlt_after_D90_spearmans_a = cor.test(these_years, D90_rnmlt_days_a, method='spearman')
            RnMlt_after_D95_spearmans_a = cor.test(these_years, D95_rnmlt_days_a, method='spearman')
            
            recess_char[run,'RnMlt_after_D5_slp'] = zyp.sen(D5_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_after_D5_rho'] = RnMlt_after_D5_spearmans_a$estimate 
            recess_char[run,'RnMlt_after_D5_pval'] = RnMlt_after_D5_spearmans_a$p.value 
            recess_char[run,'RnMlt_after_D10_slp'] = zyp.sen(D10_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_after_D10_rho'] = RnMlt_after_D10_spearmans_a$estimate 
            recess_char[run,'RnMlt_after_D10_pval'] = RnMlt_after_D10_spearmans_a$p.value 
            recess_char[run,'RnMlt_after_D20_slp'] = zyp.sen(D20_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_after_D20_rho'] = RnMlt_after_D20_spearmans_a$estimate 
            recess_char[run,'RnMlt_after_D20_pval'] = RnMlt_after_D20_spearmans_a$p.value 
            recess_char[run,'RnMlt_after_D30_slp'] = zyp.sen(D30_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_after_D30_rho'] = RnMlt_after_D30_spearmans_a$estimate 
            recess_char[run,'RnMlt_after_D30_pval'] = RnMlt_after_D30_spearmans_a$p.value 
            recess_char[run,'RnMlt_after_D40_slp'] = zyp.sen(D40_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_after_D40_rho'] = RnMlt_after_D40_spearmans_a$estimate 
            recess_char[run,'RnMlt_after_D40_pval'] = RnMlt_after_D40_spearmans_a$p.value 
            recess_char[run,'RnMlt_after_D50_slp'] = zyp.sen(D50_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_after_D50_rho'] = RnMlt_after_D50_spearmans_a$estimate 
            recess_char[run,'RnMlt_after_D50_pval'] = RnMlt_after_D50_spearmans_a$p.value 
            recess_char[run,'RnMlt_after_D60_slp'] = zyp.sen(D60_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_after_D60_rho'] = RnMlt_after_D60_spearmans_a$estimate 
            recess_char[run,'RnMlt_after_D60_pval'] = RnMlt_after_D60_spearmans_a$p.value 
            recess_char[run,'RnMlt_after_D70_slp'] = zyp.sen(D70_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_after_D70_rho'] = RnMlt_after_D70_spearmans_a$estimate 
            recess_char[run,'RnMlt_after_D70_pval'] = RnMlt_after_D70_spearmans_a$p.value 
            recess_char[run,'RnMlt_after_D80_slp'] = zyp.sen(D80_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_after_D80_rho'] = RnMlt_after_D80_spearmans_a$estimate 
            recess_char[run,'RnMlt_after_D80_pval'] = RnMlt_after_D80_spearmans_a$p.value 
            recess_char[run,'RnMlt_after_D90_slp'] = zyp.sen(D90_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_after_D90_rho'] = RnMlt_after_D90_spearmans_a$estimate 
            recess_char[run,'RnMlt_after_D90_pval'] = RnMlt_after_D90_spearmans_a$p.value 
            recess_char[run,'RnMlt_after_D95_slp'] = zyp.sen(D95_rnmlt_days_a ~ these_years)$coef[2]
            recess_char[run,'RnMlt_after_D95_rho'] = RnMlt_after_D95_spearmans_a$estimate 
            recess_char[run,'RnMlt_after_D95_pval'] = RnMlt_after_D95_spearmans_a$p.value 
            
            
            
            # same but with the time lagged rnmlt
            D50_rnmlt_days_a_l = 1 - as.numeric(RnMltfracs_byYear_l[recess_char[run, 'D50_med_date'], nona_years])
            RnMlt_after_D50_spearmans_a_l = cor.test(these_years, D50_rnmlt_days_a_l, method='spearman')
            
            recess_char[run,'RnMlt_after_D50_lag_slp'] = zyp.sen(D50_rnmlt_days_a_l ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_after_D50_lag_rho'] = RnMlt_after_D50_spearmans_a_l$estimate 
            recess_char[run,'RnMlt_after_D50_lag_pval'] = RnMlt_after_D50_spearmans_a_l$p.value 
            
            
            
            
            
            
            # changes in cumulative rain and snowmelt by avg date of D## in volume 
            nona_years = which(!is.na(RnMltfracs_byYear[recess_char[run, 'D95_med_date'], ]))
            na_years = which(is.na(RnMltfracs_byYear[recess_char[run, 'D95_med_date'], ]))
            these_years = years_to_use[nona_years]
            D5_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D5_med_date'], nona_years]) * RnMlt_byYear$annum[nona_years]
            D10_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D10_med_date'], nona_years]) * RnMlt_byYear$annum[nona_years]
            D20_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D20_med_date'], nona_years]) * RnMlt_byYear$annum[nona_years]
            D30_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D30_med_date'], nona_years]) * RnMlt_byYear$annum[nona_years]
            D40_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D40_med_date'], nona_years]) * RnMlt_byYear$annum[nona_years]
            D50_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D50_med_date'], nona_years]) * RnMlt_byYear$annum[nona_years]
            D60_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D60_med_date'], nona_years]) * RnMlt_byYear$annum[nona_years]
            D70_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D70_med_date'], nona_years]) * RnMlt_byYear$annum[nona_years]
            D80_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D80_med_date'], nona_years]) * RnMlt_byYear$annum[nona_years]
            D90_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D90_med_date'], nona_years]) * RnMlt_byYear$annum[nona_years]
            D95_rnmlt_days = as.numeric(RnMltfracs_byYear[recess_char[run, 'D95_med_date'], nona_years]) * RnMlt_byYear$annum[nona_years]
            
            RnMlt_by_D5_spearmans = cor.test(these_years, D5_rnmlt_days, method='spearman')
            RnMlt_by_D10_spearmans = cor.test(these_years, D10_rnmlt_days, method='spearman')
            RnMlt_by_D20_spearmans = cor.test(these_years, D20_rnmlt_days, method='spearman')
            RnMlt_by_D30_spearmans = cor.test(these_years, D30_rnmlt_days, method='spearman')
            RnMlt_by_D40_spearmans = cor.test(these_years, D40_rnmlt_days, method='spearman')
            RnMlt_by_D50_spearmans = cor.test(these_years, D50_rnmlt_days, method='spearman')
            RnMlt_by_D60_spearmans = cor.test(these_years, D60_rnmlt_days, method='spearman')
            RnMlt_by_D70_spearmans = cor.test(these_years, D70_rnmlt_days, method='spearman')
            RnMlt_by_D80_spearmans = cor.test(these_years, D80_rnmlt_days, method='spearman')
            RnMlt_by_D90_spearmans = cor.test(these_years, D90_rnmlt_days, method='spearman')
            RnMlt_by_D95_spearmans = cor.test(these_years, D95_rnmlt_days, method='spearman')
            
            recess_char[run,'RnMlt_vol_by_D5_slp'] = zyp.sen(D5_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_by_D5_rho'] = RnMlt_by_D5_spearmans$estimate 
            recess_char[run,'RnMlt_vol_by_D5_pval'] = RnMlt_by_D5_spearmans$p.value 
            recess_char[run,'RnMlt_vol_by_D10_slp'] = zyp.sen(D10_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_by_D10_rho'] = RnMlt_by_D10_spearmans$estimate 
            recess_char[run,'RnMlt_vol_by_D10_pval'] = RnMlt_by_D10_spearmans$p.value 
            recess_char[run,'RnMlt_vol_by_D20_slp'] = zyp.sen(D20_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_by_D20_rho'] = RnMlt_by_D20_spearmans$estimate 
            recess_char[run,'RnMlt_vol_by_D20_pval'] = RnMlt_by_D20_spearmans$p.value 
            recess_char[run,'RnMlt_vol_by_D30_slp'] = zyp.sen(D30_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_by_D30_rho'] = RnMlt_by_D30_spearmans$estimate 
            recess_char[run,'RnMlt_vol_by_D30_pval'] = RnMlt_by_D30_spearmans$p.value 
            recess_char[run,'RnMlt_vol_by_D40_slp'] = zyp.sen(D40_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_by_D40_rho'] = RnMlt_by_D40_spearmans$estimate 
            recess_char[run,'RnMlt_vol_by_D40_pval'] = RnMlt_by_D40_spearmans$p.value 
            recess_char[run,'RnMlt_vol_by_D50_slp'] = zyp.sen(D50_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_by_D50_rho'] = RnMlt_by_D50_spearmans$estimate 
            recess_char[run,'RnMlt_vol_by_D50_pval'] = RnMlt_by_D50_spearmans$p.value 
            recess_char[run,'RnMlt_vol_by_D60_slp'] = zyp.sen(D60_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_by_D60_rho'] = RnMlt_by_D60_spearmans$estimate 
            recess_char[run,'RnMlt_vol_by_D60_pval'] = RnMlt_by_D60_spearmans$p.value 
            recess_char[run,'RnMlt_vol_by_D70_slp'] = zyp.sen(D70_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_by_D70_rho'] = RnMlt_by_D70_spearmans$estimate 
            recess_char[run,'RnMlt_vol_by_D70_pval'] = RnMlt_by_D70_spearmans$p.value 
            recess_char[run,'RnMlt_vol_by_D80_slp'] = zyp.sen(D80_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_by_D80_rho'] = RnMlt_by_D80_spearmans$estimate 
            recess_char[run,'RnMlt_vol_by_D80_pval'] = RnMlt_by_D80_spearmans$p.value 
            recess_char[run,'RnMlt_vol_by_D90_slp'] = zyp.sen(D90_rnmlt_days ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_by_D90_rho'] = RnMlt_by_D90_spearmans$estimate 
            recess_char[run,'RnMlt_vol_by_D90_pval'] = RnMlt_by_D90_spearmans$p.value 
            recess_char[run,'RnMlt_vol_by_D95_slp'] = zyp.sen(D95_rnmlt_days ~ these_years)$coef[2]
            recess_char[run,'RnMlt_vol_by_D95_rho'] = RnMlt_by_D95_spearmans$estimate 
            recess_char[run,'RnMlt_vol_by_D95_pval'] = RnMlt_by_D95_spearmans$p.value 
            
            # same but for days after in volume
            D5_rnmlt_days_a = (1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D5_med_date'], nona_years])) * RnMlt_byYear$annum[nona_years]
            D10_rnmlt_days_a = (1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D10_med_date'], nona_years])) * RnMlt_byYear$annum[nona_years]
            D20_rnmlt_days_a = (1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D20_med_date'], nona_years])) * RnMlt_byYear$annum[nona_years]
            D30_rnmlt_days_a = (1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D30_med_date'], nona_years])) * RnMlt_byYear$annum[nona_years]
            D40_rnmlt_days_a = (1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D40_med_date'], nona_years])) * RnMlt_byYear$annum[nona_years]
            D50_rnmlt_days_a = (1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D50_med_date'], nona_years])) * RnMlt_byYear$annum[nona_years]
            D60_rnmlt_days_a = (1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D60_med_date'], nona_years])) * RnMlt_byYear$annum[nona_years]
            D70_rnmlt_days_a = (1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D70_med_date'], nona_years])) * RnMlt_byYear$annum[nona_years]
            D80_rnmlt_days_a = (1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D80_med_date'], nona_years])) * RnMlt_byYear$annum[nona_years]
            D90_rnmlt_days_a = (1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D90_med_date'], nona_years])) * RnMlt_byYear$annum[nona_years]
            D95_rnmlt_days_a = (1 - as.numeric(RnMltfracs_byYear[recess_char[run, 'D95_med_date'], nona_years])) * RnMlt_byYear$annum[nona_years]
            
            RnMlt_after_D5_spearmans_a = cor.test(these_years, D5_rnmlt_days_a, method='spearman')
            RnMlt_after_D10_spearmans_a = cor.test(these_years, D10_rnmlt_days_a, method='spearman')
            RnMlt_after_D20_spearmans_a = cor.test(these_years, D20_rnmlt_days_a, method='spearman')
            RnMlt_after_D30_spearmans_a = cor.test(these_years, D30_rnmlt_days_a, method='spearman')
            RnMlt_after_D40_spearmans_a = cor.test(these_years, D40_rnmlt_days_a, method='spearman')
            RnMlt_after_D50_spearmans_a = cor.test(these_years, D50_rnmlt_days_a, method='spearman')
            RnMlt_after_D60_spearmans_a = cor.test(these_years, D60_rnmlt_days_a, method='spearman')
            RnMlt_after_D70_spearmans_a = cor.test(these_years, D70_rnmlt_days_a, method='spearman')
            RnMlt_after_D80_spearmans_a = cor.test(these_years, D80_rnmlt_days_a, method='spearman')
            RnMlt_after_D90_spearmans_a = cor.test(these_years, D90_rnmlt_days_a, method='spearman')
            RnMlt_after_D95_spearmans_a = cor.test(these_years, D95_rnmlt_days_a, method='spearman')
            
            recess_char[run,'RnMlt_vol_after_D5_slp'] = zyp.sen(D5_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_after_D5_rho'] = RnMlt_after_D5_spearmans_a$estimate 
            recess_char[run,'RnMlt_vol_after_D5_pval'] = RnMlt_after_D5_spearmans_a$p.value 
            recess_char[run,'RnMlt_vol_after_D10_slp'] = zyp.sen(D10_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_after_D10_rho'] = RnMlt_after_D10_spearmans_a$estimate 
            recess_char[run,'RnMlt_vol_after_D10_pval'] = RnMlt_after_D10_spearmans_a$p.value 
            recess_char[run,'RnMlt_vol_after_D20_slp'] = zyp.sen(D20_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_after_D20_rho'] = RnMlt_after_D20_spearmans_a$estimate 
            recess_char[run,'RnMlt_vol_after_D20_pval'] = RnMlt_after_D20_spearmans_a$p.value 
            recess_char[run,'RnMlt_vol_after_D30_slp'] = zyp.sen(D30_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_after_D30_rho'] = RnMlt_after_D30_spearmans_a$estimate 
            recess_char[run,'RnMlt_vol_after_D30_pval'] = RnMlt_after_D30_spearmans_a$p.value 
            recess_char[run,'RnMlt_vol_after_D40_slp'] = zyp.sen(D40_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_after_D40_rho'] = RnMlt_after_D40_spearmans_a$estimate 
            recess_char[run,'RnMlt_vol_after_D40_pval'] = RnMlt_after_D40_spearmans_a$p.value 
            recess_char[run,'RnMlt_vol_after_D50_slp'] = zyp.sen(D50_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_after_D50_rho'] = RnMlt_after_D50_spearmans_a$estimate 
            recess_char[run,'RnMlt_vol_after_D50_pval'] = RnMlt_after_D50_spearmans_a$p.value 
            recess_char[run,'RnMlt_vol_after_D60_slp'] = zyp.sen(D60_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_after_D60_rho'] = RnMlt_after_D60_spearmans_a$estimate 
            recess_char[run,'RnMlt_vol_after_D60_pval'] = RnMlt_after_D60_spearmans_a$p.value 
            recess_char[run,'RnMlt_vol_after_D70_slp'] = zyp.sen(D70_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_after_D70_rho'] = RnMlt_after_D70_spearmans_a$estimate 
            recess_char[run,'RnMlt_vol_after_D70_pval'] = RnMlt_after_D70_spearmans_a$p.value 
            recess_char[run,'RnMlt_vol_after_D80_slp'] = zyp.sen(D80_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_after_D80_rho'] = RnMlt_after_D80_spearmans_a$estimate 
            recess_char[run,'RnMlt_vol_after_D80_pval'] = RnMlt_after_D80_spearmans_a$p.value 
            recess_char[run,'RnMlt_vol_after_D90_slp'] = zyp.sen(D90_rnmlt_days_a ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_after_D90_rho'] = RnMlt_after_D90_spearmans_a$estimate 
            recess_char[run,'RnMlt_vol_after_D90_pval'] = RnMlt_after_D90_spearmans_a$p.value 
            recess_char[run,'RnMlt_vol_after_D95_slp'] = zyp.sen(D95_rnmlt_days_a ~ these_years)$coef[2]
            recess_char[run,'RnMlt_vol_after_D95_rho'] = RnMlt_after_D95_spearmans_a$estimate 
            recess_char[run,'RnMlt_vol_after_D95_pval'] = RnMlt_after_D95_spearmans_a$p.value 
            
            
            
            
            # same but with the time lagged rnmlt
            D50_rnmlt_days_l = as.numeric(RnMltfracs_byYear_l[recess_char[run, 'D50_med_date'], nona_years])  *
              RnMlt_byYear$annum_lag[nona_years]
            
            RnMlt_by_D50_spearmans_l = cor.test(these_years, D50_rnmlt_days_l, method='spearman')
            
            recess_char[run,'RnMlt_vol_by_D50_lag_slp'] = zyp.sen(D50_rnmlt_days_l ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_by_D50_lag_rho'] = RnMlt_by_D50_spearmans_l$estimate 
            recess_char[run,'RnMlt_vol_by_D50_lag_pval'] = RnMlt_by_D50_spearmans_l$p.value 
            
            
            D50_rnmlt_days_a_l = (1 - as.numeric(RnMltfracs_byYear_l[recess_char[run, 'D50_med_date'], nona_years]))  *
              RnMlt_byYear$annum_lag[nona_years]
            
            RnMlt_by_D50_spearmans_a_l = cor.test(these_years, D50_rnmlt_days_a_l, method='spearman')
            
            recess_char[run,'RnMlt_vol_after_D50_lag_slp'] = zyp.sen(D50_rnmlt_days_a_l ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_after_D50_lag_rho'] = RnMlt_by_D50_spearmans_a_l$estimate 
            recess_char[run,'RnMlt_vol_after_D50_lag_pval'] = RnMlt_by_D50_spearmans_a_l$p.value 
            
            
            # now to look at trends in the optimal lag
            RnMlt_opt_lag = as.numeric(RnMlt_byYear$opt_lag[nona_years])
            RnMlt_opt_lag_spearmans_l = cor.test(these_years, RnMlt_opt_lag, method='spearman')
            
            recess_char[run,'RnMlt_opt_lag_med_num_days'] = median(RnMlt_opt_lag)
            recess_char[run,'RnMlt_opt_lag_slp'] = zyp.sen(RnMlt_opt_lag ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_opt_lag_rho'] = RnMlt_by_D50_spearmans_l$estimate 
            recess_char[run,'RnMlt_opt_lag_pval'] = RnMlt_by_D50_spearmans_l$p.value 
            
            
            
            # same.... ugh... but now with a time lag aproximated by the difference between average med date of D50 rain+snowmelt and D50 Q
            D50_rnmlt_days_shft = as.numeric(RnMltfracs_byYear_shft[recess_char[run, 'D50_med_date'], nona_years])
            RnMlt_by_D50_spearmans_shft = cor.test(these_years, D50_rnmlt_days_shft, method='spearman')
            recess_char[run,'RnMlt_by_D50_shft_slp'] = zyp.sen(D50_rnmlt_days_shft ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_by_D50_shft_rho'] = RnMlt_by_D50_spearmans_shft$estimate 
            recess_char[run,'RnMlt_by_D50_shft_pval'] = RnMlt_by_D50_spearmans_shft$p.value 
            
            D50_rnmlt_days_shft = as.numeric(RnMltfracs_byYear_shft[recess_char[run, 'D50_med_date'], nona_years]) * RnMlt_byYear$annum[nona_years]
            RnMlt_by_D50_spearmans_shft = cor.test(these_years, D50_rnmlt_days_shft, method='spearman')
            recess_char[run,'RnMlt_vol_by_D50_shft_slp'] = zyp.sen(D50_rnmlt_days_shft ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_by_D50_shft_rho'] = RnMlt_by_D50_spearmans_shft$estimate 
            recess_char[run,'RnMlt_vol_by_D50_shft_pval'] = RnMlt_by_D50_spearmans_shft$p.value 
            
            
            D50_rnmlt_days_a_shft = (1 - as.numeric(RnMltfracs_byYear_shft[recess_char[run, 'D50_med_date'], nona_years])) * RnMlt_byYear$annum[nona_years]
            RnMlt_after_D50_spearmans_a_shft = cor.test(these_years, D50_rnmlt_days_a_shft, method='spearman')
            recess_char[run,'RnMlt_vol_after_D50_shft_slp'] = zyp.sen(D50_rnmlt_days_a_shft ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_after_D50_shft_rho'] = RnMlt_after_D50_spearmans_a_shft$estimate 
            recess_char[run,'RnMlt_vol_after_D50_shft_pval'] = RnMlt_after_D50_spearmans_a_shft$p.value 
            
            # same.... ugh-ugh... but now with a time lag aproximated by as D186, from Alaskan Ddta
            rnmlt_by_D236 = as.numeric(RnMltfracs_byYear[236, nona_years])
            rnmlt_by_D236_spearmans = cor.test(these_years, rnmlt_by_D236, method='spearman')
            recess_char[run,'RnMlt_by_D236_slp'] = zyp.sen(rnmlt_by_D236 ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_by_D236_rho'] = rnmlt_by_D236_spearmans$estimate 
            recess_char[run,'RnMlt_by_D236_pval'] = rnmlt_by_D236_spearmans$p.value 
            
            rnmlt_by_D236 = as.numeric(RnMltfracs_byYear[236, nona_years]) * RnMlt_byYear$annum[nona_years]
            rnmlt_by_D236_spearmans = cor.test(these_years, rnmlt_by_D236, method='spearman')
            recess_char[run,'RnMlt_vol_by_D236_slp'] = zyp.sen(rnmlt_by_D236 ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_by_D236_rho'] = rnmlt_by_D236_spearmans$estimate 
            recess_char[run,'RnMlt_vol_by_D236_pval'] = rnmlt_by_D236_spearmans$p.value 
            
            
            rnmlt_after_D236 = (1 - as.numeric(RnMltfracs_byYear[236, nona_years])) * RnMlt_byYear$annum[nona_years]
            RnMlt_after_D236_spearmans_a = cor.test(these_years, rnmlt_after_D236, method='spearman')
            recess_char[run,'RnMlt_vol_after_D236_slp'] = zyp.sen(rnmlt_after_D236 ~ these_years)$coef[2] 
            recess_char[run,'RnMlt_vol_after_D236_rho'] = RnMlt_after_D236_spearmans_a$estimate 
            recess_char[run,'RnMlt_vol_after_D236_pval'] = RnMlt_after_D236_spearmans_a$p.value 
            
            
            # same but with Daymet climate data
            # first rain and snowmelt
            RnMlt_annum_mod = zyp.sen(annum ~ year, subset(RnMlt_byYear, !is.na(RnMlt_byYear$annum)))
            RnMlt_Jan_mod = zyp.sen(Jan ~ year, subset(RnMlt_byYear, !is.na(RnMlt_byYear$Jan)))
            RnMlt_Feb_mod = zyp.sen(Feb ~ year, subset(RnMlt_byYear, !is.na(RnMlt_byYear$Feb)))
            RnMlt_Mar_mod = zyp.sen(Mar ~ year, subset(RnMlt_byYear, !is.na(RnMlt_byYear$Mar)))
            RnMlt_Apr_mod = zyp.sen(Apr ~ year, subset(RnMlt_byYear, !is.na(RnMlt_byYear$Apr)))
            RnMlt_May_mod = zyp.sen(May ~ year, subset(RnMlt_byYear, !is.na(RnMlt_byYear$May)))
            RnMlt_Jun_mod = zyp.sen(Jun ~ year, subset(RnMlt_byYear, !is.na(RnMlt_byYear$Jun)))
            RnMlt_Jul_mod = zyp.sen(Jul ~ year, subset(RnMlt_byYear, !is.na(RnMlt_byYear$Jul)))
            RnMlt_Aug_mod = zyp.sen(Aug ~ year, subset(RnMlt_byYear, !is.na(RnMlt_byYear$Aug)))
            RnMlt_Sep_mod = zyp.sen(Sep ~ year, subset(RnMlt_byYear, !is.na(RnMlt_byYear$Sep)))
            RnMlt_Oct_mod = zyp.sen(Oct ~ year, subset(RnMlt_byYear, !is.na(RnMlt_byYear$Oct)))
            RnMlt_Nov_mod = zyp.sen(Nov ~ year, subset(RnMlt_byYear, !is.na(RnMlt_byYear$Nov)))
            RnMlt_Dec_mod = zyp.sen(Dec ~ year, subset(RnMlt_byYear, !is.na(RnMlt_byYear$Dec)))
            
            RnMlt_annum_spearmans = cor.test(RnMlt_byYear$year, RnMlt_byYear$annum, method='spearman')
            RnMlt_Jan_spearmans = cor.test(RnMlt_byYear$year, RnMlt_byYear$Jan, method='spearman')
            RnMlt_Feb_spearmans = cor.test(RnMlt_byYear$year, RnMlt_byYear$Feb, method='spearman')
            RnMlt_Mar_spearmans = cor.test(RnMlt_byYear$year, RnMlt_byYear$Mar, method='spearman')
            RnMlt_Apr_spearmans = cor.test(RnMlt_byYear$year, RnMlt_byYear$Apr, method='spearman')
            RnMlt_May_spearmans = cor.test(RnMlt_byYear$year, RnMlt_byYear$May, method='spearman')
            RnMlt_Jun_spearmans = cor.test(RnMlt_byYear$year, RnMlt_byYear$Jun, method='spearman')
            RnMlt_Jul_spearmans = cor.test(RnMlt_byYear$year, RnMlt_byYear$Jul, method='spearman')
            RnMlt_Aug_spearmans = cor.test(RnMlt_byYear$year, RnMlt_byYear$Aug, method='spearman')
            RnMlt_Sep_spearmans = cor.test(RnMlt_byYear$year, RnMlt_byYear$Sep, method='spearman')
            RnMlt_Oct_spearmans = cor.test(RnMlt_byYear$year, RnMlt_byYear$Oct, method='spearman')
            RnMlt_Nov_spearmans = cor.test(RnMlt_byYear$year, RnMlt_byYear$Nov, method='spearman')
            RnMlt_Dec_spearmans = cor.test(RnMlt_byYear$year, RnMlt_byYear$Dec, method='spearman')
            
            recess_char[run,'RnMlt_annum_slp'] = RnMlt_annum_mod$coef[2] 
            recess_char[run,'RnMlt_annum_rho'] = RnMlt_annum_spearmans$estimate
            recess_char[run,'RnMlt_annum_pval'] = RnMlt_annum_spearmans$p.value 
            recess_char[run,'RnMlt_Jan_slp'] = RnMlt_Jan_mod$coef[2] 
            recess_char[run,'RnMlt_Jan_rho'] = RnMlt_Jan_spearmans$estimate
            recess_char[run,'RnMlt_Jan_pval'] = RnMlt_Jan_spearmans$p.value 
            recess_char[run,'RnMlt_Feb_slp'] = RnMlt_Feb_mod$coef[2] 
            recess_char[run,'RnMlt_Feb_rho'] = RnMlt_Feb_spearmans$estimate
            recess_char[run,'RnMlt_Feb_pval'] = RnMlt_Feb_spearmans$p.value 
            recess_char[run,'RnMlt_Mar_slp'] = RnMlt_Mar_mod$coef[2] 
            recess_char[run,'RnMlt_Mar_rho'] = RnMlt_Mar_spearmans$estimate
            recess_char[run,'RnMlt_Mar_pval'] = RnMlt_Mar_spearmans$p.value 
            recess_char[run,'RnMlt_Apr_slp'] = RnMlt_Apr_mod$coef[2] 
            recess_char[run,'RnMlt_Apr_rho'] = RnMlt_Apr_spearmans$estimate
            recess_char[run,'RnMlt_Apr_pval'] = RnMlt_Apr_spearmans$p.value 
            recess_char[run,'RnMlt_May_slp'] = RnMlt_May_mod$coef[2] 
            recess_char[run,'RnMlt_May_rho'] = RnMlt_May_spearmans$estimate
            recess_char[run,'RnMlt_May_pval'] = RnMlt_May_spearmans$p.value 
            recess_char[run,'RnMlt_Jun_slp'] = RnMlt_Jun_mod$coef[2] 
            recess_char[run,'RnMlt_Jun_rho'] = RnMlt_Jun_spearmans$estimate
            recess_char[run,'RnMlt_Jun_pval'] = RnMlt_Jun_spearmans$p.value 
            recess_char[run,'RnMlt_Jul_slp'] = RnMlt_Jul_mod$coef[2] 
            recess_char[run,'RnMlt_Jul_rho'] = RnMlt_Jul_spearmans$estimate
            recess_char[run,'RnMlt_Jul_pval'] = RnMlt_Jul_spearmans$p.value 
            recess_char[run,'RnMlt_Aug_slp'] = RnMlt_Aug_mod$coef[2] 
            recess_char[run,'RnMlt_Aug_rho'] = RnMlt_Aug_spearmans$estimate
            recess_char[run,'RnMlt_Aug_pval'] = RnMlt_Aug_spearmans$p.value 
            recess_char[run,'RnMlt_Sep_slp'] = RnMlt_Sep_mod$coef[2] 
            recess_char[run,'RnMlt_Sep_rho'] = RnMlt_Sep_spearmans$estimate
            recess_char[run,'RnMlt_Sep_pval'] = RnMlt_Sep_spearmans$p.value 
            recess_char[run,'RnMlt_Oct_slp'] = RnMlt_Oct_mod$coef[2] 
            recess_char[run,'RnMlt_Oct_rho'] = RnMlt_Oct_spearmans$estimate
            recess_char[run,'RnMlt_Oct_pval'] = RnMlt_Oct_spearmans$p.value 
            recess_char[run,'RnMlt_Nov_slp'] = RnMlt_Nov_mod$coef[2] 
            recess_char[run,'RnMlt_Nov_rho'] = RnMlt_Nov_spearmans$estimate
            recess_char[run,'RnMlt_Nov_pval'] = RnMlt_Nov_spearmans$p.value 
            recess_char[run,'RnMlt_Dec_slp'] = RnMlt_Dec_mod$coef[2] 
            recess_char[run,'RnMlt_Dec_rho'] = RnMlt_Dec_spearmans$estimate
            recess_char[run,'RnMlt_Dec_pval'] = RnMlt_Dec_spearmans$p.value 
            
            # now min temp
            minT_annum_mod = zyp.sen(annum ~ year, subset(minT_byYear, !is.na(minT_byYear$annum)))
            minT_Jan_mod = zyp.sen(Jan ~ year, subset(minT_byYear, !is.na(minT_byYear$Jan)))
            minT_Feb_mod = zyp.sen(Feb ~ year, subset(minT_byYear, !is.na(minT_byYear$Feb)))
            minT_Mar_mod = zyp.sen(Mar ~ year, subset(minT_byYear, !is.na(minT_byYear$Mar)))
            minT_Apr_mod = zyp.sen(Apr ~ year, subset(minT_byYear, !is.na(minT_byYear$Apr)))
            minT_May_mod = zyp.sen(May ~ year, subset(minT_byYear, !is.na(minT_byYear$May)))
            minT_Jun_mod = zyp.sen(Jun ~ year, subset(minT_byYear, !is.na(minT_byYear$Jun)))
            minT_Jul_mod = zyp.sen(Jul ~ year, subset(minT_byYear, !is.na(minT_byYear$Jul)))
            minT_Aug_mod = zyp.sen(Aug ~ year, subset(minT_byYear, !is.na(minT_byYear$Aug)))
            minT_Sep_mod = zyp.sen(Sep ~ year, subset(minT_byYear, !is.na(minT_byYear$Sep)))
            minT_Oct_mod = zyp.sen(Oct ~ year, subset(minT_byYear, !is.na(minT_byYear$Oct)))
            minT_Nov_mod = zyp.sen(Nov ~ year, subset(minT_byYear, !is.na(minT_byYear$Nov)))
            minT_Dec_mod = zyp.sen(Dec ~ year, subset(minT_byYear, !is.na(minT_byYear$Dec)))
            
            minT_annum_spearmans = cor.test(minT_byYear$year, minT_byYear$annum, method='spearman')
            minT_Jan_spearmans = cor.test(minT_byYear$year, minT_byYear$Jan, method='spearman')
            minT_Feb_spearmans = cor.test(minT_byYear$year, minT_byYear$Feb, method='spearman')
            minT_Mar_spearmans = cor.test(minT_byYear$year, minT_byYear$Mar, method='spearman')
            minT_Apr_spearmans = cor.test(minT_byYear$year, minT_byYear$Apr, method='spearman')
            minT_May_spearmans = cor.test(minT_byYear$year, minT_byYear$May, method='spearman')
            minT_Jun_spearmans = cor.test(minT_byYear$year, minT_byYear$Jun, method='spearman')
            minT_Jul_spearmans = cor.test(minT_byYear$year, minT_byYear$Jul, method='spearman')
            minT_Aug_spearmans = cor.test(minT_byYear$year, minT_byYear$Aug, method='spearman')
            minT_Sep_spearmans = cor.test(minT_byYear$year, minT_byYear$Sep, method='spearman')
            minT_Oct_spearmans = cor.test(minT_byYear$year, minT_byYear$Oct, method='spearman')
            minT_Nov_spearmans = cor.test(minT_byYear$year, minT_byYear$Nov, method='spearman')
            minT_Dec_spearmans = cor.test(minT_byYear$year, minT_byYear$Dec, method='spearman')
            
            recess_char[run,'minT_annum_slp'] = minT_annum_mod$coef[2] 
            recess_char[run,'minT_annum_rho'] = minT_annum_spearmans$estimate
            recess_char[run,'minT_annum_pval'] = minT_annum_spearmans$p.value 
            recess_char[run,'minT_Jan_slp'] = minT_Jan_mod$coef[2] 
            recess_char[run,'minT_Jan_rho'] = minT_Jan_spearmans$estimate
            recess_char[run,'minT_Jan_pval'] = minT_Jan_spearmans$p.value 
            recess_char[run,'minT_Feb_slp'] = minT_Feb_mod$coef[2] 
            recess_char[run,'minT_Feb_rho'] = minT_Feb_spearmans$estimate
            recess_char[run,'minT_Feb_pval'] = minT_Feb_spearmans$p.value 
            recess_char[run,'minT_Mar_slp'] = minT_Mar_mod$coef[2] 
            recess_char[run,'minT_Mar_rho'] = minT_Mar_spearmans$estimate
            recess_char[run,'minT_Mar_pval'] = minT_Mar_spearmans$p.value 
            recess_char[run,'minT_Apr_slp'] = minT_Apr_mod$coef[2] 
            recess_char[run,'minT_Apr_rho'] = minT_Apr_spearmans$estimate
            recess_char[run,'minT_Apr_pval'] = minT_Apr_spearmans$p.value 
            recess_char[run,'minT_May_slp'] = minT_May_mod$coef[2] 
            recess_char[run,'minT_May_rho'] = minT_May_spearmans$estimate
            recess_char[run,'minT_May_pval'] = minT_May_spearmans$p.value 
            recess_char[run,'minT_Jun_slp'] = minT_Jun_mod$coef[2] 
            recess_char[run,'minT_Jun_rho'] = minT_Jun_spearmans$estimate
            recess_char[run,'minT_Jun_pval'] = minT_Jun_spearmans$p.value 
            recess_char[run,'minT_Jul_slp'] = minT_Jul_mod$coef[2] 
            recess_char[run,'minT_Jul_rho'] = minT_Jul_spearmans$estimate
            recess_char[run,'minT_Jul_pval'] = minT_Jul_spearmans$p.value 
            recess_char[run,'minT_Aug_slp'] = minT_Aug_mod$coef[2] 
            recess_char[run,'minT_Aug_rho'] = minT_Aug_spearmans$estimate
            recess_char[run,'minT_Aug_pval'] = minT_Aug_spearmans$p.value 
            recess_char[run,'minT_Sep_slp'] = minT_Sep_mod$coef[2] 
            recess_char[run,'minT_Sep_rho'] = minT_Sep_spearmans$estimate
            recess_char[run,'minT_Sep_pval'] = minT_Sep_spearmans$p.value 
            recess_char[run,'minT_Oct_slp'] = minT_Oct_mod$coef[2] 
            recess_char[run,'minT_Oct_rho'] = minT_Oct_spearmans$estimate
            recess_char[run,'minT_Oct_pval'] = minT_Oct_spearmans$p.value 
            recess_char[run,'minT_Nov_slp'] = minT_Nov_mod$coef[2] 
            recess_char[run,'minT_Nov_rho'] = minT_Nov_spearmans$estimate
            recess_char[run,'minT_Nov_pval'] = minT_Nov_spearmans$p.value 
            recess_char[run,'minT_Dec_slp'] = minT_Dec_mod$coef[2] 
            recess_char[run,'minT_Dec_rho'] = minT_Dec_spearmans$estimate
            recess_char[run,'minT_Dec_pval'] = minT_Dec_spearmans$p.value 
            
            
            # now max temp
            maxT_annum_mod = zyp.sen(annum ~ year, subset(maxT_byYear, !is.na(maxT_byYear$annum)))
            maxT_Jan_mod = zyp.sen(Jan ~ year, subset(maxT_byYear, !is.na(maxT_byYear$Jan)))
            maxT_Feb_mod = zyp.sen(Feb ~ year, subset(maxT_byYear, !is.na(maxT_byYear$Feb)))
            maxT_Mar_mod = zyp.sen(Mar ~ year, subset(maxT_byYear, !is.na(maxT_byYear$Mar)))
            maxT_Apr_mod = zyp.sen(Apr ~ year, subset(maxT_byYear, !is.na(maxT_byYear$Apr)))
            maxT_May_mod = zyp.sen(May ~ year, subset(maxT_byYear, !is.na(maxT_byYear$May)))
            maxT_Jun_mod = zyp.sen(Jun ~ year, subset(maxT_byYear, !is.na(maxT_byYear$Jun)))
            maxT_Jul_mod = zyp.sen(Jul ~ year, subset(maxT_byYear, !is.na(maxT_byYear$Jul)))
            maxT_Aug_mod = zyp.sen(Aug ~ year, subset(maxT_byYear, !is.na(maxT_byYear$Aug)))
            maxT_Sep_mod = zyp.sen(Sep ~ year, subset(maxT_byYear, !is.na(maxT_byYear$Sep)))
            maxT_Oct_mod = zyp.sen(Oct ~ year, subset(maxT_byYear, !is.na(maxT_byYear$Oct)))
            maxT_Nov_mod = zyp.sen(Nov ~ year, subset(maxT_byYear, !is.na(maxT_byYear$Nov)))
            maxT_Dec_mod = zyp.sen(Dec ~ year, subset(maxT_byYear, !is.na(maxT_byYear$Dec)))
            
            maxT_annum_spearmans = cor.test(maxT_byYear$year, maxT_byYear$annum, method='spearman')
            maxT_Jan_spearmans = cor.test(maxT_byYear$year, maxT_byYear$Jan, method='spearman')
            maxT_Feb_spearmans = cor.test(maxT_byYear$year, maxT_byYear$Feb, method='spearman')
            maxT_Mar_spearmans = cor.test(maxT_byYear$year, maxT_byYear$Mar, method='spearman')
            maxT_Apr_spearmans = cor.test(maxT_byYear$year, maxT_byYear$Apr, method='spearman')
            maxT_May_spearmans = cor.test(maxT_byYear$year, maxT_byYear$May, method='spearman')
            maxT_Jun_spearmans = cor.test(maxT_byYear$year, maxT_byYear$Jun, method='spearman')
            maxT_Jul_spearmans = cor.test(maxT_byYear$year, maxT_byYear$Jul, method='spearman')
            maxT_Aug_spearmans = cor.test(maxT_byYear$year, maxT_byYear$Aug, method='spearman')
            maxT_Sep_spearmans = cor.test(maxT_byYear$year, maxT_byYear$Sep, method='spearman')
            maxT_Oct_spearmans = cor.test(maxT_byYear$year, maxT_byYear$Oct, method='spearman')
            maxT_Nov_spearmans = cor.test(maxT_byYear$year, maxT_byYear$Nov, method='spearman')
            maxT_Dec_spearmans = cor.test(maxT_byYear$year, maxT_byYear$Dec, method='spearman')
            
            recess_char[run,'maxT_annum_slp'] = maxT_annum_mod$coef[2] 
            recess_char[run,'maxT_annum_rho'] = maxT_annum_spearmans$estimate
            recess_char[run,'maxT_annum_pval'] = maxT_annum_spearmans$p.value 
            recess_char[run,'maxT_Jan_slp'] = maxT_Jan_mod$coef[2] 
            recess_char[run,'maxT_Jan_rho'] = maxT_Jan_spearmans$estimate
            recess_char[run,'maxT_Jan_pval'] = maxT_Jan_spearmans$p.value 
            recess_char[run,'maxT_Feb_slp'] = maxT_Feb_mod$coef[2] 
            recess_char[run,'maxT_Feb_rho'] = maxT_Feb_spearmans$estimate
            recess_char[run,'maxT_Feb_pval'] = maxT_Feb_spearmans$p.value 
            recess_char[run,'maxT_Mar_slp'] = maxT_Mar_mod$coef[2] 
            recess_char[run,'maxT_Mar_rho'] = maxT_Mar_spearmans$estimate
            recess_char[run,'maxT_Mar_pval'] = maxT_Mar_spearmans$p.value 
            recess_char[run,'maxT_Apr_slp'] = maxT_Apr_mod$coef[2] 
            recess_char[run,'maxT_Apr_rho'] = maxT_Apr_spearmans$estimate
            recess_char[run,'maxT_Apr_pval'] = maxT_Apr_spearmans$p.value 
            recess_char[run,'maxT_May_slp'] = maxT_May_mod$coef[2] 
            recess_char[run,'maxT_May_rho'] = maxT_May_spearmans$estimate
            recess_char[run,'maxT_May_pval'] = maxT_May_spearmans$p.value 
            recess_char[run,'maxT_Jun_slp'] = maxT_Jun_mod$coef[2] 
            recess_char[run,'maxT_Jun_rho'] = maxT_Jun_spearmans$estimate
            recess_char[run,'maxT_Jun_pval'] = maxT_Jun_spearmans$p.value 
            recess_char[run,'maxT_Jul_slp'] = maxT_Jul_mod$coef[2] 
            recess_char[run,'maxT_Jul_rho'] = maxT_Jul_spearmans$estimate
            recess_char[run,'maxT_Jul_pval'] = maxT_Jul_spearmans$p.value 
            recess_char[run,'maxT_Aug_slp'] = maxT_Aug_mod$coef[2] 
            recess_char[run,'maxT_Aug_rho'] = maxT_Aug_spearmans$estimate
            recess_char[run,'maxT_Aug_pval'] = maxT_Aug_spearmans$p.value 
            recess_char[run,'maxT_Sep_slp'] = maxT_Sep_mod$coef[2] 
            recess_char[run,'maxT_Sep_rho'] = maxT_Sep_spearmans$estimate
            recess_char[run,'maxT_Sep_pval'] = maxT_Sep_spearmans$p.value 
            recess_char[run,'maxT_Oct_slp'] = maxT_Oct_mod$coef[2] 
            recess_char[run,'maxT_Oct_rho'] = maxT_Oct_spearmans$estimate
            recess_char[run,'maxT_Oct_pval'] = maxT_Oct_spearmans$p.value 
            recess_char[run,'maxT_Nov_slp'] = maxT_Nov_mod$coef[2] 
            recess_char[run,'maxT_Nov_rho'] = maxT_Nov_spearmans$estimate
            recess_char[run,'maxT_Nov_pval'] = maxT_Nov_spearmans$p.value 
            recess_char[run,'maxT_Dec_slp'] = maxT_Dec_mod$coef[2] 
            recess_char[run,'maxT_Dec_rho'] = maxT_Dec_spearmans$estimate
            recess_char[run,'maxT_Dec_pval'] = maxT_Dec_spearmans$p.value 
            
            
            
            # now for thaw index
            thawAnnum_mod = zyp.sen(annum ~ year, subset(thaw_byYear, !is.na(thaw_byYear$annum)))
            thawWinter_mod = zyp.sen(winter ~ year, subset(thaw_byYear, !is.na(thaw_byYear$winter)))
            thawSpring_mod = zyp.sen(spring ~ year, subset(thaw_byYear, !is.na(thaw_byYear$spring)))
            thawSummer_mod = zyp.sen(summer ~ year, subset(thaw_byYear, !is.na(thaw_byYear$summer)))
            thawFall_mod = zyp.sen(fall ~ year, subset(thaw_byYear, !is.na(thaw_byYear$fall)))
            
            thawAnnum_spearmans = cor.test(thaw_byYear$year, thaw_byYear$annum, method='spearman')
            thawWinter_spearmans = cor.test(thaw_byYear$year, thaw_byYear$winter, method='spearman')
            thawSpring_spearmans = cor.test(thaw_byYear$year, thaw_byYear$spring, method='spearman')
            thawSummer_spearmans = cor.test(thaw_byYear$year, thaw_byYear$summer, method='spearman')
            thawFall_spearmans = cor.test(thaw_byYear$year, thaw_byYear$fall, method='spearman')
            
            recess_char[run,'thawAnnum_slp'] = thawAnnum_mod$coef[2] 
            recess_char[run,'thawAnnum_rho'] = thawAnnum_spearmans$estimate
            recess_char[run,'thawAnnum_pval'] = thawAnnum_spearmans$p.value 
            recess_char[run,'thawWinter_slp'] = thawWinter_mod$coef[2] 
            recess_char[run,'thawWinter_rho'] = thawWinter_spearmans$estimate
            recess_char[run,'thawWinter_pval'] = thawWinter_spearmans$p.value 
            recess_char[run,'thawSpring_slp'] = thawSpring_mod$coef[2] 
            recess_char[run,'thawSpring_rho'] = thawSpring_spearmans$estimate
            recess_char[run,'thawSpring_pval'] = thawSpring_spearmans$p.value 
            recess_char[run,'thawSummer_slp'] = thawSummer_mod$coef[2] 
            recess_char[run,'thawSummer_rho'] = thawSummer_spearmans$estimate
            recess_char[run,'thawSummer_pval'] = thawSummer_spearmans$p.value 
            recess_char[run,'thawFall_slp'] = thawFall_mod$coef[2] 
            recess_char[run,'thawFall_rho'] = thawFall_spearmans$estimate
            recess_char[run,'thawFall_pval'] = thawFall_spearmans$p.value 
            
            
            
            # now for precip_byYear
            precip_annum_mod = zyp.sen(annum ~ year, subset(precip_byYear, !is.na(precip_byYear$annum)))
            precip_Jan_mod = zyp.sen(Jan ~ year, subset(precip_byYear, !is.na(precip_byYear$Jan)))
            precip_Feb_mod = zyp.sen(Feb ~ year, subset(precip_byYear, !is.na(precip_byYear$Feb)))
            precip_Mar_mod = zyp.sen(Mar ~ year, subset(precip_byYear, !is.na(precip_byYear$Mar)))
            precip_Apr_mod = zyp.sen(Apr ~ year, subset(precip_byYear, !is.na(precip_byYear$Apr)))
            precip_May_mod = zyp.sen(May ~ year, subset(precip_byYear, !is.na(precip_byYear$May)))
            precip_Jun_mod = zyp.sen(Jun ~ year, subset(precip_byYear, !is.na(precip_byYear$Jun)))
            precip_Jul_mod = zyp.sen(Jul ~ year, subset(precip_byYear, !is.na(precip_byYear$Jul)))
            precip_Aug_mod = zyp.sen(Aug ~ year, subset(precip_byYear, !is.na(precip_byYear$Aug)))
            precip_Sep_mod = zyp.sen(Sep ~ year, subset(precip_byYear, !is.na(precip_byYear$Sep)))
            precip_Oct_mod = zyp.sen(Oct ~ year, subset(precip_byYear, !is.na(precip_byYear$Oct)))
            precip_Nov_mod = zyp.sen(Nov ~ year, subset(precip_byYear, !is.na(precip_byYear$Nov)))
            precip_Dec_mod = zyp.sen(Dec ~ year, subset(precip_byYear, !is.na(precip_byYear$Dec)))
            
            precip_annum_spearmans = cor.test(precip_byYear$year, precip_byYear$annum, method='spearman')
            precip_Jan_spearmans = cor.test(precip_byYear$year, precip_byYear$Jan, method='spearman')
            precip_Feb_spearmans = cor.test(precip_byYear$year, precip_byYear$Feb, method='spearman')
            precip_Mar_spearmans = cor.test(precip_byYear$year, precip_byYear$Mar, method='spearman')
            precip_Apr_spearmans = cor.test(precip_byYear$year, precip_byYear$Apr, method='spearman')
            precip_May_spearmans = cor.test(precip_byYear$year, precip_byYear$May, method='spearman')
            precip_Jun_spearmans = cor.test(precip_byYear$year, precip_byYear$Jun, method='spearman')
            precip_Jul_spearmans = cor.test(precip_byYear$year, precip_byYear$Jul, method='spearman')
            precip_Aug_spearmans = cor.test(precip_byYear$year, precip_byYear$Aug, method='spearman')
            precip_Sep_spearmans = cor.test(precip_byYear$year, precip_byYear$Sep, method='spearman')
            precip_Oct_spearmans = cor.test(precip_byYear$year, precip_byYear$Oct, method='spearman')
            precip_Nov_spearmans = cor.test(precip_byYear$year, precip_byYear$Nov, method='spearman')
            precip_Dec_spearmans = cor.test(precip_byYear$year, precip_byYear$Dec, method='spearman')
            
            recess_char[run,'precip_annum_slp'] = precip_annum_mod$coef[2] 
            recess_char[run,'precip_annum_rho'] = precip_annum_spearmans$estimate
            recess_char[run,'precip_annum_pval'] = precip_annum_spearmans$p.value 
            recess_char[run,'precip_Jan_slp'] = precip_Jan_mod$coef[2] 
            recess_char[run,'precip_Jan_rho'] = precip_Jan_spearmans$estimate
            recess_char[run,'precip_Jan_pval'] = precip_Jan_spearmans$p.value 
            recess_char[run,'precip_Feb_slp'] = precip_Feb_mod$coef[2] 
            recess_char[run,'precip_Feb_rho'] = precip_Feb_spearmans$estimate
            recess_char[run,'precip_Feb_pval'] = precip_Feb_spearmans$p.value 
            recess_char[run,'precip_Mar_slp'] = precip_Mar_mod$coef[2] 
            recess_char[run,'precip_Mar_rho'] = precip_Mar_spearmans$estimate
            recess_char[run,'precip_Mar_pval'] = precip_Mar_spearmans$p.value 
            recess_char[run,'precip_Apr_slp'] = precip_Apr_mod$coef[2] 
            recess_char[run,'precip_Apr_rho'] = precip_Apr_spearmans$estimate
            recess_char[run,'precip_Apr_pval'] = precip_Apr_spearmans$p.value 
            recess_char[run,'precip_May_slp'] = precip_May_mod$coef[2] 
            recess_char[run,'precip_May_rho'] = precip_May_spearmans$estimate
            recess_char[run,'precip_May_pval'] = precip_May_spearmans$p.value 
            recess_char[run,'precip_Jun_slp'] = precip_Jun_mod$coef[2] 
            recess_char[run,'precip_Jun_rho'] = precip_Jun_spearmans$estimate
            recess_char[run,'precip_Jun_pval'] = precip_Jun_spearmans$p.value 
            recess_char[run,'precip_Jul_slp'] = precip_Jul_mod$coef[2] 
            recess_char[run,'precip_Jul_rho'] = precip_Jul_spearmans$estimate
            recess_char[run,'precip_Jul_pval'] = precip_Jul_spearmans$p.value 
            recess_char[run,'precip_Aug_slp'] = precip_Aug_mod$coef[2] 
            recess_char[run,'precip_Aug_rho'] = precip_Aug_spearmans$estimate
            recess_char[run,'precip_Aug_pval'] = precip_Aug_spearmans$p.value 
            recess_char[run,'precip_Sep_slp'] = precip_Sep_mod$coef[2] 
            recess_char[run,'precip_Sep_rho'] = precip_Sep_spearmans$estimate
            recess_char[run,'precip_Sep_pval'] = precip_Sep_spearmans$p.value 
            recess_char[run,'precip_Oct_slp'] = precip_Oct_mod$coef[2] 
            recess_char[run,'precip_Oct_rho'] = precip_Oct_spearmans$estimate
            recess_char[run,'precip_Oct_pval'] = precip_Oct_spearmans$p.value 
            recess_char[run,'precip_Nov_slp'] = precip_Nov_mod$coef[2] 
            recess_char[run,'precip_Nov_rho'] = precip_Nov_spearmans$estimate
            recess_char[run,'precip_Nov_pval'] = precip_Nov_spearmans$p.value 
            recess_char[run,'precip_Dec_slp'] = precip_Dec_mod$coef[2] 
            recess_char[run,'precip_Dec_rho'] = precip_Dec_spearmans$estimate
            recess_char[run,'precip_Dec_pval'] = precip_Dec_spearmans$p.value 
            
            
            # now for precip lags
            
            precip_annum_lag_mod = zyp.sen(annum_lag ~ year, subset(precip_byYear, !is.na(precip_byYear$annum_lag)))
            
            precip_annum_lag_spearmans = cor.test(precip_byYear$year, precip_byYear$annum_lag, method='spearman')
            recess_char[run,'precip_annum_lag_slp'] = precip_annum_lag_mod$coef[2] 
            recess_char[run,'precip_annum_lag_rho'] = precip_annum_lag_spearmans$estimate
            recess_char[run,'precip_annum_lag_pval'] = precip_annum_lag_spearmans$p.value 
            
            
            # now to look at trends in the optimal lag
            precip_opt_lag = as.numeric(precip_byYear$opt_lag[nona_years])
            precip_opt_lag_spearmans_l = cor.test(these_years, precip_opt_lag, method='spearman')
            
            recess_char[run,'precip_opt_lag_med_num_days'] = median(precip_opt_lag)	; print(median(precip_opt_lag))
            recess_char[run,'precip_opt_lag_slp'] = zyp.sen(precip_opt_lag ~ these_years)$coef[2] 
            recess_char[run,'precip_opt_lag_rho'] = precip_opt_lag_spearmans_l$estimate 
            recess_char[run,'precip_opt_lag_pval'] = precip_opt_lag_spearmans_l$p.value 
            
            
            
            # now for rainVsnow
            rsRatio_mod = zyp.sen(ratio ~ year, subset(rainVsnow_byYear, !is.na(rainVsnow_byYear$ratio)))
            rainTot_mod = zyp.sen(rain ~ year, subset(rainVsnow_byYear, !is.na(rainVsnow_byYear$rain)))
            snowTot_mod = zyp.sen(snow ~ year, subset(rainVsnow_byYear, !is.na(rainVsnow_byYear$snow)))
            
            rsRatio_spearmans = cor.test(rainVsnow_byYear$year, rainVsnow_byYear$ratio, method='spearman')
            rainTot_spearmans = cor.test(rainVsnow_byYear$year, rainVsnow_byYear$rain, method='spearman')
            snowTot_spearmans = cor.test(rainVsnow_byYear$year, rainVsnow_byYear$snow, method='spearman')
            
            recess_char[run,'rsRatio_slp'] = rsRatio_mod$coef[2] 
            recess_char[run,'rsRatio_rho'] = rsRatio_spearmans$estimate
            recess_char[run,'rsRatio_pval'] = rsRatio_spearmans$p.value 
            recess_char[run,'rainTot_slp'] = rainTot_mod$coef[2] 
            recess_char[run,'rainTot_rho'] = rainTot_spearmans$estimate
            recess_char[run,'rainTot_pval'] = rainTot_spearmans$p.value 
            recess_char[run,'snowTot_slp'] = snowTot_mod$coef[2] 
            recess_char[run,'snowTot_rho'] = snowTot_spearmans$estimate
            recess_char[run,'snowTot_pval'] = snowTot_spearmans$p.value 
            
            
            
            # now for swe
            maxSWE_mod = zyp.sen(maxSWE ~ year, subset(SWE_byYear, !is.na(SWE_byYear$maxSWE)))
            avgSWE_mod = zyp.sen(avgSWE ~ year, subset(SWE_byYear, !is.na(SWE_byYear$avgSWE)))
            SWE_Dmax_mod = zyp.sen(SWE_Dmax ~ year, subset(SWE_byYear, !is.na(SWE_byYear$SWE_Dmax)))
            SWE_D0_mod = zyp.sen(SWE_D0 ~ year, subset(SWE_byYear, !is.na(SWE_byYear$SWE_D0)))
            
            maxSWE_spearmans = cor.test(SWE_byYear$year, SWE_byYear$maxSWE, method='spearman')
            avgSWE_spearmans = cor.test(SWE_byYear$year, SWE_byYear$avgSWE, method='spearman')
            SWE_Dmax_spearmans = cor.test(SWE_byYear$year, SWE_byYear$SWE_Dmax, method='spearman')
            SWE_D0_spearmans = cor.test(SWE_byYear$year, SWE_byYear$SWE_D0, method='spearman')
            
            recess_char[run,'maxSWE_slp'] = maxSWE_mod$coef[2] 
            recess_char[run,'maxSWE_rho'] = maxSWE_spearmans$estimate
            recess_char[run,'maxSWE_pval'] = maxSWE_spearmans$p.value 
            recess_char[run,'avgSWE_slp'] = avgSWE_mod$coef[2] 
            recess_char[run,'avgSWE_rho'] = avgSWE_spearmans$estimate
            recess_char[run,'avgSWE_pval'] = avgSWE_spearmans$p.value 
            recess_char[run,'SWE_Dmax_slp'] = SWE_Dmax_mod$coef[2] 
            recess_char[run,'SWE_Dmax_rho'] = SWE_Dmax_spearmans$estimate
            recess_char[run,'SWE_Dmax_pval'] = SWE_Dmax_spearmans$p.value 
            recess_char[run,'SWE_D0_slp'] = SWE_D0_mod$coef[2] 
            recess_char[run,'SWE_D0_rho'] = SWE_D0_spearmans$estimate
            recess_char[run,'SWE_D0_pval'] = SWE_D0_spearmans$p.value 
            
            
            # same but with DFIs
            oflow_win_mod = zyp.sen(overland ~ year, subset(DFIs, seasons ==1))
            oflow_spr_mod = zyp.sen(overland ~ year, subset(DFIs, seasons ==2))
            oflow_sum_mod = zyp.sen(overland ~ year, subset(DFIs, seasons ==3))
            oflow_fal_mod = zyp.sen(overland ~ year, subset(DFIs, seasons ==4))
            qflow_win_mod = zyp.sen(qflow ~ year, subset(DFIs, seasons ==1))
            qflow_spr_mod = zyp.sen(qflow ~ year, subset(DFIs, seasons ==2))
            qflow_sum_mod = zyp.sen(qflow ~ year, subset(DFIs, seasons ==3))
            qflow_fal_mod = zyp.sen(qflow ~ year, subset(DFIs, seasons ==4))
            dflow_win_mod = zyp.sen(dflow ~ year, subset(DFIs, seasons ==1))
            dflow_spr_mod = zyp.sen(dflow ~ year, subset(DFIs, seasons ==2))
            dflow_sum_mod = zyp.sen(dflow ~ year, subset(DFIs, seasons ==3))
            dflow_fal_mod = zyp.sen(dflow ~ year, subset(DFIs, seasons ==4))
            bflow_win_mod = zyp.sen(bflow ~ year, subset(DFIs, seasons ==1))
            bflow_spr_mod = zyp.sen(bflow ~ year, subset(DFIs, seasons ==2))
            bflow_sum_mod = zyp.sen(bflow ~ year, subset(DFIs, seasons ==3))
            bflow_fal_mod = zyp.sen(bflow ~ year, subset(DFIs, seasons ==4))
            
            oflow_win_spearmans = NA ; 	oflow_win_spearmans = NA ;	oflow_win_spearmans = NA ;	bflow_win_spearmans = NA ;
            the_subset = subset(DFIs, !is.na(bflow) & seasons == 1); if(nrow(the_subset) > 3) {
              oflow_win_spearmans = cor.test(the_subset$year,the_subset$overland, method='spearman')
              qflow_win_spearmans = cor.test(the_subset$year,the_subset$qflow, method='spearman')
              dflow_win_spearmans = cor.test(the_subset$year,the_subset$dflow, method='spearman')
              bflow_win_spearmans = cor.test(the_subset$year,the_subset$bflow, method='spearman')
              recess_char[run,'oflow_win_rho'] = oflow_win_spearmans$estimate
              recess_char[run,'oflow_win_pval'] = oflow_win_spearmans$p.value 
              recess_char[run,'qflow_win_rho'] = qflow_win_spearmans$estimate
              recess_char[run,'qflow_win_pval'] = qflow_win_spearmans$p.value 
              recess_char[run,'dflow_win_rho'] = dflow_win_spearmans$estimate
              recess_char[run,'dflow_win_pval'] = dflow_win_spearmans$p.value 
              recess_char[run,'bflow_win_rho'] = bflow_win_spearmans$estimate
              recess_char[run,'bflow_win_pval'] = bflow_win_spearmans$p.value 
            }
            oflow_spr_spearmans = cor.test(subset(DFIs, seasons == 2)$year, subset(DFIs, seasons == 2)$overland, method='spearman')
            oflow_sum_spearmans = cor.test(subset(DFIs, seasons == 3)$year, subset(DFIs, seasons == 3)$overland, method='spearman')
            oflow_fal_spearmans = cor.test(subset(DFIs, seasons == 4)$year, subset(DFIs, seasons == 4)$overland, method='spearman')
            qflow_spr_spearmans = cor.test(subset(DFIs, seasons == 2)$year, subset(DFIs, seasons == 2)$qflow, method='spearman')
            qflow_sum_spearmans = cor.test(subset(DFIs, seasons == 3)$year, subset(DFIs, seasons == 3)$qflow, method='spearman')
            qflow_fal_spearmans = cor.test(subset(DFIs, seasons == 4)$year, subset(DFIs, seasons == 4)$qflow, method='spearman')
            dflow_spr_spearmans = cor.test(subset(DFIs, seasons == 2)$year, subset(DFIs, seasons == 2)$dflow, method='spearman')
            dflow_sum_spearmans = cor.test(subset(DFIs, seasons == 3)$year, subset(DFIs, seasons == 3)$dflow, method='spearman')
            dflow_fal_spearmans = cor.test(subset(DFIs, seasons == 4)$year, subset(DFIs, seasons == 4)$dflow, method='spearman')
            bflow_spr_spearmans = cor.test(subset(DFIs, seasons == 2)$year, subset(DFIs, seasons == 2)$bflow, method='spearman')
            bflow_sum_spearmans = cor.test(subset(DFIs, seasons == 3)$year, subset(DFIs, seasons == 3)$bflow, method='spearman')
            bflow_fal_spearmans = cor.test(subset(DFIs, seasons == 4)$year, subset(DFIs, seasons == 4)$bflow, method='spearman')
            
            recess_char[run,'oflow_win_slp'] = oflow_win_mod$coef[2] 
            recess_char[run,'oflow_spr_slp'] = oflow_spr_mod$coef[2] 
            recess_char[run,'oflow_spr_rho'] = oflow_spr_spearmans$estimate
            recess_char[run,'oflow_spr_pval'] = oflow_spr_spearmans$p.value 
            recess_char[run,'oflow_sum_slp'] = oflow_sum_mod$coef[2] 
            recess_char[run,'oflow_sum_rho'] = oflow_sum_spearmans$estimate
            recess_char[run,'oflow_sum_pval'] = oflow_sum_spearmans$p.value 
            recess_char[run,'oflow_fal_slp'] = oflow_fal_mod$coef[2] 
            recess_char[run,'oflow_fal_rho'] = oflow_fal_spearmans$estimate
            recess_char[run,'oflow_fal_pval'] = oflow_fal_spearmans$p.value 
            
            recess_char[run,'qflow_win_slp'] = qflow_win_mod$coef[2] 
            recess_char[run,'qflow_spr_slp'] = qflow_spr_mod$coef[2] 
            recess_char[run,'qflow_spr_rho'] = qflow_spr_spearmans$estimate
            recess_char[run,'qflow_spr_pval'] = qflow_spr_spearmans$p.value 
            recess_char[run,'qflow_sum_slp'] = qflow_sum_mod$coef[2] 
            recess_char[run,'qflow_sum_rho'] = qflow_sum_spearmans$estimate
            recess_char[run,'qflow_sum_pval'] = qflow_sum_spearmans$p.value 
            recess_char[run,'qflow_fal_slp'] = qflow_fal_mod$coef[2] 
            recess_char[run,'qflow_fal_rho'] = qflow_fal_spearmans$estimate
            recess_char[run,'qflow_fal_pval'] = qflow_fal_spearmans$p.value 
            
            recess_char[run,'dflow_win_slp'] = dflow_win_mod$coef[2] 
            recess_char[run,'dflow_spr_slp'] = dflow_spr_mod$coef[2] 
            recess_char[run,'dflow_spr_rho'] = dflow_spr_spearmans$estimate
            recess_char[run,'dflow_spr_pval'] = dflow_spr_spearmans$p.value 
            recess_char[run,'dflow_sum_slp'] = dflow_sum_mod$coef[2] 
            recess_char[run,'dflow_sum_rho'] = dflow_sum_spearmans$estimate
            recess_char[run,'dflow_sum_pval'] = dflow_sum_spearmans$p.value 
            recess_char[run,'dflow_fal_slp'] = dflow_fal_mod$coef[2] 
            recess_char[run,'dflow_fal_rho'] = dflow_fal_spearmans$estimate
            recess_char[run,'dflow_fal_pval'] = dflow_fal_spearmans$p.value 
            
            recess_char[run,'bflow_win_slp'] = bflow_win_mod$coef[2] 
            recess_char[run,'bflow_spr_slp'] = bflow_spr_mod$coef[2] 
            recess_char[run,'bflow_spr_rho'] = bflow_spr_spearmans$estimate
            recess_char[run,'bflow_spr_pval'] = bflow_spr_spearmans$p.value 
            recess_char[run,'bflow_sum_slp'] = bflow_sum_mod$coef[2] 
            recess_char[run,'bflow_sum_rho'] = bflow_sum_spearmans$estimate
            recess_char[run,'bflow_sum_pval'] = bflow_sum_spearmans$p.value 
            recess_char[run,'bflow_fal_slp'] = bflow_fal_mod$coef[2] 
            recess_char[run,'bflow_fal_rho'] = bflow_fal_spearmans$estimate
            recess_char[run,'bflow_fal_pval'] = bflow_fal_spearmans$p.value 
            
            
            # same but with DFI_byYear
            oflow_mod = zyp.sen(overland ~ year, subset(DFI_byYear, !is.na(DFI_byYear$overland)))
            qflow_mod = zyp.sen(qflow ~ year, subset(DFI_byYear, !is.na(DFI_byYear$qflow)))
            dflow_mod = zyp.sen(dflow ~ year, subset(DFI_byYear, !is.na(DFI_byYear$dflow)))
            bflow_mod = zyp.sen(bflow ~ year, subset(DFI_byYear, !is.na(DFI_byYear$bflow)))
            
            oflow_spearmans = cor.test(DFI_byYear$year, DFI_byYear$overland, method='spearman')
            qflow_spearmans = cor.test(DFI_byYear$year, DFI_byYear$qflow, method='spearman')
            dflow_spearmans = cor.test(DFI_byYear$year, DFI_byYear$dflow, method='spearman')
            bflow_spearmans = cor.test(DFI_byYear$year, DFI_byYear$bflow, method='spearman')
            
            recess_char[run,'oflow_slp'] = oflow_mod$coef[2] 
            recess_char[run,'oflow_rho'] = oflow_spearmans$estimate
            recess_char[run,'oflow_pval'] = oflow_spearmans$p.value 
            recess_char[run,'qflow_slp'] = qflow_mod$coef[2] 
            recess_char[run,'qflow_rho'] = qflow_spearmans$estimate
            recess_char[run,'qflow_pval'] = qflow_spearmans$p.value 
            recess_char[run,'dflow_slp'] = dflow_mod$coef[2] 
            recess_char[run,'dflow_rho'] = dflow_spearmans$estimate
            recess_char[run,'dflow_pval'] = dflow_spearmans$p.value 
            recess_char[run,'bflow_slp'] = bflow_mod$coef[2] 
            recess_char[run,'bflow_rho'] = bflow_spearmans$estimate
            recess_char[run,'bflow_pval'] = bflow_spearmans$p.value 
            
            
            # same but with DFI_volumeByYear
            oflow_mod = zyp.sen(overland ~ year, subset(DFI_volumeByYear, !is.na(DFI_volumeByYear$overland)))
            qflow_mod = zyp.sen(qflow ~ year, subset(DFI_volumeByYear, !is.na(DFI_volumeByYear$qflow)))
            dflow_mod = zyp.sen(dflow ~ year, subset(DFI_volumeByYear, !is.na(DFI_volumeByYear$dflow)))
            bflow_mod = zyp.sen(bflow ~ year, subset(DFI_volumeByYear, !is.na(DFI_volumeByYear$bflow)))
            
            oflow_spearmans = cor.test(DFI_volumeByYear$year, DFI_volumeByYear$overland, method='spearman')
            qflow_spearmans = cor.test(DFI_volumeByYear$year, DFI_volumeByYear$qflow, method='spearman')
            dflow_spearmans = cor.test(DFI_volumeByYear$year, DFI_volumeByYear$dflow, method='spearman')
            bflow_spearmans = cor.test(DFI_volumeByYear$year, DFI_volumeByYear$bflow, method='spearman')
            
            recess_char[run,'oflow_slp'] = oflow_mod$coef[2] 
            recess_char[run,'oflow_rho'] = oflow_spearmans$estimate
            recess_char[run,'oflow_pval'] = oflow_spearmans$p.value 
            recess_char[run,'qflow_slp'] = qflow_mod$coef[2] 
            recess_char[run,'qflow_rho'] = qflow_spearmans$estimate
            recess_char[run,'qflow_pval'] = qflow_spearmans$p.value 
            recess_char[run,'dflow_slp'] = dflow_mod$coef[2] 
            recess_char[run,'dflow_rho'] = dflow_spearmans$estimate
            recess_char[run,'dflow_pval'] = dflow_spearmans$p.value 
            recess_char[run,'bflow_slp'] = bflow_mod$coef[2] 
            recess_char[run,'bflow_rho'] = bflow_spearmans$estimate
            recess_char[run,'bflow_pval'] = bflow_spearmans$p.value 
            
            
            # same but with DFI_varianceByYear
            #	DFI_varianceByYear = data.frame(cbind(years_to_use, NA,NA,NA,NA))
            #	colnames(DFI_varianceByYear) = c('year', 'overland', 'qflow', 'dflow', 'bflow')
            #todo
            
            
            # same but with DFI_varianceByYear
            #	DFI_DDays = data.frame(cbind(years_to_use, NA,NA,NA, NA,NA,NA, NA,NA,NA, NA,NA,NA))
            #	colnames(DFI_DDays) = c('year', 'oday_25', 'oday_50', 'oday_75', 'qday_25', 'qday_50', 'qday_75', 'dday_25', 'dday_50', 'dday_75','bday_25', 'bday_50', 'bday_75')
            #todo
            
            
            
            ##################################################################################
            # same but with WMO
            WMO_qflow_win_mod = zyp.sen(qflow ~ year, subset(WMO, seasons ==1))
            WMO_qflow_spr_mod = zyp.sen(qflow ~ year, subset(WMO, seasons ==2))
            WMO_qflow_sum_mod = zyp.sen(qflow ~ year, subset(WMO, seasons ==3))
            WMO_qflow_fal_mod = zyp.sen(qflow ~ year, subset(WMO, seasons ==4))
            WMO_bflow_win_mod = zyp.sen(bflow ~ year, subset(WMO, seasons ==1))
            WMO_bflow_spr_mod = zyp.sen(bflow ~ year, subset(WMO, seasons ==2))
            WMO_bflow_sum_mod = zyp.sen(bflow ~ year, subset(WMO, seasons ==3))
            WMO_bflow_fal_mod = zyp.sen(bflow ~ year, subset(WMO, seasons ==4))
            
            the_subset = subset(WMO, !is.na(bflow) & seasons == 1); if(nrow(the_subset) > 3) {
              WMO_qflow_win_spearmans = cor.test(the_subset$year,the_subset$qflow, method='spearman')
              WMO_bflow_win_spearmans = cor.test(the_subset$year, the_subset$bflow, method='spearman')
              recess_char[run,'WMO_qflow_win_rho'] = WMO_qflow_win_spearmans$estimate
              recess_char[run,'WMO_qflow_win_pval'] = WMO_qflow_win_spearmans$p.value 
              recess_char[run,'WMO_bflow_win_rho'] = WMO_bflow_win_spearmans$estimate
              recess_char[run,'WMO_bflow_win_pval'] = WMO_bflow_win_spearmans$p.value 
            }
            WMO_qflow_spr_spearmans = cor.test(subset(WMO, seasons == 2)$year, subset(WMO, seasons == 2)$qflow, method='spearman')
            WMO_qflow_sum_spearmans = cor.test(subset(WMO, seasons == 3)$year, subset(WMO, seasons == 3)$qflow, method='spearman')
            WMO_qflow_fal_spearmans = cor.test(subset(WMO, seasons == 4)$year, subset(WMO, seasons == 4)$qflow, method='spearman')
            WMO_bflow_spr_spearmans = cor.test(subset(WMO, seasons == 2)$year, subset(WMO, seasons == 2)$bflow, method='spearman')
            WMO_bflow_sum_spearmans = cor.test(subset(WMO, seasons == 3)$year, subset(WMO, seasons == 3)$bflow, method='spearman')
            WMO_bflow_fal_spearmans = cor.test(subset(WMO, seasons == 4)$year, subset(WMO, seasons == 4)$bflow, method='spearman')
            
            recess_char[run,'WMO_qflow_win_slp'] = WMO_qflow_win_mod$coef[2] 
            recess_char[run,'WMO_qflow_spr_slp'] = WMO_qflow_spr_mod$coef[2] 
            recess_char[run,'WMO_qflow_spr_rho'] = WMO_qflow_spr_spearmans$estimate
            recess_char[run,'WMO_qflow_spr_pval'] = WMO_qflow_spr_spearmans$p.value 
            recess_char[run,'WMO_qflow_sum_slp'] = WMO_qflow_sum_mod$coef[2] 
            recess_char[run,'WMO_qflow_sum_rho'] = WMO_qflow_sum_spearmans$estimate
            recess_char[run,'WMO_qflow_sum_pval'] = WMO_qflow_sum_spearmans$p.value 
            recess_char[run,'WMO_qflow_fal_slp'] = WMO_qflow_fal_mod$coef[2] 
            recess_char[run,'WMO_qflow_fal_rho'] = WMO_qflow_fal_spearmans$estimate
            recess_char[run,'WMO_qflow_fal_pval'] = WMO_qflow_fal_spearmans$p.value 
            recess_char[run,'WMO_bflow_win_slp'] = WMO_bflow_win_mod$coef[2] 
            recess_char[run,'WMO_bflow_spr_slp'] = WMO_bflow_spr_mod$coef[2] 
            recess_char[run,'WMO_bflow_spr_rho'] = WMO_bflow_spr_spearmans$estimate
            recess_char[run,'WMO_bflow_spr_pval'] = WMO_bflow_spr_spearmans$p.value 
            recess_char[run,'WMO_bflow_sum_slp'] = WMO_bflow_sum_mod$coef[2] 
            recess_char[run,'WMO_bflow_sum_rho'] = WMO_bflow_sum_spearmans$estimate
            recess_char[run,'WMO_bflow_sum_pval'] = WMO_bflow_sum_spearmans$p.value 
            recess_char[run,'WMO_bflow_fal_slp'] = WMO_bflow_fal_mod$coef[2] 
            recess_char[run,'WMO_bflow_fal_rho'] = WMO_bflow_fal_spearmans$estimate
            recess_char[run,'WMO_bflow_fal_pval'] = WMO_bflow_fal_spearmans$p.value 
            
            
            # same but with WMO_byYear
            WMO_qflow_mod = zyp.sen(qflow ~ year, subset(WMO_byYear, !is.na(WMO_byYear$qflow)))
            WMO_bflow_mod = zyp.sen(bflow ~ year, subset(WMO_byYear, !is.na(WMO_byYear$bflow)))
            
            WMO_qflow_spearmans = cor.test(WMO_byYear$year, WMO_byYear$qflow, method='spearman')
            WMO_bflow_spearmans = cor.test(WMO_byYear$year, WMO_byYear$bflow, method='spearman')
            
            recess_char[run,'WMO_qflow_slp'] = WMO_qflow_mod$coef[2] 
            recess_char[run,'WMO_qflow_rho'] = WMO_qflow_spearmans$estimate
            recess_char[run,'WMO_qflow_pval'] = WMO_qflow_spearmans$p.value 
            recess_char[run,'WMO_bflow_slp'] = WMO_bflow_mod$coef[2] 
            recess_char[run,'WMO_bflow_rho'] = WMO_bflow_spearmans$estimate
            recess_char[run,'WMO_bflow_pval'] = WMO_bflow_spearmans$p.value 
            
            
            # same but with WMO_volumeByYear
            WMO_qflow_vol_mod = zyp.sen(qflow ~ year, subset(WMO_volumeByYear, !is.na(WMO_volumeByYear$qflow)))
            WMO_bflow_vol_mod = zyp.sen(bflow ~ year, subset(WMO_volumeByYear, !is.na(WMO_volumeByYear$bflow)))
            
            WMO_qflow_vol_spearmans = cor.test(WMO_volumeByYear$year, WMO_volumeByYear$qflow, method='spearman')
            WMO_bflow_vol_spearmans = cor.test(WMO_volumeByYear$year, WMO_volumeByYear$bflow, method='spearman')
            
            recess_char[run,'WMO_qflow_vol_slp'] = WMO_qflow_vol_mod$coef[2] 
            recess_char[run,'WMO_qflow_vol_rho'] = WMO_qflow_vol_spearmans$estimate
            recess_char[run,'WMO_qflow_vol_pval'] = WMO_qflow_vol_spearmans$p.value 
            recess_char[run,'WMO_bflow_vol_slp'] = WMO_bflow_vol_mod$coef[2] 
            recess_char[run,'WMO_bflow_vol_rho'] = WMO_bflow_vol_spearmans$estimate
            recess_char[run,'WMO_bflow_vol_pval'] = WMO_bflow_vol_spearmans$p.value 
            
            
            # same but with WMO_volumeByYear
            #		WMO_varianceByYear = data.frame(cbind(years_to_use, NA,NA))
            #		colnames(WMO_varianceByYear) = c('year', 'qflow', 'bflow')
            #todo
            
            
            # same but with WMO_DDays
            WMO_qday_5_mod = zyp.sen(qday_5 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$qday_5)))
            WMO_qday_10_mod = zyp.sen(qday_10 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$qday_10)))
            WMO_qday_20_mod = zyp.sen(qday_20 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$qday_20)))
            WMO_qday_30_mod = zyp.sen(qday_30 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$qday_30)))
            WMO_qday_40_mod = zyp.sen(qday_40 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$qday_40)))
            WMO_qday_50_mod = zyp.sen(qday_50 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$qday_50)))
            WMO_qday_60_mod = zyp.sen(qday_60 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$qday_60)))
            WMO_qday_70_mod = zyp.sen(qday_70 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$qday_70)))
            WMO_qday_80_mod = zyp.sen(qday_80 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$qday_80)))
            WMO_qday_90_mod = zyp.sen(qday_90 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$qday_90)))
            WMO_qday_95_mod = zyp.sen(qday_95 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$qday_95)))
            
            WMO_bday_5_mod = zyp.sen(bday_5 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$bday_5)))
            WMO_bday_10_mod = zyp.sen(bday_10 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$bday_10)))
            WMO_bday_20_mod = zyp.sen(bday_20 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$bday_20)))
            WMO_bday_30_mod = zyp.sen(bday_30 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$bday_30)))
            WMO_bday_40_mod = zyp.sen(bday_40 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$bday_40)))
            WMO_bday_50_mod = zyp.sen(bday_50 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$bday_50)))
            WMO_bday_60_mod = zyp.sen(bday_60 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$bday_60)))
            WMO_bday_70_mod = zyp.sen(bday_70 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$bday_70)))
            WMO_bday_80_mod = zyp.sen(bday_80 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$bday_80)))
            WMO_bday_90_mod = zyp.sen(bday_90 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$bday_90)))
            WMO_bday_95_mod = zyp.sen(bday_95 ~ year, subset(WMO_DDays, !is.na(WMO_DDays$bday_95)))
            
            WMO_qday_5_spearmans = cor.test(WMO_DDays$year, WMO_DDays$qday_5, method='spearman')
            WMO_qday_10_spearmans = cor.test(WMO_DDays$year, WMO_DDays$qday_10, method='spearman')
            WMO_qday_20_spearmans = cor.test(WMO_DDays$year, WMO_DDays$qday_20, method='spearman')
            WMO_qday_30_spearmans = cor.test(WMO_DDays$year, WMO_DDays$qday_30, method='spearman')
            WMO_qday_40_spearmans = cor.test(WMO_DDays$year, WMO_DDays$qday_40, method='spearman')
            WMO_qday_50_spearmans = cor.test(WMO_DDays$year, WMO_DDays$qday_50, method='spearman')
            WMO_qday_60_spearmans = cor.test(WMO_DDays$year, WMO_DDays$qday_60, method='spearman')
            WMO_qday_70_spearmans = cor.test(WMO_DDays$year, WMO_DDays$qday_70, method='spearman')
            WMO_qday_80_spearmans = cor.test(WMO_DDays$year, WMO_DDays$qday_80, method='spearman')
            WMO_qday_90_spearmans = cor.test(WMO_DDays$year, WMO_DDays$qday_90, method='spearman')
            WMO_qday_95_spearmans = cor.test(WMO_DDays$year, WMO_DDays$qday_95, method='spearman')
            
            recess_char[run,'WMO_qday_5_slp'] = WMO_qday_5_mod$coef[2] 
            recess_char[run,'WMO_qday_5_rho'] = WMO_qday_5_spearmans$estimate
            recess_char[run,'WMO_qday_5_pval'] = WMO_qday_5_spearmans$p.value 
            recess_char[run,'WMO_qday_10_slp'] = WMO_qday_10_mod$coef[2] 
            recess_char[run,'WMO_qday_10_rho'] = WMO_qday_10_spearmans$estimate
            recess_char[run,'WMO_qday_10_pval'] = WMO_qday_10_spearmans$p.value 
            recess_char[run,'WMO_qday_20_slp'] = WMO_qday_20_mod$coef[2] 
            recess_char[run,'WMO_qday_20_rho'] = WMO_qday_20_spearmans$estimate
            recess_char[run,'WMO_qday_20_pval'] = WMO_qday_20_spearmans$p.value 
            recess_char[run,'WMO_qday_30_slp'] = WMO_qday_30_mod$coef[2] 
            recess_char[run,'WMO_qday_30_rho'] = WMO_qday_30_spearmans$estimate
            recess_char[run,'WMO_qday_30_pval'] = WMO_qday_30_spearmans$p.value 
            recess_char[run,'WMO_qday_40_slp'] = WMO_qday_40_mod$coef[2] 
            recess_char[run,'WMO_qday_40_rho'] = WMO_qday_40_spearmans$estimate
            recess_char[run,'WMO_qday_40_pval'] = WMO_qday_40_spearmans$p.value 
            recess_char[run,'WMO_qday_50_slp'] = WMO_qday_50_mod$coef[2] 
            recess_char[run,'WMO_qday_50_rho'] = WMO_qday_50_spearmans$estimate
            recess_char[run,'WMO_qday_50_pval'] = WMO_qday_50_spearmans$p.value 
            recess_char[run,'WMO_qday_60_slp'] = WMO_qday_60_mod$coef[2] 
            recess_char[run,'WMO_qday_60_rho'] = WMO_qday_60_spearmans$estimate
            recess_char[run,'WMO_qday_60_pval'] = WMO_qday_60_spearmans$p.value 
            recess_char[run,'WMO_qday_70_slp'] = WMO_qday_70_mod$coef[2] 
            recess_char[run,'WMO_qday_70_rho'] = WMO_qday_70_spearmans$estimate
            recess_char[run,'WMO_qday_70_pval'] = WMO_qday_70_spearmans$p.value 
            recess_char[run,'WMO_qday_80_slp'] = WMO_qday_80_mod$coef[2] 
            recess_char[run,'WMO_qday_80_rho'] = WMO_qday_80_spearmans$estimate
            recess_char[run,'WMO_qday_80_pval'] = WMO_qday_80_spearmans$p.value 
            recess_char[run,'WMO_qday_90_slp'] = WMO_qday_90_mod$coef[2] 
            recess_char[run,'WMO_qday_90_rho'] = WMO_qday_90_spearmans$estimate
            recess_char[run,'WMO_qday_90_pval'] = WMO_qday_90_spearmans$p.value 
            recess_char[run,'WMO_qday_95_slp'] = WMO_qday_95_mod$coef[2] 
            recess_char[run,'WMO_qday_95_rho'] = WMO_qday_95_spearmans$estimate
            recess_char[run,'WMO_qday_95_pval'] = WMO_qday_95_spearmans$p.value 
            
            if(length(which(!is.na(WMO_DDays$bday_50))) > 4)	{
              WMO_bday_5_spearmans = cor.test(WMO_DDays$year, WMO_DDays$bday_5, method='spearman')
              WMO_bday_10_spearmans = cor.test(WMO_DDays$year, WMO_DDays$bday_10, method='spearman')
              WMO_bday_20_spearmans = cor.test(WMO_DDays$year, WMO_DDays$bday_20, method='spearman')
              WMO_bday_30_spearmans = cor.test(WMO_DDays$year, WMO_DDays$bday_30, method='spearman')
              WMO_bday_40_spearmans = cor.test(WMO_DDays$year, WMO_DDays$bday_40, method='spearman')
              WMO_bday_50_spearmans = cor.test(WMO_DDays$year, WMO_DDays$bday_50, method='spearman')
              WMO_bday_60_spearmans = cor.test(WMO_DDays$year, WMO_DDays$bday_60, method='spearman')
              WMO_bday_70_spearmans = cor.test(WMO_DDays$year, WMO_DDays$bday_70, method='spearman')
              WMO_bday_80_spearmans = cor.test(WMO_DDays$year, WMO_DDays$bday_80, method='spearman')
              WMO_bday_90_spearmans = cor.test(WMO_DDays$year, WMO_DDays$bday_90, method='spearman')
              WMO_bday_95_spearmans = cor.test(WMO_DDays$year, WMO_DDays$bday_95, method='spearman')
              
              recess_char[run,'WMO_bday_5_slp'] = WMO_bday_5_mod$coef[2] 
              recess_char[run,'WMO_bday_5_rho'] = WMO_bday_5_spearmans$estimate
              recess_char[run,'WMO_bday_5_pval'] = WMO_bday_5_spearmans$p.value 
              recess_char[run,'WMO_bday_10_slp'] = WMO_bday_10_mod$coef[2] 
              recess_char[run,'WMO_bday_10_rho'] = WMO_bday_10_spearmans$estimate
              recess_char[run,'WMO_bday_10_pval'] = WMO_bday_10_spearmans$p.value 
              recess_char[run,'WMO_bday_20_slp'] = WMO_bday_20_mod$coef[2] 
              recess_char[run,'WMO_bday_20_rho'] = WMO_bday_20_spearmans$estimate
              recess_char[run,'WMO_bday_20_pval'] = WMO_bday_20_spearmans$p.value 
              recess_char[run,'WMO_bday_30_slp'] = WMO_bday_30_mod$coef[2] 
              recess_char[run,'WMO_bday_30_rho'] = WMO_bday_30_spearmans$estimate
              recess_char[run,'WMO_bday_30_pval'] = WMO_bday_30_spearmans$p.value 
              recess_char[run,'WMO_bday_40_slp'] = WMO_bday_40_mod$coef[2] 
              recess_char[run,'WMO_bday_40_rho'] = WMO_bday_40_spearmans$estimate
              recess_char[run,'WMO_bday_40_pval'] = WMO_bday_40_spearmans$p.value 
              recess_char[run,'WMO_bday_50_slp'] = WMO_bday_50_mod$coef[2] 
              recess_char[run,'WMO_bday_50_rho'] = WMO_bday_50_spearmans$estimate
              recess_char[run,'WMO_bday_50_pval'] = WMO_bday_50_spearmans$p.value 
              recess_char[run,'WMO_bday_60_slp'] = WMO_bday_60_mod$coef[2] 
              recess_char[run,'WMO_bday_60_rho'] = WMO_bday_60_spearmans$estimate
              recess_char[run,'WMO_bday_60_pval'] = WMO_bday_60_spearmans$p.value 
              recess_char[run,'WMO_bday_70_slp'] = WMO_bday_70_mod$coef[2] 
              recess_char[run,'WMO_bday_70_rho'] = WMO_bday_70_spearmans$estimate
              recess_char[run,'WMO_bday_70_pval'] = WMO_bday_70_spearmans$p.value 
              recess_char[run,'WMO_bday_80_slp'] = WMO_bday_80_mod$coef[2] 
              recess_char[run,'WMO_bday_80_rho'] = WMO_bday_80_spearmans$estimate
              recess_char[run,'WMO_bday_80_pval'] = WMO_bday_80_spearmans$p.value 
              recess_char[run,'WMO_bday_90_slp'] = WMO_bday_90_mod$coef[2] 
              recess_char[run,'WMO_bday_90_rho'] = WMO_bday_90_spearmans$estimate
              recess_char[run,'WMO_bday_90_pval'] = WMO_bday_90_spearmans$p.value 
              recess_char[run,'WMO_bday_95_slp'] = WMO_bday_95_mod$coef[2] 
              recess_char[run,'WMO_bday_95_rho'] = WMO_bday_95_spearmans$estimate
              recess_char[run,'WMO_bday_95_pval'] = WMO_bday_95_spearmans$p.value 
            }
            
            
            
            
            ######################################################################################################################################
            ######################################################################################################################################
            # same but with NM90
            NM90_qflow_win_mod = zyp.sen(qflow ~ year, subset(NM90, seasons ==1))
            NM90_qflow_spr_mod = zyp.sen(qflow ~ year, subset(NM90, seasons ==2))
            NM90_qflow_sum_mod = zyp.sen(qflow ~ year, subset(NM90, seasons ==3))
            NM90_qflow_fal_mod = zyp.sen(qflow ~ year, subset(NM90, seasons ==4))
            NM90_bflow_win_mod = zyp.sen(bflow ~ year, subset(NM90, seasons ==1))
            NM90_bflow_spr_mod = zyp.sen(bflow ~ year, subset(NM90, seasons ==2))
            NM90_bflow_sum_mod = zyp.sen(bflow ~ year, subset(NM90, seasons ==3))
            NM90_bflow_fal_mod = zyp.sen(bflow ~ year, subset(NM90, seasons ==4))
            
            the_subset = subset(NM90, !is.na(bflow) & seasons == 1); if(nrow(the_subset) > 3) {
              NM90_qflow_win_spearmans = cor.test(the_subset$year,the_subset$qflow, method='spearman')
              NM90_bflow_win_spearmans = cor.test(the_subset$year, the_subset$bflow, method='spearman')
              recess_char[run,'NM90_qflow_win_rho'] = NM90_qflow_win_spearmans$estimate
              recess_char[run,'NM90_qflow_win_pval'] = NM90_qflow_win_spearmans$p.value 
              recess_char[run,'NM90_bflow_win_rho'] = NM90_bflow_win_spearmans$estimate
              recess_char[run,'NM90_bflow_win_pval'] = NM90_bflow_win_spearmans$p.value 
            }
            NM90_qflow_spr_spearmans = cor.test(subset(NM90, seasons == 2)$year, subset(NM90, seasons == 2)$qflow, method='spearman')
            NM90_qflow_sum_spearmans = cor.test(subset(NM90, seasons == 3)$year, subset(NM90, seasons == 3)$qflow, method='spearman')
            NM90_qflow_fal_spearmans = cor.test(subset(NM90, seasons == 4)$year, subset(NM90, seasons == 4)$qflow, method='spearman')
            NM90_bflow_spr_spearmans = cor.test(subset(NM90, seasons == 2)$year, subset(NM90, seasons == 2)$bflow, method='spearman')
            NM90_bflow_sum_spearmans = cor.test(subset(NM90, seasons == 3)$year, subset(NM90, seasons == 3)$bflow, method='spearman')
            NM90_bflow_fal_spearmans = cor.test(subset(NM90, seasons == 4)$year, subset(NM90, seasons == 4)$bflow, method='spearman')
            
            recess_char[run,'NM90_qflow_win_slp'] = NM90_qflow_win_mod$coef[2] 
            recess_char[run,'NM90_qflow_spr_slp'] = NM90_qflow_spr_mod$coef[2] 
            recess_char[run,'NM90_qflow_spr_rho'] = NM90_qflow_spr_spearmans$estimate
            recess_char[run,'NM90_qflow_spr_pval'] = NM90_qflow_spr_spearmans$p.value 
            recess_char[run,'NM90_qflow_sum_slp'] = NM90_qflow_sum_mod$coef[2] 
            recess_char[run,'NM90_qflow_sum_rho'] = NM90_qflow_sum_spearmans$estimate
            recess_char[run,'NM90_qflow_sum_pval'] = NM90_qflow_sum_spearmans$p.value 
            recess_char[run,'NM90_qflow_fal_slp'] = NM90_qflow_fal_mod$coef[2] 
            recess_char[run,'NM90_qflow_fal_rho'] = NM90_qflow_fal_spearmans$estimate
            recess_char[run,'NM90_qflow_fal_pval'] = NM90_qflow_fal_spearmans$p.value 
            recess_char[run,'NM90_bflow_win_slp'] = NM90_bflow_win_mod$coef[2] 
            recess_char[run,'NM90_bflow_spr_slp'] = NM90_bflow_spr_mod$coef[2] 
            recess_char[run,'NM90_bflow_spr_rho'] = NM90_bflow_spr_spearmans$estimate
            recess_char[run,'NM90_bflow_spr_pval'] = NM90_bflow_spr_spearmans$p.value 
            recess_char[run,'NM90_bflow_sum_slp'] = NM90_bflow_sum_mod$coef[2] 
            recess_char[run,'NM90_bflow_sum_rho'] = NM90_bflow_sum_spearmans$estimate
            recess_char[run,'NM90_bflow_sum_pval'] = NM90_bflow_sum_spearmans$p.value 
            recess_char[run,'NM90_bflow_fal_slp'] = NM90_bflow_fal_mod$coef[2] 
            recess_char[run,'NM90_bflow_fal_rho'] = NM90_bflow_fal_spearmans$estimate
            recess_char[run,'NM90_bflow_fal_pval'] = NM90_bflow_fal_spearmans$p.value 
            
            
            # same but with NM90_byYear
            NM90_qflow_mod = zyp.sen(qflow ~ year, subset(NM90_byYear, !is.na(NM90_byYear$qflow)))
            NM90_bflow_mod = zyp.sen(bflow ~ year, subset(NM90_byYear, !is.na(NM90_byYear$bflow)))
            
            NM90_qflow_spearmans = cor.test(NM90_byYear$year, NM90_byYear$qflow, method='spearman')
            NM90_bflow_spearmans = cor.test(NM90_byYear$year, NM90_byYear$bflow, method='spearman')
            
            recess_char[run,'NM90_qflow_slp'] = NM90_qflow_mod$coef[2] 
            recess_char[run,'NM90_qflow_rho'] = NM90_qflow_spearmans$estimate
            recess_char[run,'NM90_qflow_pval'] = NM90_qflow_spearmans$p.value 
            recess_char[run,'NM90_bflow_slp'] = NM90_bflow_mod$coef[2] 
            recess_char[run,'NM90_bflow_rho'] = NM90_bflow_spearmans$estimate
            recess_char[run,'NM90_bflow_pval'] = NM90_bflow_spearmans$p.value 
            
            
            # same but with NM90_volumeByYear
            NM90_qflow_vol_mod = zyp.sen(qflow ~ year, subset(NM90_volumeByYear, !is.na(NM90_volumeByYear$qflow)))
            NM90_bflow_vol_mod = zyp.sen(bflow ~ year, subset(NM90_volumeByYear, !is.na(NM90_volumeByYear$bflow)))
            
            NM90_qflow_vol_spearmans = cor.test(NM90_volumeByYear$year, NM90_volumeByYear$qflow, method='spearman')
            NM90_bflow_vol_spearmans = cor.test(NM90_volumeByYear$year, NM90_volumeByYear$bflow, method='spearman')
            
            recess_char[run,'NM90_qflow_vol_slp'] = NM90_qflow_vol_mod$coef[2] 
            recess_char[run,'NM90_qflow_vol_rho'] = NM90_qflow_vol_spearmans$estimate
            recess_char[run,'NM90_qflow_vol_pval'] = NM90_qflow_vol_spearmans$p.value 
            recess_char[run,'NM90_bflow_vol_slp'] = NM90_bflow_vol_mod$coef[2] 
            recess_char[run,'NM90_bflow_vol_rho'] = NM90_bflow_vol_spearmans$estimate
            recess_char[run,'NM90_bflow_vol_pval'] = NM90_bflow_vol_spearmans$p.value 
            
            
            # same but with NM90_volumeByYear
            #		NM90_varianceByYear = data.frame(cbind(years_to_use, NA,NA))
            #		colnames(NM90_varianceByYear) = c('year', 'qflow', 'bflow')
            #todo
            
            
            # same but with NM90_DDays
            NM90_qday_25_mod = zyp.sen(qday_25 ~ year, subset(NM90_DDays, !is.na(NM90_DDays$qday_25)))
            NM90_qday_50_mod = zyp.sen(qday_50 ~ year, subset(NM90_DDays, !is.na(NM90_DDays$qday_50)))
            NM90_qday_75_mod = zyp.sen(qday_75 ~ year, subset(NM90_DDays, !is.na(NM90_DDays$qday_75)))
            NM90_bday_25_mod = zyp.sen(bday_25 ~ year, subset(NM90_DDays, !is.na(NM90_DDays$bday_25)))
            NM90_bday_50_mod = zyp.sen(bday_50 ~ year, subset(NM90_DDays, !is.na(NM90_DDays$bday_50)))
            NM90_bday_75_mod = zyp.sen(bday_75 ~ year, subset(NM90_DDays, !is.na(NM90_DDays$bday_75)))
            
            NM90_qday_25_spearmans = cor.test(NM90_DDays$year, NM90_DDays$qday_25, method='spearman')
            NM90_qday_50_spearmans = cor.test(NM90_DDays$year, NM90_DDays$qday_50, method='spearman')
            NM90_qday_75_spearmans = cor.test(NM90_DDays$year, NM90_DDays$qday_75, method='spearman')
            
            recess_char[run,'NM90_qday_25_slp'] = NM90_qday_25_mod$coef[2] 
            recess_char[run,'NM90_qday_25_rho'] = NM90_qday_25_spearmans$estimate
            recess_char[run,'NM90_qday_25_pval'] = NM90_qday_25_spearmans$p.value 
            recess_char[run,'NM90_qday_50_slp'] = NM90_qday_50_mod$coef[2] 
            recess_char[run,'NM90_qday_50_rho'] = NM90_qday_50_spearmans$estimate
            recess_char[run,'NM90_qday_50_pval'] = NM90_qday_50_spearmans$p.value 
            recess_char[run,'NM90_qday_75_slp'] = NM90_qday_75_mod$coef[2] 
            recess_char[run,'NM90_qday_75_rho'] = NM90_qday_75_spearmans$estimate
            recess_char[run,'NM90_qday_75_pval'] = NM90_qday_75_spearmans$p.value 
            
            if(length(which(!is.na(NM90_DDays$bday_50))) > 4)	{
              NM90_bday_25_spearmans = cor.test(NM90_DDays$year, NM90_DDays$bday_25, method='spearman')
              NM90_bday_50_spearmans = cor.test(NM90_DDays$year, NM90_DDays$bday_50, method='spearman')
              NM90_bday_75_spearmans = cor.test(NM90_DDays$year, NM90_DDays$bday_75, method='spearman')
              recess_char[run,'NM90_bday_25_slp'] = NM90_bday_25_mod$coef[2] 
              recess_char[run,'NM90_bday_25_rho'] = NM90_bday_25_spearmans$estimate
              recess_char[run,'NM90_bday_25_pval'] = NM90_bday_25_spearmans$p.value 
              recess_char[run,'NM90_bday_50_slp'] = NM90_bday_50_mod$coef[2] 
              recess_char[run,'NM90_bday_50_rho'] = NM90_bday_50_spearmans$estimate
              recess_char[run,'NM90_bday_50_pval'] = NM90_bday_50_spearmans$p.value 
              recess_char[run,'NM90_bday_75_slp'] = NM90_bday_75_mod$coef[2] 
              recess_char[run,'NM90_bday_75_rho'] = NM90_bday_75_spearmans$estimate
              recess_char[run,'NM90_bday_75_pval'] = NM90_bday_75_spearmans$p.value 
              
            }
            
            
            
            
            
            
            ######################################################################################################################################
            ######################################################################################################################################
            # same but with LH13
            LH13_qflow_win_mod = zyp.sen(qflow ~ year, subset(LH13, seasons ==1))
            LH13_qflow_spr_mod = zyp.sen(qflow ~ year, subset(LH13, seasons ==2))
            LH13_qflow_sum_mod = zyp.sen(qflow ~ year, subset(LH13, seasons ==3))
            LH13_qflow_fal_mod = zyp.sen(qflow ~ year, subset(LH13, seasons ==4))
            LH13_bflow_win_mod = zyp.sen(bflow ~ year, subset(LH13, seasons ==1))
            LH13_bflow_spr_mod = zyp.sen(bflow ~ year, subset(LH13, seasons ==2))
            LH13_bflow_sum_mod = zyp.sen(bflow ~ year, subset(LH13, seasons ==3))
            LH13_bflow_fal_mod = zyp.sen(bflow ~ year, subset(LH13, seasons ==4))
            
            the_subset = subset(LH13, !is.na(bflow) & seasons == 1); if(nrow(the_subset) > 3) {
              LH13_qflow_win_spearmans = cor.test(the_subset$year,the_subset$qflow, method='spearman')
              LH13_bflow_win_spearmans = cor.test(the_subset$year, the_subset$bflow, method='spearman')
              recess_char[run,'LH13_qflow_win_rho'] = LH13_qflow_win_spearmans$estimate
              recess_char[run,'LH13_qflow_win_pval'] = LH13_qflow_win_spearmans$p.value 
              recess_char[run,'LH13_bflow_win_rho'] = LH13_bflow_win_spearmans$estimate
              recess_char[run,'LH13_bflow_win_pval'] = LH13_bflow_win_spearmans$p.value 
            }
            LH13_qflow_spr_spearmans = cor.test(subset(LH13, seasons == 2)$year, subset(LH13, seasons == 2)$qflow, method='spearman')
            LH13_qflow_sum_spearmans = cor.test(subset(LH13, seasons == 3)$year, subset(LH13, seasons == 3)$qflow, method='spearman')
            LH13_qflow_fal_spearmans = cor.test(subset(LH13, seasons == 4)$year, subset(LH13, seasons == 4)$qflow, method='spearman')
            LH13_bflow_spr_spearmans = cor.test(subset(LH13, seasons == 2)$year, subset(LH13, seasons == 2)$bflow, method='spearman')
            LH13_bflow_sum_spearmans = cor.test(subset(LH13, seasons == 3)$year, subset(LH13, seasons == 3)$bflow, method='spearman')
            LH13_bflow_fal_spearmans = cor.test(subset(LH13, seasons == 4)$year, subset(LH13, seasons == 4)$bflow, method='spearman')
            
            recess_char[run,'LH13_qflow_win_slp'] = LH13_qflow_win_mod$coef[2] 
            recess_char[run,'LH13_qflow_spr_slp'] = LH13_qflow_spr_mod$coef[2] 
            recess_char[run,'LH13_qflow_spr_rho'] = LH13_qflow_spr_spearmans$estimate
            recess_char[run,'LH13_qflow_spr_pval'] = LH13_qflow_spr_spearmans$p.value 
            recess_char[run,'LH13_qflow_sum_slp'] = LH13_qflow_sum_mod$coef[2] 
            recess_char[run,'LH13_qflow_sum_rho'] = LH13_qflow_sum_spearmans$estimate
            recess_char[run,'LH13_qflow_sum_pval'] = LH13_qflow_sum_spearmans$p.value 
            recess_char[run,'LH13_qflow_fal_slp'] = LH13_qflow_fal_mod$coef[2] 
            recess_char[run,'LH13_qflow_fal_rho'] = LH13_qflow_fal_spearmans$estimate
            recess_char[run,'LH13_qflow_fal_pval'] = LH13_qflow_fal_spearmans$p.value 
            recess_char[run,'LH13_bflow_win_slp'] = LH13_bflow_win_mod$coef[2] 
            recess_char[run,'LH13_bflow_spr_slp'] = LH13_bflow_spr_mod$coef[2] 
            recess_char[run,'LH13_bflow_spr_rho'] = LH13_bflow_spr_spearmans$estimate
            recess_char[run,'LH13_bflow_spr_pval'] = LH13_bflow_spr_spearmans$p.value 
            recess_char[run,'LH13_bflow_sum_slp'] = LH13_bflow_sum_mod$coef[2] 
            recess_char[run,'LH13_bflow_sum_rho'] = LH13_bflow_sum_spearmans$estimate
            recess_char[run,'LH13_bflow_sum_pval'] = LH13_bflow_sum_spearmans$p.value 
            recess_char[run,'LH13_bflow_fal_slp'] = LH13_bflow_fal_mod$coef[2] 
            recess_char[run,'LH13_bflow_fal_rho'] = LH13_bflow_fal_spearmans$estimate
            recess_char[run,'LH13_bflow_fal_pval'] = LH13_bflow_fal_spearmans$p.value 
            
            
            # same but with LH13_byYear
            LH13_qflow_mod = zyp.sen(qflow ~ year, subset(LH13_byYear, !is.na(LH13_byYear$qflow)))
            LH13_bflow_mod = zyp.sen(bflow ~ year, subset(LH13_byYear, !is.na(LH13_byYear$bflow)))
            
            LH13_qflow_spearmans = cor.test(LH13_byYear$year, LH13_byYear$qflow, method='spearman')
            LH13_bflow_spearmans = cor.test(LH13_byYear$year, LH13_byYear$bflow, method='spearman')
            
            recess_char[run,'LH13_qflow_slp'] = LH13_qflow_mod$coef[2] 
            recess_char[run,'LH13_qflow_rho'] = LH13_qflow_spearmans$estimate
            recess_char[run,'LH13_qflow_pval'] = LH13_qflow_spearmans$p.value 
            recess_char[run,'LH13_bflow_slp'] = LH13_bflow_mod$coef[2] 
            recess_char[run,'LH13_bflow_rho'] = LH13_bflow_spearmans$estimate
            recess_char[run,'LH13_bflow_pval'] = LH13_bflow_spearmans$p.value 
            
            
            # same but with LH13_volumeByYear
            LH13_qflow_vol_mod = zyp.sen(qflow ~ year, subset(LH13_volumeByYear, !is.na(LH13_volumeByYear$qflow)))
            LH13_bflow_vol_mod = zyp.sen(bflow ~ year, subset(LH13_volumeByYear, !is.na(LH13_volumeByYear$bflow)))
            
            LH13_qflow_vol_spearmans = cor.test(LH13_volumeByYear$year, LH13_volumeByYear$qflow, method='spearman')
            LH13_bflow_vol_spearmans = cor.test(LH13_volumeByYear$year, LH13_volumeByYear$bflow, method='spearman')
            
            recess_char[run,'LH13_qflow_vol_slp'] = LH13_qflow_vol_mod$coef[2] 
            recess_char[run,'LH13_qflow_vol_rho'] = LH13_qflow_vol_spearmans$estimate
            recess_char[run,'LH13_qflow_vol_pval'] = LH13_qflow_vol_spearmans$p.value 
            recess_char[run,'LH13_bflow_vol_slp'] = LH13_bflow_vol_mod$coef[2] 
            recess_char[run,'LH13_bflow_vol_rho'] = LH13_bflow_vol_spearmans$estimate
            recess_char[run,'LH13_bflow_vol_pval'] = LH13_bflow_vol_spearmans$p.value 
            
            
            # same but with LH13_volumeByYear
            #		LH13_varianceByYear = data.frame(cbind(years_to_use, NA,NA))
            #		colnames(LH13_varianceByYear) = c('year', 'qflow', 'bflow')
            #todo
            
            
            # same but with LH13_DDays
            LH13_qday_5_mod = zyp.sen(qday_5 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$qday_5)))
            LH13_qday_10_mod = zyp.sen(qday_10 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$qday_10)))
            LH13_qday_20_mod = zyp.sen(qday_20 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$qday_20)))
            LH13_qday_30_mod = zyp.sen(qday_30 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$qday_30)))
            LH13_qday_40_mod = zyp.sen(qday_40 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$qday_40)))
            LH13_qday_50_mod = zyp.sen(qday_50 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$qday_50)))
            LH13_qday_60_mod = zyp.sen(qday_60 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$qday_60)))
            LH13_qday_70_mod = zyp.sen(qday_70 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$qday_70)))
            LH13_qday_80_mod = zyp.sen(qday_80 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$qday_80)))
            LH13_qday_90_mod = zyp.sen(qday_90 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$qday_90)))
            LH13_qday_95_mod = zyp.sen(qday_95 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$qday_95)))
            
            LH13_bday_5_mod = zyp.sen(bday_5 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$bday_5)))
            LH13_bday_10_mod = zyp.sen(bday_10 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$bday_10)))
            LH13_bday_20_mod = zyp.sen(bday_20 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$bday_20)))
            LH13_bday_30_mod = zyp.sen(bday_30 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$bday_30)))
            LH13_bday_40_mod = zyp.sen(bday_40 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$bday_40)))
            LH13_bday_50_mod = zyp.sen(bday_50 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$bday_50)))
            LH13_bday_60_mod = zyp.sen(bday_60 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$bday_60)))
            LH13_bday_70_mod = zyp.sen(bday_70 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$bday_70)))
            LH13_bday_80_mod = zyp.sen(bday_80 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$bday_80)))
            LH13_bday_90_mod = zyp.sen(bday_90 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$bday_90)))
            LH13_bday_95_mod = zyp.sen(bday_95 ~ year, subset(LH13_DDays, !is.na(LH13_DDays$bday_95)))
            
            LH13_qday_5_spearmans = cor.test(LH13_DDays$year, LH13_DDays$qday_5, method='spearman')
            LH13_qday_10_spearmans = cor.test(LH13_DDays$year, LH13_DDays$qday_10, method='spearman')
            LH13_qday_20_spearmans = cor.test(LH13_DDays$year, LH13_DDays$qday_20, method='spearman')
            LH13_qday_30_spearmans = cor.test(LH13_DDays$year, LH13_DDays$qday_30, method='spearman')
            LH13_qday_40_spearmans = cor.test(LH13_DDays$year, LH13_DDays$qday_40, method='spearman')
            LH13_qday_50_spearmans = cor.test(LH13_DDays$year, LH13_DDays$qday_50, method='spearman')
            LH13_qday_60_spearmans = cor.test(LH13_DDays$year, LH13_DDays$qday_60, method='spearman')
            LH13_qday_70_spearmans = cor.test(LH13_DDays$year, LH13_DDays$qday_70, method='spearman')
            LH13_qday_80_spearmans = cor.test(LH13_DDays$year, LH13_DDays$qday_80, method='spearman')
            LH13_qday_90_spearmans = cor.test(LH13_DDays$year, LH13_DDays$qday_90, method='spearman')
            LH13_qday_95_spearmans = cor.test(LH13_DDays$year, LH13_DDays$qday_95, method='spearman')
            
            recess_char[run,'LH13_qday_5_slp'] = LH13_qday_5_mod$coef[2] 
            recess_char[run,'LH13_qday_5_rho'] = LH13_qday_5_spearmans$estimate
            recess_char[run,'LH13_qday_5_pval'] = LH13_qday_5_spearmans$p.value 
            recess_char[run,'LH13_qday_10_slp'] = LH13_qday_10_mod$coef[2] 
            recess_char[run,'LH13_qday_10_rho'] = LH13_qday_10_spearmans$estimate
            recess_char[run,'LH13_qday_10_pval'] = LH13_qday_10_spearmans$p.value 
            recess_char[run,'LH13_qday_20_slp'] = LH13_qday_20_mod$coef[2] 
            recess_char[run,'LH13_qday_20_rho'] = LH13_qday_20_spearmans$estimate
            recess_char[run,'LH13_qday_20_pval'] = LH13_qday_20_spearmans$p.value 
            recess_char[run,'LH13_qday_30_slp'] = LH13_qday_30_mod$coef[2] 
            recess_char[run,'LH13_qday_30_rho'] = LH13_qday_30_spearmans$estimate
            recess_char[run,'LH13_qday_30_pval'] = LH13_qday_30_spearmans$p.value 
            recess_char[run,'LH13_qday_40_slp'] = LH13_qday_40_mod$coef[2] 
            recess_char[run,'LH13_qday_40_rho'] = LH13_qday_40_spearmans$estimate
            recess_char[run,'LH13_qday_40_pval'] = LH13_qday_40_spearmans$p.value 
            recess_char[run,'LH13_qday_50_slp'] = LH13_qday_50_mod$coef[2] 
            recess_char[run,'LH13_qday_50_rho'] = LH13_qday_50_spearmans$estimate
            recess_char[run,'LH13_qday_50_pval'] = LH13_qday_50_spearmans$p.value 
            recess_char[run,'LH13_qday_60_slp'] = LH13_qday_60_mod$coef[2] 
            recess_char[run,'LH13_qday_60_rho'] = LH13_qday_60_spearmans$estimate
            recess_char[run,'LH13_qday_60_pval'] = LH13_qday_60_spearmans$p.value 
            recess_char[run,'LH13_qday_70_slp'] = LH13_qday_70_mod$coef[2] 
            recess_char[run,'LH13_qday_70_rho'] = LH13_qday_70_spearmans$estimate
            recess_char[run,'LH13_qday_70_pval'] = LH13_qday_70_spearmans$p.value 
            recess_char[run,'LH13_qday_80_slp'] = LH13_qday_80_mod$coef[2] 
            recess_char[run,'LH13_qday_80_rho'] = LH13_qday_80_spearmans$estimate
            recess_char[run,'LH13_qday_80_pval'] = LH13_qday_80_spearmans$p.value 
            recess_char[run,'LH13_qday_90_slp'] = LH13_qday_90_mod$coef[2] 
            recess_char[run,'LH13_qday_90_rho'] = LH13_qday_90_spearmans$estimate
            recess_char[run,'LH13_qday_90_pval'] = LH13_qday_90_spearmans$p.value 
            recess_char[run,'LH13_qday_95_slp'] = LH13_qday_95_mod$coef[2] 
            recess_char[run,'LH13_qday_95_rho'] = LH13_qday_95_spearmans$estimate
            recess_char[run,'LH13_qday_95_pval'] = LH13_qday_95_spearmans$p.value 
            
            if(length(which(!is.na(LH13_DDays$bday_50))) > 4)	{
              LH13_bday_5_spearmans = cor.test(LH13_DDays$year, LH13_DDays$bday_5, method='spearman')
              LH13_bday_10_spearmans = cor.test(LH13_DDays$year, LH13_DDays$bday_10, method='spearman')
              LH13_bday_20_spearmans = cor.test(LH13_DDays$year, LH13_DDays$bday_20, method='spearman')
              LH13_bday_30_spearmans = cor.test(LH13_DDays$year, LH13_DDays$bday_30, method='spearman')
              LH13_bday_40_spearmans = cor.test(LH13_DDays$year, LH13_DDays$bday_40, method='spearman')
              LH13_bday_50_spearmans = cor.test(LH13_DDays$year, LH13_DDays$bday_50, method='spearman')
              LH13_bday_60_spearmans = cor.test(LH13_DDays$year, LH13_DDays$bday_60, method='spearman')
              LH13_bday_70_spearmans = cor.test(LH13_DDays$year, LH13_DDays$bday_70, method='spearman')
              LH13_bday_80_spearmans = cor.test(LH13_DDays$year, LH13_DDays$bday_80, method='spearman')
              LH13_bday_90_spearmans = cor.test(LH13_DDays$year, LH13_DDays$bday_90, method='spearman')
              LH13_bday_95_spearmans = cor.test(LH13_DDays$year, LH13_DDays$bday_95, method='spearman')
              
              recess_char[run,'LH13_bday_5_slp'] = LH13_bday_5_mod$coef[2] 
              recess_char[run,'LH13_bday_5_rho'] = LH13_bday_5_spearmans$estimate
              recess_char[run,'LH13_bday_5_pval'] = LH13_bday_5_spearmans$p.value 
              recess_char[run,'LH13_bday_10_slp'] = LH13_bday_10_mod$coef[2] 
              recess_char[run,'LH13_bday_10_rho'] = LH13_bday_10_spearmans$estimate
              recess_char[run,'LH13_bday_10_pval'] = LH13_bday_10_spearmans$p.value 
              recess_char[run,'LH13_bday_20_slp'] = LH13_bday_20_mod$coef[2] 
              recess_char[run,'LH13_bday_20_rho'] = LH13_bday_20_spearmans$estimate
              recess_char[run,'LH13_bday_20_pval'] = LH13_bday_20_spearmans$p.value 
              recess_char[run,'LH13_bday_30_slp'] = LH13_bday_30_mod$coef[2] 
              recess_char[run,'LH13_bday_30_rho'] = LH13_bday_30_spearmans$estimate
              recess_char[run,'LH13_bday_30_pval'] = LH13_bday_30_spearmans$p.value 
              recess_char[run,'LH13_bday_40_slp'] = LH13_bday_40_mod$coef[2] 
              recess_char[run,'LH13_bday_40_rho'] = LH13_bday_40_spearmans$estimate
              recess_char[run,'LH13_bday_40_pval'] = LH13_bday_40_spearmans$p.value 
              recess_char[run,'LH13_bday_50_slp'] = LH13_bday_50_mod$coef[2] 
              recess_char[run,'LH13_bday_50_rho'] = LH13_bday_50_spearmans$estimate
              recess_char[run,'LH13_bday_50_pval'] = LH13_bday_50_spearmans$p.value 
              recess_char[run,'LH13_bday_60_slp'] = LH13_bday_60_mod$coef[2] 
              recess_char[run,'LH13_bday_60_rho'] = LH13_bday_60_spearmans$estimate
              recess_char[run,'LH13_bday_60_pval'] = LH13_bday_60_spearmans$p.value 
              recess_char[run,'LH13_bday_70_slp'] = LH13_bday_70_mod$coef[2] 
              recess_char[run,'LH13_bday_70_rho'] = LH13_bday_70_spearmans$estimate
              recess_char[run,'LH13_bday_70_pval'] = LH13_bday_70_spearmans$p.value 
              recess_char[run,'LH13_bday_80_slp'] = LH13_bday_80_mod$coef[2] 
              recess_char[run,'LH13_bday_80_rho'] = LH13_bday_80_spearmans$estimate
              recess_char[run,'LH13_bday_80_pval'] = LH13_bday_80_spearmans$p.value 
              recess_char[run,'LH13_bday_90_slp'] = LH13_bday_90_mod$coef[2] 
              recess_char[run,'LH13_bday_90_rho'] = LH13_bday_90_spearmans$estimate
              recess_char[run,'LH13_bday_90_pval'] = LH13_bday_90_spearmans$p.value 
              recess_char[run,'LH13_bday_95_slp'] = LH13_bday_95_mod$coef[2] 
              recess_char[run,'LH13_bday_95_rho'] = LH13_bday_95_spearmans$estimate
              recess_char[run,'LH13_bday_95_pval'] = LH13_bday_95_spearmans$p.value 
            }
            
            
            
            
            
            ######################################################################################################################################
            ######################################################################################################################################
            # same but with E05
            E05_qflow_win_mod = zyp.sen(qflow ~ year, subset(E05, seasons ==1))
            E05_qflow_spr_mod = zyp.sen(qflow ~ year, subset(E05, seasons ==2))
            E05_qflow_sum_mod = zyp.sen(qflow ~ year, subset(E05, seasons ==3))
            E05_qflow_fal_mod = zyp.sen(qflow ~ year, subset(E05, seasons ==4))
            E05_bflow_win_mod = zyp.sen(bflow ~ year, subset(E05, seasons ==1))
            E05_bflow_spr_mod = zyp.sen(bflow ~ year, subset(E05, seasons ==2))
            E05_bflow_sum_mod = zyp.sen(bflow ~ year, subset(E05, seasons ==3))
            E05_bflow_fal_mod = zyp.sen(bflow ~ year, subset(E05, seasons ==4))
            
            the_subset = subset(E05, !is.na(bflow) & seasons == 1); if(nrow(the_subset) > 3) {
              E05_qflow_win_spearmans = cor.test(the_subset$year,the_subset$qflow, method='spearman')
              E05_bflow_win_spearmans = cor.test(the_subset$year, the_subset$bflow, method='spearman')
              recess_char[run,'E05_qflow_win_rho'] = E05_qflow_win_spearmans$estimate
              recess_char[run,'E05_qflow_win_pval'] = E05_qflow_win_spearmans$p.value 
              recess_char[run,'E05_bflow_win_rho'] = E05_bflow_win_spearmans$estimate
              recess_char[run,'E05_bflow_win_pval'] = E05_bflow_win_spearmans$p.value 
            }
            E05_qflow_spr_spearmans = cor.test(subset(E05, seasons == 2)$year, subset(E05, seasons == 2)$qflow, method='spearman')
            E05_qflow_sum_spearmans = cor.test(subset(E05, seasons == 3)$year, subset(E05, seasons == 3)$qflow, method='spearman')
            E05_qflow_fal_spearmans = cor.test(subset(E05, seasons == 4)$year, subset(E05, seasons == 4)$qflow, method='spearman')
            E05_bflow_spr_spearmans = cor.test(subset(E05, seasons == 2)$year, subset(E05, seasons == 2)$bflow, method='spearman')
            E05_bflow_sum_spearmans = cor.test(subset(E05, seasons == 3)$year, subset(E05, seasons == 3)$bflow, method='spearman')
            E05_bflow_fal_spearmans = cor.test(subset(E05, seasons == 4)$year, subset(E05, seasons == 4)$bflow, method='spearman')
            
            recess_char[run,'E05_qflow_win_slp'] = E05_qflow_win_mod$coef[2] 
            recess_char[run,'E05_qflow_spr_slp'] = E05_qflow_spr_mod$coef[2] 
            recess_char[run,'E05_qflow_spr_rho'] = E05_qflow_spr_spearmans$estimate
            recess_char[run,'E05_qflow_spr_pval'] = E05_qflow_spr_spearmans$p.value 
            recess_char[run,'E05_qflow_sum_slp'] = E05_qflow_sum_mod$coef[2] 
            recess_char[run,'E05_qflow_sum_rho'] = E05_qflow_sum_spearmans$estimate
            recess_char[run,'E05_qflow_sum_pval'] = E05_qflow_sum_spearmans$p.value 
            recess_char[run,'E05_qflow_fal_slp'] = E05_qflow_fal_mod$coef[2] 
            recess_char[run,'E05_qflow_fal_rho'] = E05_qflow_fal_spearmans$estimate
            recess_char[run,'E05_qflow_fal_pval'] = E05_qflow_fal_spearmans$p.value 
            recess_char[run,'E05_bflow_win_slp'] = E05_bflow_win_mod$coef[2] 
            recess_char[run,'E05_bflow_spr_slp'] = E05_bflow_spr_mod$coef[2] 
            recess_char[run,'E05_bflow_spr_rho'] = E05_bflow_spr_spearmans$estimate
            recess_char[run,'E05_bflow_spr_pval'] = E05_bflow_spr_spearmans$p.value 
            recess_char[run,'E05_bflow_sum_slp'] = E05_bflow_sum_mod$coef[2] 
            recess_char[run,'E05_bflow_sum_rho'] = E05_bflow_sum_spearmans$estimate
            recess_char[run,'E05_bflow_sum_pval'] = E05_bflow_sum_spearmans$p.value 
            recess_char[run,'E05_bflow_fal_slp'] = E05_bflow_fal_mod$coef[2] 
            recess_char[run,'E05_bflow_fal_rho'] = E05_bflow_fal_spearmans$estimate
            recess_char[run,'E05_bflow_fal_pval'] = E05_bflow_fal_spearmans$p.value 
            
            # same but with E05_byYear
            E05_qflow_mod = zyp.sen(qflow ~ year, subset(E05_byYear, !is.na(E05_byYear$qflow)))
            E05_bflow_mod = zyp.sen(bflow ~ year, subset(E05_byYear, !is.na(E05_byYear$bflow)))
            
            E05_qflow_spearmans = cor.test(E05_byYear$year, E05_byYear$qflow, method='spearman')
            E05_bflow_spearmans = cor.test(E05_byYear$year, E05_byYear$bflow, method='spearman')
            
            recess_char[run,'E05_qflow_slp'] = E05_qflow_mod$coef[2] 
            recess_char[run,'E05_qflow_rho'] = E05_qflow_spearmans$estimate
            recess_char[run,'E05_qflow_pval'] = E05_qflow_spearmans$p.value 
            recess_char[run,'E05_bflow_slp'] = E05_bflow_mod$coef[2] 
            recess_char[run,'E05_bflow_rho'] = E05_bflow_spearmans$estimate
            recess_char[run,'E05_bflow_pval'] = E05_bflow_spearmans$p.value 
            
            
            # same but with E05_volumeByYear
            E05_qflow_vol_mod = zyp.sen(qflow ~ year, subset(E05_volumeByYear, !is.na(E05_volumeByYear$qflow)))
            E05_bflow_vol_mod = zyp.sen(bflow ~ year, subset(E05_volumeByYear, !is.na(E05_volumeByYear$bflow)))
            
            E05_qflow_vol_spearmans = cor.test(E05_volumeByYear$year, E05_volumeByYear$qflow, method='spearman')
            E05_bflow_vol_spearmans = cor.test(E05_volumeByYear$year, E05_volumeByYear$bflow, method='spearman')
            
            recess_char[run,'E05_qflow_vol_slp'] = E05_qflow_vol_mod$coef[2] 
            recess_char[run,'E05_qflow_vol_rho'] = E05_qflow_vol_spearmans$estimate
            recess_char[run,'E05_qflow_vol_pval'] = E05_qflow_vol_spearmans$p.value 
            recess_char[run,'E05_bflow_vol_slp'] = E05_bflow_vol_mod$coef[2] 
            recess_char[run,'E05_bflow_vol_rho'] = E05_bflow_vol_spearmans$estimate
            recess_char[run,'E05_bflow_vol_pval'] = E05_bflow_vol_spearmans$p.value 
            
            
            # same but with E05_volumeByYear
            #		E05_varianceByYear = data.frame(cbind(years_to_use, NA,NA))
            #		colnames(E05_varianceByYear) = c('year', 'qflow', 'bflow')
            #todo
            
            
            # same but with E05_DDays
            E05_qday_25_mod = zyp.sen(qday_25 ~ year, subset(E05_DDays, !is.na(E05_DDays$qday_25)))
            E05_qday_50_mod = zyp.sen(qday_50 ~ year, subset(E05_DDays, !is.na(E05_DDays$qday_50)))
            E05_qday_75_mod = zyp.sen(qday_75 ~ year, subset(E05_DDays, !is.na(E05_DDays$qday_75)))
            E05_bday_25_mod = zyp.sen(bday_25 ~ year, subset(E05_DDays, !is.na(E05_DDays$bday_25)))
            E05_bday_50_mod = zyp.sen(bday_50 ~ year, subset(E05_DDays, !is.na(E05_DDays$bday_50)))
            E05_bday_75_mod = zyp.sen(bday_75 ~ year, subset(E05_DDays, !is.na(E05_DDays$bday_75)))
            
            E05_qday_25_spearmans = cor.test(E05_DDays$year, E05_DDays$qday_25, method='spearman')
            E05_qday_50_spearmans = cor.test(E05_DDays$year, E05_DDays$qday_50, method='spearman')
            E05_qday_75_spearmans = cor.test(E05_DDays$year, E05_DDays$qday_75, method='spearman')
            
            recess_char[run,'E05_qday_25_slp'] = E05_qday_25_mod$coef[2] 
            recess_char[run,'E05_qday_25_rho'] = E05_qday_25_spearmans$estimate
            recess_char[run,'E05_qday_25_pval'] = E05_qday_25_spearmans$p.value 
            recess_char[run,'E05_qday_50_slp'] = E05_qday_50_mod$coef[2] 
            recess_char[run,'E05_qday_50_rho'] = E05_qday_50_spearmans$estimate
            recess_char[run,'E05_qday_50_pval'] = E05_qday_50_spearmans$p.value 
            recess_char[run,'E05_qday_75_slp'] = E05_qday_75_mod$coef[2] 
            recess_char[run,'E05_qday_75_rho'] = E05_qday_75_spearmans$estimate
            recess_char[run,'E05_qday_75_pval'] = E05_qday_75_spearmans$p.value 
            
            if(length(which(!is.na(E05_DDays$bday_50))) > 4)	{
              E05_bday_25_spearmans = cor.test(E05_DDays$year, E05_DDays$bday_25, method='spearman')
              E05_bday_50_spearmans = cor.test(E05_DDays$year, E05_DDays$bday_50, method='spearman')
              E05_bday_75_spearmans = cor.test(E05_DDays$year, E05_DDays$bday_75, method='spearman')
              recess_char[run,'E05_bday_25_slp'] = E05_bday_25_mod$coef[2] 
              recess_char[run,'E05_bday_25_rho'] = E05_bday_25_spearmans$estimate
              recess_char[run,'E05_bday_25_pval'] = E05_bday_25_spearmans$p.value 
              recess_char[run,'E05_bday_50_slp'] = E05_bday_50_mod$coef[2] 
              recess_char[run,'E05_bday_50_rho'] = E05_bday_50_spearmans$estimate
              recess_char[run,'E05_bday_50_pval'] = E05_bday_50_spearmans$p.value 
              recess_char[run,'E05_bday_75_slp'] = E05_bday_75_mod$coef[2] 
              recess_char[run,'E05_bday_75_rho'] = E05_bday_75_spearmans$estimate
              recess_char[run,'E05_bday_75_pval'] = E05_bday_75_spearmans$p.value 
            }
            
            
            
            
            
            ######################################################################################################################################
            ######################################################################################################################################
            # same but with E12
            E12_qflow_win_mod = zyp.sen(qflow ~ year, subset(E12, seasons ==1))
            E12_qflow_spr_mod = zyp.sen(qflow ~ year, subset(E12, seasons ==2))
            E12_qflow_sum_mod = zyp.sen(qflow ~ year, subset(E12, seasons ==3))
            E12_qflow_fal_mod = zyp.sen(qflow ~ year, subset(E12, seasons ==4))
            E12_bflow_win_mod = zyp.sen(bflow ~ year, subset(E12, seasons ==1))
            E12_bflow_spr_mod = zyp.sen(bflow ~ year, subset(E12, seasons ==2))
            E12_bflow_sum_mod = zyp.sen(bflow ~ year, subset(E12, seasons ==3))
            E12_bflow_fal_mod = zyp.sen(bflow ~ year, subset(E12, seasons ==4))
            
            the_subset = subset(E12, !is.na(bflow) & seasons == 1); if(nrow(the_subset) > 3) {
              E12_qflow_win_spearmans = cor.test(the_subset$year,the_subset$qflow, method='spearman')
              E12_bflow_win_spearmans = cor.test(the_subset$year, the_subset$bflow, method='spearman')
              recess_char[run,'E12_qflow_win_rho'] = E12_qflow_win_spearmans$estimate
              recess_char[run,'E12_qflow_win_pval'] = E12_qflow_win_spearmans$p.value 
              recess_char[run,'E12_bflow_win_rho'] = E12_bflow_win_spearmans$estimate
              recess_char[run,'E12_bflow_win_pval'] = E12_bflow_win_spearmans$p.value 
            }
            E12_qflow_spr_spearmans = cor.test(subset(E12, seasons == 2)$year, subset(E12, seasons == 2)$qflow, method='spearman')
            E12_qflow_sum_spearmans = cor.test(subset(E12, seasons == 3)$year, subset(E12, seasons == 3)$qflow, method='spearman')
            E12_qflow_fal_spearmans = cor.test(subset(E12, seasons == 4)$year, subset(E12, seasons == 4)$qflow, method='spearman')
            E12_bflow_spr_spearmans = cor.test(subset(E12, seasons == 2)$year, subset(E12, seasons == 2)$bflow, method='spearman')
            E12_bflow_sum_spearmans = cor.test(subset(E12, seasons == 3)$year, subset(E12, seasons == 3)$bflow, method='spearman')
            E12_bflow_fal_spearmans = cor.test(subset(E12, seasons == 4)$year, subset(E12, seasons == 4)$bflow, method='spearman')
            
            recess_char[run,'E12_qflow_win_slp'] = E12_qflow_win_mod$coef[2] 
            recess_char[run,'E12_qflow_spr_slp'] = E12_qflow_spr_mod$coef[2] 
            recess_char[run,'E12_qflow_spr_rho'] = E12_qflow_spr_spearmans$estimate
            recess_char[run,'E12_qflow_spr_pval'] = E12_qflow_spr_spearmans$p.value 
            recess_char[run,'E12_qflow_sum_slp'] = E12_qflow_sum_mod$coef[2] 
            recess_char[run,'E12_qflow_sum_rho'] = E12_qflow_sum_spearmans$estimate
            recess_char[run,'E12_qflow_sum_pval'] = E12_qflow_sum_spearmans$p.value 
            recess_char[run,'E12_qflow_fal_slp'] = E12_qflow_fal_mod$coef[2] 
            recess_char[run,'E12_qflow_fal_rho'] = E12_qflow_fal_spearmans$estimate
            recess_char[run,'E12_qflow_fal_pval'] = E12_qflow_fal_spearmans$p.value 
            recess_char[run,'E12_bflow_win_slp'] = E12_bflow_win_mod$coef[2] 
            recess_char[run,'E12_bflow_spr_slp'] = E12_bflow_spr_mod$coef[2] 
            recess_char[run,'E12_bflow_spr_rho'] = E12_bflow_spr_spearmans$estimate
            recess_char[run,'E12_bflow_spr_pval'] = E12_bflow_spr_spearmans$p.value 
            recess_char[run,'E12_bflow_sum_slp'] = E12_bflow_sum_mod$coef[2] 
            recess_char[run,'E12_bflow_sum_rho'] = E12_bflow_sum_spearmans$estimate
            recess_char[run,'E12_bflow_sum_pval'] = E12_bflow_sum_spearmans$p.value 
            recess_char[run,'E12_bflow_fal_slp'] = E12_bflow_fal_mod$coef[2] 
            recess_char[run,'E12_bflow_fal_rho'] = E12_bflow_fal_spearmans$estimate
            recess_char[run,'E12_bflow_fal_pval'] = E12_bflow_fal_spearmans$p.value 
            
            
            # same but with E12_byYear
            E12_qflow_mod = zyp.sen(qflow ~ year, subset(E12_byYear, !is.na(E12_byYear$qflow)))
            E12_bflow_mod = zyp.sen(bflow ~ year, subset(E12_byYear, !is.na(E12_byYear$bflow)))
            
            E12_qflow_spearmans = cor.test(E12_byYear$year, E12_byYear$qflow, method='spearman')
            E12_bflow_spearmans = cor.test(E12_byYear$year, E12_byYear$bflow, method='spearman')
            
            recess_char[run,'E12_qflow_slp'] = E12_qflow_mod$coef[2] 
            recess_char[run,'E12_qflow_rho'] = E12_qflow_spearmans$estimate
            recess_char[run,'E12_qflow_pval'] = E12_qflow_spearmans$p.value 
            recess_char[run,'E12_bflow_slp'] = E12_bflow_mod$coef[2] 
            recess_char[run,'E12_bflow_rho'] = E12_bflow_spearmans$estimate
            recess_char[run,'E12_bflow_pval'] = E12_bflow_spearmans$p.value 
            
            
            # same but with E12_volumeByYear
            E12_qflow_vol_mod = zyp.sen(qflow ~ year, subset(E12_volumeByYear, !is.na(E12_volumeByYear$qflow)))
            E12_bflow_vol_mod = zyp.sen(bflow ~ year, subset(E12_volumeByYear, !is.na(E12_volumeByYear$bflow)))
            
            E12_qflow_vol_spearmans = cor.test(E12_volumeByYear$year, E12_volumeByYear$qflow, method='spearman')
            E12_bflow_vol_spearmans = cor.test(E12_volumeByYear$year, E12_volumeByYear$bflow, method='spearman')
            
            recess_char[run,'E12_qflow_vol_slp'] = E12_qflow_vol_mod$coef[2] 
            recess_char[run,'E12_qflow_vol_rho'] = E12_qflow_vol_spearmans$estimate
            recess_char[run,'E12_qflow_vol_pval'] = E12_qflow_vol_spearmans$p.value 
            recess_char[run,'E12_bflow_vol_slp'] = E12_bflow_vol_mod$coef[2] 
            recess_char[run,'E12_bflow_vol_rho'] = E12_bflow_vol_spearmans$estimate
            recess_char[run,'E12_bflow_vol_pval'] = E12_bflow_vol_spearmans$p.value 
            
            
            # same but with E12_volumeByYear
            #		E12_varianceByYear = data.frame(cbind(years_to_use, NA,NA))
            #		colnames(E12_varianceByYear) = c('year', 'qflow', 'bflow')
            #todo
            
            
            # same but with E12_DDays
            E12_qday_25_mod = zyp.sen(qday_25 ~ year, subset(E12_DDays, !is.na(E12_DDays$qday_25)))
            E12_qday_50_mod = zyp.sen(qday_50 ~ year, subset(E12_DDays, !is.na(E12_DDays$qday_50)))
            E12_qday_75_mod = zyp.sen(qday_75 ~ year, subset(E12_DDays, !is.na(E12_DDays$qday_75)))
            E12_bday_25_mod = zyp.sen(bday_25 ~ year, subset(E12_DDays, !is.na(E12_DDays$bday_25)))
            E12_bday_50_mod = zyp.sen(bday_50 ~ year, subset(E12_DDays, !is.na(E12_DDays$bday_50)))
            E12_bday_75_mod = zyp.sen(bday_75 ~ year, subset(E12_DDays, !is.na(E12_DDays$bday_75)))
            
            E12_qday_25_spearmans = cor.test(E12_DDays$year, E12_DDays$qday_25, method='spearman')
            E12_qday_50_spearmans = cor.test(E12_DDays$year, E12_DDays$qday_50, method='spearman')
            E12_qday_75_spearmans = cor.test(E12_DDays$year, E12_DDays$qday_75, method='spearman')
            
            recess_char[run,'E12_qday_25_slp'] = E12_qday_25_mod$coef[2] 
            recess_char[run,'E12_qday_25_rho'] = E12_qday_25_spearmans$estimate
            recess_char[run,'E12_qday_25_pval'] = E12_qday_25_spearmans$p.value 
            recess_char[run,'E12_qday_50_slp'] = E12_qday_50_mod$coef[2] 
            recess_char[run,'E12_qday_50_rho'] = E12_qday_50_spearmans$estimate
            recess_char[run,'E12_qday_50_pval'] = E12_qday_50_spearmans$p.value 
            recess_char[run,'E12_qday_75_slp'] = E12_qday_75_mod$coef[2] 
            recess_char[run,'E12_qday_75_rho'] = E12_qday_75_spearmans$estimate
            recess_char[run,'E12_qday_75_pval'] = E12_qday_75_spearmans$p.value 
            
            if(length(which(!is.na(E12_DDays$bday_50))) > 4)	{
              E12_bday_25_spearmans = cor.test(E12_DDays$year, E12_DDays$bday_25, method='spearman')
              E12_bday_50_spearmans = cor.test(E12_DDays$year, E12_DDays$bday_50, method='spearman')
              E12_bday_75_spearmans = cor.test(E12_DDays$year, E12_DDays$bday_75, method='spearman')
              recess_char[run,'E12_bday_25_slp'] = E12_bday_25_mod$coef[2] 
              recess_char[run,'E12_bday_25_rho'] = E12_bday_25_spearmans$estimate
              recess_char[run,'E12_bday_25_pval'] = E12_bday_25_spearmans$p.value 
              recess_char[run,'E12_bday_50_slp'] = E12_bday_50_mod$coef[2] 
              recess_char[run,'E12_bday_50_rho'] = E12_bday_50_spearmans$estimate
              recess_char[run,'E12_bday_50_pval'] = E12_bday_50_spearmans$p.value 
              recess_char[run,'E12_bday_75_slp'] = E12_bday_75_mod$coef[2] 
              recess_char[run,'E12_bday_75_rho'] = E12_bday_75_spearmans$estimate
              recess_char[run,'E12_bday_75_pval'] = E12_bday_75_spearmans$p.value 
            }
            
            
            
            
            
            ######################################################################################################################################
            ######################################################################################################################################
            # same but with B93
            B93_qflow_win_mod = zyp.sen(qflow ~ year, subset(B93, seasons ==1))
            B93_qflow_spr_mod = zyp.sen(qflow ~ year, subset(B93, seasons ==2))
            B93_qflow_sum_mod = zyp.sen(qflow ~ year, subset(B93, seasons ==3))
            B93_qflow_fal_mod = zyp.sen(qflow ~ year, subset(B93, seasons ==4))
            B93_bflow_win_mod = zyp.sen(bflow ~ year, subset(B93, seasons ==1))
            B93_bflow_spr_mod = zyp.sen(bflow ~ year, subset(B93, seasons ==2))
            B93_bflow_sum_mod = zyp.sen(bflow ~ year, subset(B93, seasons ==3))
            B93_bflow_fal_mod = zyp.sen(bflow ~ year, subset(B93, seasons ==4))
            
            the_subset = subset(B93, !is.na(bflow) & seasons == 1); if(nrow(the_subset) > 3) {
              B93_qflow_win_spearmans = cor.test(the_subset$year,the_subset$qflow, method='spearman')
              B93_bflow_win_spearmans = cor.test(the_subset$year, the_subset$bflow, method='spearman')
              recess_char[run,'B93_qflow_win_rho'] = B93_qflow_win_spearmans$estimate
              recess_char[run,'B93_qflow_win_pval'] = B93_qflow_win_spearmans$p.value 
              recess_char[run,'B93_bflow_win_rho'] = B93_bflow_win_spearmans$estimate
              recess_char[run,'B93_bflow_win_pval'] = B93_bflow_win_spearmans$p.value 
            }
            B93_qflow_spr_spearmans = cor.test(subset(B93, seasons == 2)$year, subset(B93, seasons == 2)$qflow, method='spearman')
            B93_qflow_sum_spearmans = cor.test(subset(B93, seasons == 3)$year, subset(B93, seasons == 3)$qflow, method='spearman')
            B93_qflow_fal_spearmans = cor.test(subset(B93, seasons == 4)$year, subset(B93, seasons == 4)$qflow, method='spearman')
            B93_bflow_spr_spearmans = cor.test(subset(B93, seasons == 2)$year, subset(B93, seasons == 2)$bflow, method='spearman')
            B93_bflow_sum_spearmans = cor.test(subset(B93, seasons == 3)$year, subset(B93, seasons == 3)$bflow, method='spearman')
            B93_bflow_fal_spearmans = cor.test(subset(B93, seasons == 4)$year, subset(B93, seasons == 4)$bflow, method='spearman')
            
            recess_char[run,'B93_qflow_win_slp'] = B93_qflow_win_mod$coef[2] 
            recess_char[run,'B93_qflow_spr_slp'] = B93_qflow_spr_mod$coef[2] 
            recess_char[run,'B93_qflow_spr_rho'] = B93_qflow_spr_spearmans$estimate
            recess_char[run,'B93_qflow_spr_pval'] = B93_qflow_spr_spearmans$p.value 
            recess_char[run,'B93_qflow_sum_slp'] = B93_qflow_sum_mod$coef[2] 
            recess_char[run,'B93_qflow_sum_rho'] = B93_qflow_sum_spearmans$estimate
            recess_char[run,'B93_qflow_sum_pval'] = B93_qflow_sum_spearmans$p.value 
            recess_char[run,'B93_qflow_fal_slp'] = B93_qflow_fal_mod$coef[2] 
            recess_char[run,'B93_qflow_fal_rho'] = B93_qflow_fal_spearmans$estimate
            recess_char[run,'B93_qflow_fal_pval'] = B93_qflow_fal_spearmans$p.value 
            recess_char[run,'B93_bflow_win_slp'] = B93_bflow_win_mod$coef[2] 
            recess_char[run,'B93_bflow_spr_slp'] = B93_bflow_spr_mod$coef[2] 
            recess_char[run,'B93_bflow_spr_rho'] = B93_bflow_spr_spearmans$estimate
            recess_char[run,'B93_bflow_spr_pval'] = B93_bflow_spr_spearmans$p.value 
            recess_char[run,'B93_bflow_sum_slp'] = B93_bflow_sum_mod$coef[2] 
            recess_char[run,'B93_bflow_sum_rho'] = B93_bflow_sum_spearmans$estimate
            recess_char[run,'B93_bflow_sum_pval'] = B93_bflow_sum_spearmans$p.value 
            recess_char[run,'B93_bflow_fal_slp'] = B93_bflow_fal_mod$coef[2] 
            recess_char[run,'B93_bflow_fal_rho'] = B93_bflow_fal_spearmans$estimate
            recess_char[run,'B93_bflow_fal_pval'] = B93_bflow_fal_spearmans$p.value 
            
            
            # same but with B93_byYear
            B93_qflow_mod = zyp.sen(qflow ~ year, subset(B93_byYear, !is.na(B93_byYear$qflow)))
            B93_bflow_mod = zyp.sen(bflow ~ year, subset(B93_byYear, !is.na(B93_byYear$bflow)))
            
            B93_qflow_spearmans = cor.test(B93_byYear$year, B93_byYear$qflow, method='spearman')
            B93_bflow_spearmans = cor.test(B93_byYear$year, B93_byYear$bflow, method='spearman')
            
            recess_char[run,'B93_qflow_slp'] = B93_qflow_mod$coef[2] 
            recess_char[run,'B93_qflow_rho'] = B93_qflow_spearmans$estimate
            recess_char[run,'B93_qflow_pval'] = B93_qflow_spearmans$p.value 
            recess_char[run,'B93_bflow_slp'] = B93_bflow_mod$coef[2] 
            recess_char[run,'B93_bflow_rho'] = B93_bflow_spearmans$estimate
            recess_char[run,'B93_bflow_pval'] = B93_bflow_spearmans$p.value 
            
            
            # same but with B93_volumeByYear
            B93_qflow_vol_mod = zyp.sen(qflow ~ year, subset(B93_volumeByYear, !is.na(B93_volumeByYear$qflow)))
            B93_bflow_vol_mod = zyp.sen(bflow ~ year, subset(B93_volumeByYear, !is.na(B93_volumeByYear$bflow)))
            
            B93_qflow_vol_spearmans = cor.test(B93_volumeByYear$year, B93_volumeByYear$qflow, method='spearman')
            B93_bflow_vol_spearmans = cor.test(B93_volumeByYear$year, B93_volumeByYear$bflow, method='spearman')
            
            recess_char[run,'B93_qflow_vol_slp'] = B93_qflow_vol_mod$coef[2] 
            recess_char[run,'B93_qflow_vol_rho'] = B93_qflow_vol_spearmans$estimate
            recess_char[run,'B93_qflow_vol_pval'] = B93_qflow_vol_spearmans$p.value 
            recess_char[run,'B93_bflow_vol_slp'] = B93_bflow_vol_mod$coef[2] 
            recess_char[run,'B93_bflow_vol_rho'] = B93_bflow_vol_spearmans$estimate
            recess_char[run,'B93_bflow_vol_pval'] = B93_bflow_vol_spearmans$p.value 
            
            
            # same but with B93_volumeByYear
            #		B93_varianceByYear = data.frame(cbind(years_to_use, NA,NA))
            #		colnames(B93_varianceByYear) = c('year', 'qflow', 'bflow')
            #todo
            
            
            # same but with B93_DDays
            B93_qday_25_mod = zyp.sen(qday_25 ~ year, subset(B93_DDays, !is.na(B93_DDays$qday_25)))
            B93_qday_50_mod = zyp.sen(qday_50 ~ year, subset(B93_DDays, !is.na(B93_DDays$qday_50)))
            B93_qday_75_mod = zyp.sen(qday_75 ~ year, subset(B93_DDays, !is.na(B93_DDays$qday_75)))
            B93_bday_25_mod = zyp.sen(bday_25 ~ year, subset(B93_DDays, !is.na(B93_DDays$bday_25)))
            B93_bday_50_mod = zyp.sen(bday_50 ~ year, subset(B93_DDays, !is.na(B93_DDays$bday_50)))
            B93_bday_75_mod = zyp.sen(bday_75 ~ year, subset(B93_DDays, !is.na(B93_DDays$bday_75)))
            
            B93_qday_25_spearmans = cor.test(B93_DDays$year, B93_DDays$qday_25, method='spearman')
            B93_qday_50_spearmans = cor.test(B93_DDays$year, B93_DDays$qday_50, method='spearman')
            B93_qday_75_spearmans = cor.test(B93_DDays$year, B93_DDays$qday_75, method='spearman')
            
            recess_char[run,'B93_qday_25_slp'] = B93_qday_25_mod$coef[2] 
            recess_char[run,'B93_qday_25_rho'] = B93_qday_25_spearmans$estimate
            recess_char[run,'B93_qday_25_pval'] = B93_qday_25_spearmans$p.value 
            recess_char[run,'B93_qday_50_slp'] = B93_qday_50_mod$coef[2] 
            recess_char[run,'B93_qday_50_rho'] = B93_qday_50_spearmans$estimate
            recess_char[run,'B93_qday_50_pval'] = B93_qday_50_spearmans$p.value 
            recess_char[run,'B93_qday_75_slp'] = B93_qday_75_mod$coef[2] 
            recess_char[run,'B93_qday_75_rho'] = B93_qday_75_spearmans$estimate
            recess_char[run,'B93_qday_75_pval'] = B93_qday_75_spearmans$p.value 
            
            if(length(which(!is.na(B93_DDays$bday_50))) > 4)	{
              B93_bday_25_spearmans = cor.test(B93_DDays$year, B93_DDays$bday_25, method='spearman')
              B93_bday_50_spearmans = cor.test(B93_DDays$year, B93_DDays$bday_50, method='spearman')
              B93_bday_75_spearmans = cor.test(B93_DDays$year, B93_DDays$bday_75, method='spearman')
              recess_char[run,'B93_bday_25_slp'] = B93_bday_25_mod$coef[2] 
              recess_char[run,'B93_bday_25_rho'] = B93_bday_25_spearmans$estimate
              recess_char[run,'B93_bday_25_pval'] = B93_bday_25_spearmans$p.value 
              recess_char[run,'B93_bday_50_slp'] = B93_bday_50_mod$coef[2] 
              recess_char[run,'B93_bday_50_rho'] = B93_bday_50_spearmans$estimate
              recess_char[run,'B93_bday_50_pval'] = B93_bday_50_spearmans$p.value 
              recess_char[run,'B93_bday_75_slp'] = B93_bday_75_mod$coef[2] 
              recess_char[run,'B93_bday_75_rho'] = B93_bday_75_spearmans$estimate
              recess_char[run,'B93_bday_75_pval'] = B93_bday_75_spearmans$p.value 
            }
            
            #	plot(julday_max$year, julday_max$D20_day)
            plot(julday_max$year, julday_max$D50_day)
            #	plot(julday_max$year, julday_max$D80_day)
            plot(smth_yrs, D50_smth_med)
            
            #	plot(thaw_byYear$year, thaw_byYear$winter)
            #	plot(thaw_byYear$year, thaw_byYear$spring)
            #	plot(thaw_byYear$year, thaw_byYear$summer)
            #	plot(thaw_byYear$year, thaw_byYear$fall)
            
            plot(RnMlt_byYear$annum, RnMlt_byYear$annum_lag)	;	abline(0,1)
            plot(precip_byYear$annum, precip_byYear$annum_lag)	;	abline(0,1)
            plot(RnMlt_byYear$year, RnMlt_byYear$opt_lag)
            plot(precip_byYear$year, precip_byYear$opt_lag)
            
            
            plot(Budyko_byYear$year,Budyko_byYear$PminQoverP)
            plot(Budyko_byYear$year,Budyko_byYear$ariInd)
            plot(Budyko_byYear$year,Budyko_byYear$EaOverP_pred)
            plot(Budyko_byYear$year,Budyko_byYear$pred_error)
            
            plot(Budyko_byYear$year, Budyko_byYear$num_days_waterStress)
            plot(Budyko_byYear$year, Budyko_byYear$num_days_waterStress2x)
            plot(Budyko_byYear$year, Budyko_byYear$num_days_waterStress10x)
            plot(flashiness_byYear$year, flashiness_byYear$RB_index)
            
          }	# end of if(nrow(gage_data) > 365*20)
        }	# end of if("Flow" %in% can_stream$Parameter)	{	# some streams only have stream level data, and directly calling flow data when there is none throws an error
        
      }	# end of if(length(years_to_use > 10))	
    }	# end of if(length(unique(month(streamy$Date))) >= 12)	{
    fwrite(recess_char, "J:\\Arctic_baseflow\\octWY_03MAR2025.csv") 
    #write.csv(recess_char, "J:\\Arctic_baseflow\\octWY_20jan2022.csv") 
  }	}	# end of if(nrow(gage_data > 1))	{
} 		# end of while (run < (nrow(Alaskan_gages))) 


